This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 02:29:40,010 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 02:29:40,011 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 02:29:40,022 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 02:29:40,023 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 02:29:40,024 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 02:29:40,025 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 02:29:40,027 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 02:29:40,029 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 02:29:40,030 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 02:29:40,031 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 02:29:40,031 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 02:29:40,033 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 02:29:40,034 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 02:29:40,035 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 02:29:40,036 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 02:29:40,037 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 02:29:40,039 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 02:29:40,040 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 02:29:40,042 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 02:29:40,043 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 02:29:40,044 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 02:29:40,045 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 02:29:40,046 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 02:29:40,046 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 02:29:40,047 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 02:29:40,047 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 02:29:40,048 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 02:29:40,048 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 02:29:40,048 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 02:29:40,049 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 02:29:40,049 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 02:29:40,050 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 02:29:40,051 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 02:29:40,052 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 02:29:40,054 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 02:29:40,054 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 02:29:40,060 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 02:29:40,060 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 02:29:40,060 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 02:29:40,066 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 02:29:40,068 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 02:29:40,068 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 02:29:40,079 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 02:29:40,079 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 02:29:40,080 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 02:29:40,080 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 02:29:40,080 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 02:29:40,080 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 02:29:40,080 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 02:29:40,080 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 02:29:40,080 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 02:29:40,080 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 02:29:40,081 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 02:29:40,081 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 02:29:40,082 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 02:29:40,082 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 02:29:40,082 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 02:29:40,082 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 02:29:40,101 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 02:29:40,111 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 02:29:40,113 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 02:29:40,114 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 02:29:40,114 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 02:29:40,116 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/inf-callback/L1-EscrowVault.bpl
[2020-05-31 02:29:40,116 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/inf-callback/L1-EscrowVault.bpl'
[2020-05-31 02:29:40,166 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 02:29:40,168 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 02:29:40,168 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 02:29:40,168 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 02:29:40,169 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 02:29:40,183 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,184 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,206 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,206 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,218 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,225 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,229 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,235 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 02:29:40,236 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 02:29:40,236 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 02:29:40,238 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 02:29:40,240 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/1) ...
[2020-05-31 02:29:40,250 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: []((finished(EscrowVault.enableRefunds)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(EscrowVault.deposit(payee), 2, payee == user))))))
[2020-05-31 02:29:40,255 INFO  L979   opiaSpecLangObserver]: Successfully lexed: []((finished(EscrowVault.enableRefunds)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(EscrowVault.deposit(payee), 2, payee == user))))))
[2020-05-31 02:29:40,261 INFO  L981   opiaSpecLangObserver]: Successfully parsed: []((finished(EscrowVault.enableRefunds)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(EscrowVault.deposit(payee), 2, payee == user))))))
[2020-05-31 02:29:40,263 INFO  L599   opiaSpecLangObserver]: Parsed investor_s256==user to BinaryExpression[COMPEQ,IdentifierExpression[investor_s256,<IMPLEMENTATION_INPARAM,deposit_EscrowVault>],IdentifierExpression[user,GLOBAL]]
[2020-05-31 02:29:40,266 INFO  L599   opiaSpecLangObserver]: Parsed ( to==user && amount==fsum_deposit_EscrowVault_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[user,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_deposit_EscrowVault_2_0,GLOBAL]]]
[2020-05-31 02:29:40,266 INFO  L968   opiaSpecLangObserver]: Compiling: []((finished(EscrowVault.enableRefunds)) ==> (<>(finished(send(from, to, amt), (to == user && amt == fsum(EscrowVault.deposit(payee), 2, payee == user))))))
[2020-05-31 02:29:40,266 INFO  L970   opiaSpecLangObserver]: Compiled to ( []( AP(success_enableRefunds_EscrowVault0) ==> ( <>AP(success_send__success0) ) ) )
[2020-05-31 02:29:40,266 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(EscrowVault.deposit(payee), (payee == user)))) && (<>(finished(EscrowVault.refund(payee), (payee == user))))
[2020-05-31 02:29:40,267 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(EscrowVault.deposit(payee), (payee == user)))) && (<>(finished(EscrowVault.refund(payee), (payee == user))))
[2020-05-31 02:29:40,267 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(EscrowVault.deposit(payee), (payee == user)))) && (<>(finished(EscrowVault.refund(payee), (payee == user))))
[2020-05-31 02:29:40,269 INFO  L599   opiaSpecLangObserver]: Parsed investor_s256==user to BinaryExpression[COMPEQ,IdentifierExpression[investor_s256,<IMPLEMENTATION_INPARAM,deposit_EscrowVault>],IdentifierExpression[user,GLOBAL]]
[2020-05-31 02:29:40,270 INFO  L599   opiaSpecLangObserver]: Parsed investor_s431==user to BinaryExpression[COMPEQ,IdentifierExpression[investor_s431,<IMPLEMENTATION_INPARAM,refund_EscrowVault>],IdentifierExpression[user,GLOBAL]]
[2020-05-31 02:29:40,271 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(EscrowVault.deposit(payee), (payee == user)))) && (<>(finished(EscrowVault.refund(payee), (payee == user))))
[2020-05-31 02:29:40,271 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_deposit_EscrowVault0) ) && ( <>AP(success_refund_EscrowVault0) ) )
Executed UtopiaSpecLang
[2020-05-31 02:29:40,278 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:29:40 PropertyContainer
[2020-05-31 02:29:40,278 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 02:29:40,278 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 02:29:40,278 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 02:29:40,278 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 02:29:40,279 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/2) ...
[2020-05-31 02:29:40,279 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:29:40,280 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 02:29:40,289 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:29:40" (2/2) ...
[2020-05-31 02:29:40,289 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 02:29:40,290 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 02:29:40,290 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 02:29:40,290 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 02:29:40,290 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/2) ...
[2020-05-31 02:29:40,332 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 02:29:40,332 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 02:29:40,332 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-31 02:29:40,332 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-31 02:29:40,332 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__success
[2020-05-31 02:29:40,333 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__success
[2020-05-31 02:29:40,333 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-31 02:29:40,333 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-31 02:29:40,333 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-31 02:29:40,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-31 02:29:40,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault
[2020-05-31 02:29:40,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault
[2020-05-31 02:29:40,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault
[2020-05-31 02:29:40,334 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault
[2020-05-31 02:29:40,334 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault
[2020-05-31 02:29:40,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault
[2020-05-31 02:29:40,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault
[2020-05-31 02:29:40,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault
[2020-05-31 02:29:40,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault
[2020-05-31 02:29:40,335 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault
[2020-05-31 02:29:40,335 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EscrowVault
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-31 02:29:40,336 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__success
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__success
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__fail
[2020-05-31 02:29:40,337 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__success
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__fail
[2020-05-31 02:29:40,338 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 02:29:40,339 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 02:29:40,339 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 02:29:40,339 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__success
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__fail
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__success
[2020-05-31 02:29:40,339 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__fail
[2020-05-31 02:29:40,340 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__success
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__fail
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__success
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__fail
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__success
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__fail
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__success
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__fail
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__success
[2020-05-31 02:29:40,341 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 02:29:40,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EscrowVault
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 02:29:40,343 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 02:29:40,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 02:29:40,391 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:29:40,392 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:29:40,479 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:29:40,491 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:29:40,686 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 02:29:40,714 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 02:29:40,714 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-05-31 02:29:40,716 INFO  L202        PluginConnector]: Adding new model L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:29:40 BoogieIcfgContainer
[2020-05-31 02:29:40,716 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:29:40" (2/2) ...
[2020-05-31 02:29:40,716 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 02:29:40,717 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5a783a62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:29:40, skipping insertion in model container
[2020-05-31 02:29:40,717 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 02:29:40,718 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 02:29:40,718 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 02:29:40,719 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 02:29:40,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/3) ...
[2020-05-31 02:29:40,719 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@fbc4198 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:29:40, skipping insertion in model container
[2020-05-31 02:29:40,719 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:29:40" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( [] ( c -> ( <>d ) ) ) )  (exit command is null, workingDir is null)
[2020-05-31 02:29:40,768 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:29:40 NWAContainer
[2020-05-31 02:29:40,768 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 02:29:40,768 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 02:29:40,768 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 02:29:40,769 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 02:29:40,769 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:29:40" (3/4) ...
[2020-05-31 02:29:40,770 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3caf1fa0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:29:40, skipping insertion in model container
[2020-05-31 02:29:40,770 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:29:40" (4/4) ...
[2020-05-31 02:29:40,773 INFO  L104   BuchiProductObserver]: Initial property automaton 8 locations, 27 edges
[2020-05-31 02:29:40,776 INFO  L110   BuchiProductObserver]: Initial RCFG 1028 locations, 1335 edges
[2020-05-31 02:29:40,776 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 02:29:40,786 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 02:29:44,915 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 02:29:44,929 INFO  L110   BuchiProductObserver]: BuchiProgram size 9647 locations, 38576 edges
[2020-05-31 02:29:44,930 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:29:44 BoogieIcfgContainer
[2020-05-31 02:29:44,930 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 02:29:44,930 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 02:29:44,930 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 02:29:44,932 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 02:29:44,932 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:29:44" (1/1) ...
[2020-05-31 02:29:45,096 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,096 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,097 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,103 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,104 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call this := FreshRefGenerator__success();
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,105 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,106 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,111 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[2020-05-31 02:29:45,141 INFO  L313           BlockEncoder]: Initial Icfg 9647 locations, 38576 edges
[2020-05-31 02:29:45,141 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 02:29:45,142 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 02:29:45,142 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 02:29:45,142 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 02:29:45,168 INFO  L70    emoveInfeasibleEdges]: Removed 413 edges and 36 locations because of local infeasibility
[2020-05-31 02:29:45,185 INFO  L70        RemoveSinkStates]: Removed 18 edges and 4 locations by removing sink states
[2020-05-31 02:29:45,215 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 02:29:45,224 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 02:29:45,233 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 02:29:45,234 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 02:29:45,242 INFO  L313           BlockEncoder]: Encoded RCFG 9527 locations, 37894 edges
[2020-05-31 02:29:45,242 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:29:45 BasicIcfg
[2020-05-31 02:29:45,243 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 02:29:45,243 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 02:29:45,243 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 02:29:45,245 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 02:29:45,245 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,245 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 02:29:40" (1/6) ...
[2020-05-31 02:29:45,246 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@200944ce and model type L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:29:45, skipping insertion in model container
[2020-05-31 02:29:45,246 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,246 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 02:29:40" (2/6) ...
[2020-05-31 02:29:45,247 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@200944ce and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:29:45, skipping insertion in model container
[2020-05-31 02:29:45,247 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 02:29:40" (3/6) ...
[2020-05-31 02:29:45,247 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@200944ce and model type L1-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:29:45, skipping insertion in model container
[2020-05-31 02:29:45,247 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 02:29:40" (4/6) ...
[2020-05-31 02:29:45,247 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@200944ce and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 02:29:45, skipping insertion in model container
[2020-05-31 02:29:45,247 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,247 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 02:29:44" (5/6) ...
[2020-05-31 02:29:45,248 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@200944ce and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 02:29:45, skipping insertion in model container
[2020-05-31 02:29:45,248 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 02:29:45,248 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 02:29:45" (6/6) ...
[2020-05-31 02:29:45,249 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L1-EscrowVault.bpl_BEv2
[2020-05-31 02:29:45,279 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 02:29:45,279 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 02:29:45,279 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 02:29:45,279 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 02:29:45,279 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 02:29:45,279 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 02:29:45,279 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 02:29:45,279 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 02:29:45,279 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 02:29:45,362 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9527 states.
[2020-05-31 02:29:45,500 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:45,500 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:45,500 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:45,511 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:45,511 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:45,511 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 02:29:45,511 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9527 states.
[2020-05-31 02:29:45,583 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:45,583 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:45,583 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:45,585 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:45,585 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND TRUE   revert
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:45,601 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:45,601 INFO  L82        PathProgramCache]: Analyzing trace with hash -246054032, now seen corresponding path program 1 times
[2020-05-31 02:29:45,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:45,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:45,668 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:29:45,669 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:45,670 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:29:45,673 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:46,188 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:29:46,189 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:29:46,191 INFO  L87              Difference]: Start difference. First operand 9527 states. Second operand 3 states.
[2020-05-31 02:29:47,071 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:47,071 INFO  L93              Difference]: Finished difference Result 8163 states and 20409 transitions.
[2020-05-31 02:29:47,072 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:29:47,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8163 states and 20409 transitions.
[2020-05-31 02:29:47,146 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:47,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8163 states to 8163 states and 20409 transitions.
[2020-05-31 02:29:47,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 8
[2020-05-31 02:29:47,253 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 100
[2020-05-31 02:29:47,253 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8163 states and 20409 transitions.
[2020-05-31 02:29:47,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:47,288 INFO  L728         BuchiCegarLoop]: Abstraction has 8163 states and 20409 transitions.
[2020-05-31 02:29:47,313 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8163 states and 20409 transitions.
[2020-05-31 02:29:47,453 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8163 to 8163.
[2020-05-31 02:29:47,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8163 states.
[2020-05-31 02:29:47,483 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8163 states to 8163 states and 20409 transitions.
[2020-05-31 02:29:47,484 INFO  L751         BuchiCegarLoop]: Abstraction has 8163 states and 20409 transitions.
[2020-05-31 02:29:47,484 INFO  L631         BuchiCegarLoop]: Abstraction has 8163 states and 20409 transitions.
[2020-05-31 02:29:47,484 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 02:29:47,484 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8163 states and 20409 transitions.
[2020-05-31 02:29:47,506 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:47,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:47,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:47,509 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:47,509 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND TRUE   choice == 2
[L2540]              gas := gas - 21000;
[L2541]  COND TRUE   gas >= 0
[L2543]              assume msgvalue_MSG == 0;
[L2544]  CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]               havoc __exception;
[L494]               revert := false;
[L495]   COND FALSE  !(__exception)
[L515]   CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]  COND TRUE   revert
[L515]   RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_enableRefunds_EscrowVault0 := true;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2544]  RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND TRUE   choice == 2
[L2540]              gas := gas - 21000;
[L2541]  COND TRUE   gas >= 0
[L2543]              assume msgvalue_MSG == 0;
[L2544]  CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]               havoc __exception;
[L494]               revert := false;
[L495]   COND FALSE  !(__exception)
[L515]   CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]  COND TRUE   revert
[L515]   RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_enableRefunds_EscrowVault0 := true;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2544]  RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:47,513 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:47,514 INFO  L82        PathProgramCache]: Analyzing trace with hash -1340905868, now seen corresponding path program 1 times
[2020-05-31 02:29:47,514 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:47,524 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:47,537 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:29:47,537 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:47,537 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:29:47,539 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:47,539 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:29:47,539 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:29:47,539 INFO  L87              Difference]: Start difference. First operand 8163 states and 20409 transitions. cyclomatic complexity: 12270 Second operand 3 states.
[2020-05-31 02:29:47,939 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:47,939 INFO  L93              Difference]: Finished difference Result 7889 states and 13611 transitions.
[2020-05-31 02:29:47,939 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:29:47,940 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7889 states and 13611 transitions.
[2020-05-31 02:29:47,966 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:48,009 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7889 states to 7889 states and 13611 transitions.
[2020-05-31 02:29:48,009 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 100
[2020-05-31 02:29:48,010 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 100
[2020-05-31 02:29:48,010 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7889 states and 13611 transitions.
[2020-05-31 02:29:48,021 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:48,021 INFO  L728         BuchiCegarLoop]: Abstraction has 7889 states and 13611 transitions.
[2020-05-31 02:29:48,032 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7889 states and 13611 transitions.
[2020-05-31 02:29:48,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7889 to 7889.
[2020-05-31 02:29:48,130 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7889 states.
[2020-05-31 02:29:48,152 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7889 states to 7889 states and 13611 transitions.
[2020-05-31 02:29:48,152 INFO  L751         BuchiCegarLoop]: Abstraction has 7889 states and 13611 transitions.
[2020-05-31 02:29:48,152 INFO  L631         BuchiCegarLoop]: Abstraction has 7889 states and 13611 transitions.
[2020-05-31 02:29:48,152 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 02:29:48,152 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7889 states and 13611 transitions.
[2020-05-31 02:29:48,171 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:48,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:48,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:48,174 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:48,174 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND TRUE   choice == 1
[L2549]              gas := gas - 21000;
[L2550]  COND TRUE   gas >= 0
[L2552]              assume msgvalue_MSG == 0;
[L2553]  CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]               havoc __exception;
[L532]               revert := false;
[L533]   COND FALSE  !(__exception)
[L553]   CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]              gas := gas - 367;
[L1785]  COND TRUE   !(state_EscrowVault[this] == 1)
[L1787]              revert := true;
[L553]   RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume investor_s431 == user;
[L7]                 success_refund_EscrowVault0 := true;
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2553]  RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]  RET         call CorralChoice_EscrowVault(this);
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND TRUE   choice == 2
[L2540]              gas := gas - 21000;
[L2541]  COND TRUE   gas >= 0
[L2543]              assume msgvalue_MSG == 0;
[L2544]  CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]               havoc __exception;
[L494]               revert := false;
[L495]   COND FALSE  !(__exception)
[L515]   CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]  COND TRUE   revert
[L515]   RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_enableRefunds_EscrowVault0 := true;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2544]  RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND TRUE   choice == 1
[L2549]              gas := gas - 21000;
[L2550]  COND TRUE   gas >= 0
[L2552]              assume msgvalue_MSG == 0;
[L2553]  CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]               havoc __exception;
[L532]               revert := false;
[L533]   COND FALSE  !(__exception)
[L553]   CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]              gas := gas - 367;
[L1785]  COND TRUE   !(state_EscrowVault[this] == 1)
[L1787]              revert := true;
[L553]   RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume investor_s431 == user;
[L7]                 success_refund_EscrowVault0 := true;
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2553]  RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:48,179 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:48,179 INFO  L82        PathProgramCache]: Analyzing trace with hash -2146588399, now seen corresponding path program 1 times
[2020-05-31 02:29:48,180 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:48,188 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:48,247 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:29:48,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:48,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:29:48,248 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:48,248 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:29:48,248 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:29:48,249 INFO  L87              Difference]: Start difference. First operand 7889 states and 13611 transitions. cyclomatic complexity: 5746 Second operand 3 states.
[2020-05-31 02:29:48,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:48,524 INFO  L93              Difference]: Finished difference Result 7752 states and 9334 transitions.
[2020-05-31 02:29:48,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:29:48,525 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7752 states and 9334 transitions.
[2020-05-31 02:29:48,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:48,575 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7752 states to 7752 states and 9334 transitions.
[2020-05-31 02:29:48,575 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 100
[2020-05-31 02:29:48,575 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 100
[2020-05-31 02:29:48,575 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7752 states and 9334 transitions.
[2020-05-31 02:29:48,583 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:48,583 INFO  L728         BuchiCegarLoop]: Abstraction has 7752 states and 9334 transitions.
[2020-05-31 02:29:48,596 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7752 states and 9334 transitions.
[2020-05-31 02:29:48,665 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7752 to 7752.
[2020-05-31 02:29:48,665 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7752 states.
[2020-05-31 02:29:48,673 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7752 states to 7752 states and 9334 transitions.
[2020-05-31 02:29:48,674 INFO  L751         BuchiCegarLoop]: Abstraction has 7752 states and 9334 transitions.
[2020-05-31 02:29:48,674 INFO  L631         BuchiCegarLoop]: Abstraction has 7752 states and 9334 transitions.
[2020-05-31 02:29:48,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 02:29:48,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7752 states and 9334 transitions.
[2020-05-31 02:29:48,682 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 02:29:48,682 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:48,682 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:48,684 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:48,684 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]     CALL        call main();
[L7]                 havoc user;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND TRUE   revert
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND TRUE   choice == 1
[L2549]              gas := gas - 21000;
[L2550]  COND TRUE   gas >= 0
[L2552]              assume msgvalue_MSG == 0;
[L2553]  CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]               havoc __exception;
[L532]               revert := false;
[L533]   COND FALSE  !(__exception)
[L553]   CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]              gas := gas - 367;
[L1785]  COND TRUE   !(state_EscrowVault[this] == 1)
[L1787]              revert := true;
[L553]   RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume investor_s431 == user;
[L7]                 success_refund_EscrowVault0 := true;
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2553]  RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]  RET         call CorralChoice_EscrowVault(this);
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND TRUE   choice == 2
[L2540]              gas := gas - 21000;
[L2541]  COND TRUE   gas >= 0
[L2543]              assume msgvalue_MSG == 0;
[L2544]  CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]               havoc __exception;
[L494]               revert := false;
[L495]   COND FALSE  !(__exception)
[L515]   CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]  COND TRUE   revert
[L515]   RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_enableRefunds_EscrowVault0 := true;
[L7]                 success_enableRefunds_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2544]  RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND TRUE   choice == 7
[L2495]              gas := gas - 21000;
[L2496]  COND TRUE   gas >= 0
[L2498]              assume msgvalue_MSG >= 0;
[L2499]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND TRUE   revert
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume investor_s256 == user;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 assume !(investor_s256 == user);
[L2499]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND TRUE   choice == 1
[L2549]              gas := gas - 21000;
[L2550]  COND TRUE   gas >= 0
[L2552]              assume msgvalue_MSG == 0;
[L2553]  CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]               havoc __exception;
[L532]               revert := false;
[L533]   COND FALSE  !(__exception)
[L553]   CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]              gas := gas - 367;
[L1785]  COND TRUE   !(state_EscrowVault[this] == 1)
[L1787]              revert := true;
[L553]   RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume investor_s431 == user;
[L7]                 success_refund_EscrowVault0 := true;
[L7]                 success_refund_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2553]  RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:48,686 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:48,686 INFO  L82        PathProgramCache]: Analyzing trace with hash -1225403325, now seen corresponding path program 1 times
[2020-05-31 02:29:48,687 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:48,694 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:48,723 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:29:48,723 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:48,723 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:29:48,724 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:48,724 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:29:48,724 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:29:48,724 INFO  L87              Difference]: Start difference. First operand 7752 states and 9334 transitions. cyclomatic complexity: 1606 Second operand 3 states.
[2020-05-31 02:29:48,892 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:48,892 INFO  L93              Difference]: Finished difference Result 10116 states and 12168 transitions.
[2020-05-31 02:29:48,892 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:29:48,892 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10116 states and 12168 transitions.
[2020-05-31 02:29:48,918 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:48,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10116 states to 9300 states and 11022 transitions.
[2020-05-31 02:29:48,959 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 147
[2020-05-31 02:29:48,960 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 147
[2020-05-31 02:29:48,960 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9300 states and 11022 transitions.
[2020-05-31 02:29:48,970 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:48,970 INFO  L728         BuchiCegarLoop]: Abstraction has 9300 states and 11022 transitions.
[2020-05-31 02:29:48,982 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9300 states and 11022 transitions.
[2020-05-31 02:29:49,077 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9300 to 8723.
[2020-05-31 02:29:49,077 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8723 states.
[2020-05-31 02:29:49,088 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8723 states to 8723 states and 10284 transitions.
[2020-05-31 02:29:49,089 INFO  L751         BuchiCegarLoop]: Abstraction has 8723 states and 10284 transitions.
[2020-05-31 02:29:49,089 INFO  L631         BuchiCegarLoop]: Abstraction has 8723 states and 10284 transitions.
[2020-05-31 02:29:49,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 02:29:49,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8723 states and 10284 transitions.
[2020-05-31 02:29:49,099 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:49,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:49,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:49,101 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:49,101 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND TRUE   __exception
[L269]                     __tmp__Balance := Balance;
[L270]                     __tmp__DType := DType;
[L271]                     __tmp__Alloc := Alloc;
[L272]                     __tmp__balance_ADDR := balance_ADDR;
[L273]                     __tmp__M_Ref_int_deposited0 := M_Ref_int_deposited0;
[L274]                     __tmp__sum_deposited0 := sum_deposited0;
[L275]                     __tmp__Length := Length;
[L276]                     __tmp__now := now;
[L277]                     __tmp__owner_Ownable := owner_Ownable;
[L278]                     __tmp__deposited_EscrowVault := deposited_EscrowVault;
[L279]                     __tmp__beneficiary_EscrowVault := beneficiary_EscrowVault;
[L280]                     __tmp__superOwner_EscrowVault := superOwner_EscrowVault;
[L281]                     __tmp__state_EscrowVault := state_EscrowVault;
[L282]         CALL        call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1268]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1101]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1081]                    assume msgsender_MSG != null;
[L1082]                    __tmp__Balance[this] := 0;
[L1083]                    __tmp__owner_Ownable[this] := null;
[L1084]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1101]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1102]        COND FALSE  !(revert)
[L1268]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1269]        COND FALSE  !(revert)
[L1274]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1180]                    assume msgsender_MSG != null;
[L1181]                    __tmp__Balance[this] := 0;
[L1182]        CALL        call __var_4 := FreshRefGenerator__fail();
[L823]                     havoc newRef;
[L824]                     assume __tmp__Alloc[newRef] == false;
[L825]                     __tmp__Alloc[newRef] := true;
[L826]                     assume newRef != null;
[L1182]        RET         call __var_4 := FreshRefGenerator__fail();
[L1183]        COND FALSE  !(revert)
[L1188]                    __tmp__deposited_EscrowVault[this] := __var_4;
[L1189]                    __tmp__M_Ref_int_deposited0[__tmp__deposited_EscrowVault[this]] := zeroRefIntArr();
[L1190]                    __tmp__sum_deposited0[__tmp__deposited_EscrowVault[this]] := 0;
[L1191]                    __tmp__beneficiary_EscrowVault[this] := null;
[L1192]                    __tmp__superOwner_EscrowVault[this] := null;
[L1193]                    __var_2 := null;
[L1194]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1200]                    __var_3 := null;
[L1201]        COND FALSE  !(!(_superOwner_s224 != null))
[L1207]                    __tmp__beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1208]                    __tmp__superOwner_EscrowVault[this] := _superOwner_s224;
[L1209]                    __tmp__state_EscrowVault[this] := 0;
[L1274]        RET         call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1275]        COND FALSE  !(revert)
[L282]         RET         call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L283]                     assume revert || gas < 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND FALSE  !(gas > 2300)
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND FALSE  !(gas > 2300)
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:49,106 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:49,107 INFO  L82        PathProgramCache]: Analyzing trace with hash -372535715, now seen corresponding path program 1 times
[2020-05-31 02:29:49,107 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:49,118 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:49,169 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 02:29:49,169 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:49,170 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:29:49,170 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:49,170 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:29:49,170 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:29:49,170 INFO  L87              Difference]: Start difference. First operand 8723 states and 10284 transitions. cyclomatic complexity: 1585 Second operand 4 states.
[2020-05-31 02:29:49,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:49,725 INFO  L93              Difference]: Finished difference Result 11172 states and 13281 transitions.
[2020-05-31 02:29:49,725 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:29:49,725 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11172 states and 13281 transitions.
[2020-05-31 02:29:49,746 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 170
[2020-05-31 02:29:49,784 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11172 states to 10999 states and 13044 transitions.
[2020-05-31 02:29:49,784 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 218
[2020-05-31 02:29:49,784 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 218
[2020-05-31 02:29:49,784 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10999 states and 13044 transitions.
[2020-05-31 02:29:49,793 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:49,793 INFO  L728         BuchiCegarLoop]: Abstraction has 10999 states and 13044 transitions.
[2020-05-31 02:29:49,801 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10999 states and 13044 transitions.
[2020-05-31 02:29:49,886 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10999 to 8501.
[2020-05-31 02:29:49,886 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8501 states.
[2020-05-31 02:29:49,899 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8501 states to 8501 states and 9844 transitions.
[2020-05-31 02:29:49,899 INFO  L751         BuchiCegarLoop]: Abstraction has 8501 states and 9844 transitions.
[2020-05-31 02:29:49,900 INFO  L631         BuchiCegarLoop]: Abstraction has 8501 states and 9844 transitions.
[2020-05-31 02:29:49,900 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 02:29:49,900 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8501 states and 9844 transitions.
[2020-05-31 02:29:49,910 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:49,910 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:49,911 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:49,913 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:49,913 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND FALSE  !(gas > 2300)
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:49,917 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:49,917 INFO  L82        PathProgramCache]: Analyzing trace with hash 1080809502, now seen corresponding path program 1 times
[2020-05-31 02:29:49,917 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:49,937 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:50,019 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:29:50,019 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:50,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:29:50,020 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:50,020 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:29:50,020 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:29:50,021 INFO  L87              Difference]: Start difference. First operand 8501 states and 9844 transitions. cyclomatic complexity: 1367 Second operand 3 states.
[2020-05-31 02:29:50,165 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:50,166 INFO  L93              Difference]: Finished difference Result 8533 states and 9876 transitions.
[2020-05-31 02:29:50,166 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:29:50,166 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8533 states and 9876 transitions.
[2020-05-31 02:29:50,184 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:50,212 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8533 states to 8533 states and 9876 transitions.
[2020-05-31 02:29:50,212 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 118
[2020-05-31 02:29:50,213 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 118
[2020-05-31 02:29:50,213 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8533 states and 9876 transitions.
[2020-05-31 02:29:50,218 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:50,218 INFO  L728         BuchiCegarLoop]: Abstraction has 8533 states and 9876 transitions.
[2020-05-31 02:29:50,226 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8533 states and 9876 transitions.
[2020-05-31 02:29:50,278 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8533 to 8525.
[2020-05-31 02:29:50,279 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8525 states.
[2020-05-31 02:29:50,288 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8525 states to 8525 states and 9868 transitions.
[2020-05-31 02:29:50,288 INFO  L751         BuchiCegarLoop]: Abstraction has 8525 states and 9868 transitions.
[2020-05-31 02:29:50,288 INFO  L631         BuchiCegarLoop]: Abstraction has 8525 states and 9868 transitions.
[2020-05-31 02:29:50,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 02:29:50,288 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8525 states and 9868 transitions.
[2020-05-31 02:29:50,296 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:50,296 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:50,296 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:50,298 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:50,298 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND FALSE  !(gas > 2300)
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:50,301 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:50,301 INFO  L82        PathProgramCache]: Analyzing trace with hash 2019989002, now seen corresponding path program 1 times
[2020-05-31 02:29:50,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:50,316 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:50,360 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:29:50,360 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:50,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 02:29:50,360 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:50,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:29:50,361 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:29:50,361 INFO  L87              Difference]: Start difference. First operand 8525 states and 9868 transitions. cyclomatic complexity: 1367 Second operand 4 states.
[2020-05-31 02:29:50,424 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:50,424 INFO  L93              Difference]: Finished difference Result 8605 states and 9960 transitions.
[2020-05-31 02:29:50,425 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:29:50,425 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8605 states and 9960 transitions.
[2020-05-31 02:29:50,441 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:50,463 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8605 states to 8589 states and 9944 transitions.
[2020-05-31 02:29:50,464 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 123
[2020-05-31 02:29:50,464 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 123
[2020-05-31 02:29:50,464 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8589 states and 9944 transitions.
[2020-05-31 02:29:50,469 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:50,470 INFO  L728         BuchiCegarLoop]: Abstraction has 8589 states and 9944 transitions.
[2020-05-31 02:29:50,478 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8589 states and 9944 transitions.
[2020-05-31 02:29:50,534 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8589 to 8589.
[2020-05-31 02:29:50,534 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8589 states.
[2020-05-31 02:29:50,545 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8589 states to 8589 states and 9944 transitions.
[2020-05-31 02:29:50,545 INFO  L751         BuchiCegarLoop]: Abstraction has 8589 states and 9944 transitions.
[2020-05-31 02:29:50,545 INFO  L631         BuchiCegarLoop]: Abstraction has 8589 states and 9944 transitions.
[2020-05-31 02:29:50,545 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 02:29:50,545 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8589 states and 9944 transitions.
[2020-05-31 02:29:50,553 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 02:29:50,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:50,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:50,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:50,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND FALSE  !(gas > 2300)
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:50,558 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:50,559 INFO  L82        PathProgramCache]: Analyzing trace with hash -1728567028, now seen corresponding path program 1 times
[2020-05-31 02:29:50,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:50,574 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:50,662 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:29:50,662 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:50,662 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:29:50,662 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:50,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:29:50,663 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:29:50,663 INFO  L87              Difference]: Start difference. First operand 8589 states and 9944 transitions. cyclomatic complexity: 1379 Second operand 10 states.
[2020-05-31 02:29:54,518 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:54,518 INFO  L93              Difference]: Finished difference Result 12207 states and 14647 transitions.
[2020-05-31 02:29:54,518 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 02:29:54,518 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12207 states and 14647 transitions.
[2020-05-31 02:29:54,543 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 227
[2020-05-31 02:29:54,581 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12207 states to 12207 states and 14647 transitions.
[2020-05-31 02:29:54,581 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 243
[2020-05-31 02:29:54,581 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 243
[2020-05-31 02:29:54,582 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12207 states and 14647 transitions.
[2020-05-31 02:29:54,589 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:54,590 INFO  L728         BuchiCegarLoop]: Abstraction has 12207 states and 14647 transitions.
[2020-05-31 02:29:54,598 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12207 states and 14647 transitions.
[2020-05-31 02:29:54,681 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12207 to 8406.
[2020-05-31 02:29:54,681 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8406 states.
[2020-05-31 02:29:54,691 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8406 states to 8406 states and 9586 transitions.
[2020-05-31 02:29:54,691 INFO  L751         BuchiCegarLoop]: Abstraction has 8406 states and 9586 transitions.
[2020-05-31 02:29:54,691 INFO  L631         BuchiCegarLoop]: Abstraction has 8406 states and 9586 transitions.
[2020-05-31 02:29:54,691 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 02:29:54,692 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8406 states and 9586 transitions.
[2020-05-31 02:29:54,700 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 163
[2020-05-31 02:29:54,700 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:54,700 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:54,701 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:54,702 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:54,706 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:54,706 INFO  L82        PathProgramCache]: Analyzing trace with hash 2023202864, now seen corresponding path program 1 times
[2020-05-31 02:29:54,706 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:54,723 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:29:54,811 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:29:54,811 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:29:54,811 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:29:54,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:29:54,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:29:54,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:29:54,812 INFO  L87              Difference]: Start difference. First operand 8406 states and 9586 transitions. cyclomatic complexity: 1204 Second operand 10 states.
[2020-05-31 02:29:59,804 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:29:59,804 INFO  L93              Difference]: Finished difference Result 10431 states and 12121 transitions.
[2020-05-31 02:29:59,804 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:29:59,804 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10431 states and 12121 transitions.
[2020-05-31 02:29:59,822 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 235
[2020-05-31 02:29:59,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10431 states to 10375 states and 12057 transitions.
[2020-05-31 02:29:59,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 186
[2020-05-31 02:29:59,845 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 186
[2020-05-31 02:29:59,845 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10375 states and 12057 transitions.
[2020-05-31 02:29:59,852 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:29:59,852 INFO  L728         BuchiCegarLoop]: Abstraction has 10375 states and 12057 transitions.
[2020-05-31 02:29:59,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10375 states and 12057 transitions.
[2020-05-31 02:29:59,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10375 to 10205.
[2020-05-31 02:29:59,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10205 states.
[2020-05-31 02:29:59,922 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10205 states to 10205 states and 11857 transitions.
[2020-05-31 02:29:59,922 INFO  L751         BuchiCegarLoop]: Abstraction has 10205 states and 11857 transitions.
[2020-05-31 02:29:59,922 INFO  L631         BuchiCegarLoop]: Abstraction has 10205 states and 11857 transitions.
[2020-05-31 02:29:59,922 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 02:29:59,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10205 states and 11857 transitions.
[2020-05-31 02:29:59,932 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 223
[2020-05-31 02:29:59,932 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:29:59,932 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:29:59,933 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:29:59,933 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND FALSE  !(gas < 21000)
[L2064]        COND TRUE   iterate && gas >= 21000
[L2066]                    havoc msgsender_MSG;
[L2067]                    havoc msgvalue_MSG;
[L2068]                    havoc choice;
[L2069]                    havoc newOwner_s150;
[L2070]                    havoc _superOwner_s224;
[L2071]                    havoc _beneficiary_s224;
[L2072]                    havoc investor_s256;
[L2073]                    havoc _amount_s320;
[L2074]                    havoc investor_s431;
[L2075]                    havoc iterate;
[L2076]        COND TRUE   DType[from] == EscrowVault
[L2078]        COND FALSE  !(choice == 8)
[L2091]        COND FALSE  !(choice == 7)
[L2104]        COND TRUE   choice == 6
[L2106]                    gas := gas - 21000;
[L2107]        COND TRUE   gas >= 0
[L2109]                    assume msgvalue_MSG == 0;
[L2110]        CALL        call setGoalReached_EscrowVault__success(from, to, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L2110]        RET         call setGoalReached_EscrowVault__success(from, to, msgvalue_MSG);
[L2111]        COND FALSE  !(revert)
[L2064]        COND FALSE  !(iterate && gas >= 21000)
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:29:59,937 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:29:59,938 INFO  L82        PathProgramCache]: Analyzing trace with hash 7731693, now seen corresponding path program 1 times
[2020-05-31 02:29:59,938 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:29:59,953 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:30:00,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 7 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:30:00,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:30:00,020 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 02:30:00,021 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:30:00,021 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 02:30:00,021 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 02:30:00,021 INFO  L87              Difference]: Start difference. First operand 10205 states and 11857 transitions. cyclomatic complexity: 1676 Second operand 6 states.
[2020-05-31 02:30:01,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:30:01,967 INFO  L93              Difference]: Finished difference Result 8237 states and 9193 transitions.
[2020-05-31 02:30:01,967 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 02:30:01,967 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8237 states and 9193 transitions.
[2020-05-31 02:30:01,987 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 02:30:02,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8237 states to 8077 states and 9017 transitions.
[2020-05-31 02:30:02,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 182
[2020-05-31 02:30:02,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 680
[2020-05-31 02:30:02,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8077 states and 9017 transitions.
[2020-05-31 02:30:02,010 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:30:02,010 INFO  L728         BuchiCegarLoop]: Abstraction has 8077 states and 9017 transitions.
[2020-05-31 02:30:02,015 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8077 states and 9017 transitions.
[2020-05-31 02:30:02,049 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8077 to 7437.
[2020-05-31 02:30:02,049 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7437 states.
[2020-05-31 02:30:02,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7437 states to 7437 states and 8245 transitions.
[2020-05-31 02:30:02,057 INFO  L751         BuchiCegarLoop]: Abstraction has 7437 states and 8245 transitions.
[2020-05-31 02:30:02,057 INFO  L631         BuchiCegarLoop]: Abstraction has 7437 states and 8245 transitions.
[2020-05-31 02:30:02,057 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 02:30:02,057 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7437 states and 8245 transitions.
[2020-05-31 02:30:02,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:30:02,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:30:02,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:30:02,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:30:02,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:30:02,068 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:30:02,068 INFO  L82        PathProgramCache]: Analyzing trace with hash 996870945, now seen corresponding path program 1 times
[2020-05-31 02:30:02,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:30:02,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:30:02,137 INFO  L134       CoverageAnalysis]: Checked inductivity of 37 backedges. 2 proven. 25 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-31 02:30:02,137 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:30:02,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:30:02,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:30:02,137 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:30:02,137 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:30:02,138 INFO  L87              Difference]: Start difference. First operand 7437 states and 8245 transitions. cyclomatic complexity: 816 Second operand 11 states.
[2020-05-31 02:30:05,009 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:30:05,009 INFO  L93              Difference]: Finished difference Result 7453 states and 8253 transitions.
[2020-05-31 02:30:05,009 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:30:05,009 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7453 states and 8253 transitions.
[2020-05-31 02:30:05,027 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:30:05,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7453 states to 7453 states and 8253 transitions.
[2020-05-31 02:30:05,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-05-31 02:30:05,043 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-05-31 02:30:05,043 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7453 states and 8253 transitions.
[2020-05-31 02:30:05,047 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:30:05,047 INFO  L728         BuchiCegarLoop]: Abstraction has 7453 states and 8253 transitions.
[2020-05-31 02:30:05,052 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7453 states and 8253 transitions.
[2020-05-31 02:30:05,082 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7453 to 7429.
[2020-05-31 02:30:05,083 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7429 states.
[2020-05-31 02:30:05,090 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7429 states to 7429 states and 8229 transitions.
[2020-05-31 02:30:05,090 INFO  L751         BuchiCegarLoop]: Abstraction has 7429 states and 8229 transitions.
[2020-05-31 02:30:05,090 INFO  L631         BuchiCegarLoop]: Abstraction has 7429 states and 8229 transitions.
[2020-05-31 02:30:05,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 02:30:05,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7429 states and 8229 transitions.
[2020-05-31 02:30:05,098 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 02:30:05,098 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:30:05,098 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:30:05,099 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:30:05,099 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:30:05,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:30:05,101 INFO  L82        PathProgramCache]: Analyzing trace with hash -1308939450, now seen corresponding path program 1 times
[2020-05-31 02:30:05,102 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:30:05,117 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:30:05,509 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:30:05,509 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:30:05,509 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [43] imperfect sequences [] total 43
[2020-05-31 02:30:05,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:30:05,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-05-31 02:30:05,510 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=1754, Unknown=0, NotChecked=0, Total=1892
[2020-05-31 02:30:05,510 INFO  L87              Difference]: Start difference. First operand 7429 states and 8229 transitions. cyclomatic complexity: 808 Second operand 44 states.
[2020-05-31 02:30:41,516 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:30:41,516 INFO  L93              Difference]: Finished difference Result 16501 states and 19119 transitions.
[2020-05-31 02:30:41,516 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 77 states. 
[2020-05-31 02:30:41,516 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16501 states and 19119 transitions.
[2020-05-31 02:30:41,556 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 18
[2020-05-31 02:30:41,599 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16501 states to 16501 states and 19119 transitions.
[2020-05-31 02:30:41,600 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1436
[2020-05-31 02:30:41,600 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1436
[2020-05-31 02:30:41,601 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 16501 states and 19119 transitions.
[2020-05-31 02:30:41,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:30:41,611 INFO  L728         BuchiCegarLoop]: Abstraction has 16501 states and 19119 transitions.
[2020-05-31 02:30:41,617 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 16501 states and 19119 transitions.
[2020-05-31 02:30:41,737 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 16501 to 16048.
[2020-05-31 02:30:41,737 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 16048 states.
[2020-05-31 02:30:41,757 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 16048 states to 16048 states and 18243 transitions.
[2020-05-31 02:30:41,757 INFO  L751         BuchiCegarLoop]: Abstraction has 16048 states and 18243 transitions.
[2020-05-31 02:30:41,758 INFO  L631         BuchiCegarLoop]: Abstraction has 16048 states and 18243 transitions.
[2020-05-31 02:30:41,758 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 02:30:41,758 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 16048 states and 18243 transitions.
[2020-05-31 02:30:41,775 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:30:41,775 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:30:41,775 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:30:41,776 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:30:41,776 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND TRUE   choice == 5
[L2513]              gas := gas - 21000;
[L2514]  COND TRUE   gas >= 0
[L2516]              assume msgvalue_MSG == 0;
[L2517]  CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND FALSE  !(gas > 2300)
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2517]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:30:41,779 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:30:41,779 INFO  L82        PathProgramCache]: Analyzing trace with hash -1572128047, now seen corresponding path program 1 times
[2020-05-31 02:30:41,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:30:41,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:30:42,022 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:30:42,022 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:30:42,022 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [39] imperfect sequences [] total 39
[2020-05-31 02:30:42,022 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:30:42,023 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-05-31 02:30:42,023 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=143, Invalid=1417, Unknown=0, NotChecked=0, Total=1560
[2020-05-31 02:30:42,023 INFO  L87              Difference]: Start difference. First operand 16048 states and 18243 transitions. cyclomatic complexity: 2227 Second operand 40 states.
[2020-05-31 02:31:00,183 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:00,184 INFO  L93              Difference]: Finished difference Result 20886 states and 24254 transitions.
[2020-05-31 02:31:00,184 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 64 states. 
[2020-05-31 02:31:00,184 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20886 states and 24254 transitions.
[2020-05-31 02:31:00,232 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:00,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20886 states to 20886 states and 24254 transitions.
[2020-05-31 02:31:00,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1437
[2020-05-31 02:31:00,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1437
[2020-05-31 02:31:00,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20886 states and 24254 transitions.
[2020-05-31 02:31:00,306 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:00,306 INFO  L728         BuchiCegarLoop]: Abstraction has 20886 states and 24254 transitions.
[2020-05-31 02:31:00,315 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20886 states and 24254 transitions.
[2020-05-31 02:31:00,459 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20886 to 20377.
[2020-05-31 02:31:00,459 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20377 states.
[2020-05-31 02:31:00,490 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20377 states to 20377 states and 23457 transitions.
[2020-05-31 02:31:00,490 INFO  L751         BuchiCegarLoop]: Abstraction has 20377 states and 23457 transitions.
[2020-05-31 02:31:00,490 INFO  L631         BuchiCegarLoop]: Abstraction has 20377 states and 23457 transitions.
[2020-05-31 02:31:00,490 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 02:31:00,490 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20377 states and 23457 transitions.
[2020-05-31 02:31:00,512 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:00,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:00,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:00,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:00,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND TRUE   choice == 5
[L2513]              gas := gas - 21000;
[L2514]  COND TRUE   gas >= 0
[L2516]              assume msgvalue_MSG == 0;
[L2517]  CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND FALSE  !(gas > 2300)
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2517]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:00,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:00,517 INFO  L82        PathProgramCache]: Analyzing trace with hash 891830561, now seen corresponding path program 1 times
[2020-05-31 02:31:00,518 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:00,527 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:00,576 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-31 02:31:00,576 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:31:00,576 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 02:31:00,576 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:00,577 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 02:31:00,577 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-31 02:31:00,577 INFO  L87              Difference]: Start difference. First operand 20377 states and 23457 transitions. cyclomatic complexity: 3134 Second operand 10 states.
[2020-05-31 02:31:02,543 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:02,544 INFO  L93              Difference]: Finished difference Result 20523 states and 23810 transitions.
[2020-05-31 02:31:02,544 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:31:02,544 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20523 states and 23810 transitions.
[2020-05-31 02:31:02,583 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:02,637 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20523 states to 20523 states and 23810 transitions.
[2020-05-31 02:31:02,637 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1368
[2020-05-31 02:31:02,638 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1368
[2020-05-31 02:31:02,638 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20523 states and 23810 transitions.
[2020-05-31 02:31:02,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:02,651 INFO  L728         BuchiCegarLoop]: Abstraction has 20523 states and 23810 transitions.
[2020-05-31 02:31:02,660 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20523 states and 23810 transitions.
[2020-05-31 02:31:02,792 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20523 to 20426.
[2020-05-31 02:31:02,793 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20426 states.
[2020-05-31 02:31:02,826 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20426 states to 20426 states and 23658 transitions.
[2020-05-31 02:31:02,826 INFO  L751         BuchiCegarLoop]: Abstraction has 20426 states and 23658 transitions.
[2020-05-31 02:31:02,826 INFO  L631         BuchiCegarLoop]: Abstraction has 20426 states and 23658 transitions.
[2020-05-31 02:31:02,826 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 02:31:02,826 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20426 states and 23658 transitions.
[2020-05-31 02:31:02,849 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:02,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:02,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:02,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:02,851 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:02,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:02,856 INFO  L82        PathProgramCache]: Analyzing trace with hash 292341995, now seen corresponding path program 1 times
[2020-05-31 02:31:02,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:02,871 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:02,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 1 proven. 23 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-31 02:31:02,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:02,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:31:02,958 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:02,958 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:31:02,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:31:02,958 INFO  L87              Difference]: Start difference. First operand 20426 states and 23658 transitions. cyclomatic complexity: 3295 Second operand 11 states.
[2020-05-31 02:31:06,607 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:06,607 INFO  L93              Difference]: Finished difference Result 20693 states and 24114 transitions.
[2020-05-31 02:31:06,607 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 02:31:06,608 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20693 states and 24114 transitions.
[2020-05-31 02:31:06,661 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:06,722 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20693 states to 20693 states and 24114 transitions.
[2020-05-31 02:31:06,722 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1376
[2020-05-31 02:31:06,723 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1376
[2020-05-31 02:31:06,723 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20693 states and 24114 transitions.
[2020-05-31 02:31:06,736 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:06,736 INFO  L728         BuchiCegarLoop]: Abstraction has 20693 states and 24114 transitions.
[2020-05-31 02:31:06,746 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20693 states and 24114 transitions.
[2020-05-31 02:31:06,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20693 to 20465.
[2020-05-31 02:31:06,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20465 states.
[2020-05-31 02:31:06,921 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20465 states to 20465 states and 23744 transitions.
[2020-05-31 02:31:06,921 INFO  L751         BuchiCegarLoop]: Abstraction has 20465 states and 23744 transitions.
[2020-05-31 02:31:06,921 INFO  L631         BuchiCegarLoop]: Abstraction has 20465 states and 23744 transitions.
[2020-05-31 02:31:06,921 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 02:31:06,921 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20465 states and 23744 transitions.
[2020-05-31 02:31:06,943 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:06,944 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:06,944 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:06,945 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:06,945 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:06,948 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:06,949 INFO  L82        PathProgramCache]: Analyzing trace with hash 2091205793, now seen corresponding path program 1 times
[2020-05-31 02:31:06,949 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:06,978 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:07,278 INFO  L134       CoverageAnalysis]: Checked inductivity of 88 backedges. 12 proven. 17 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-05-31 02:31:07,278 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:07,278 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 02:31:07,279 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:07,279 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 02:31:07,279 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=87, Invalid=969, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 02:31:07,279 INFO  L87              Difference]: Start difference. First operand 20465 states and 23744 transitions. cyclomatic complexity: 3342 Second operand 33 states.
[2020-05-31 02:31:22,205 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:22,205 INFO  L93              Difference]: Finished difference Result 20701 states and 24320 transitions.
[2020-05-31 02:31:22,205 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 48 states. 
[2020-05-31 02:31:22,205 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 20701 states and 24320 transitions.
[2020-05-31 02:31:22,251 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:22,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 20701 states to 20701 states and 24320 transitions.
[2020-05-31 02:31:22,310 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1372
[2020-05-31 02:31:22,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1372
[2020-05-31 02:31:22,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 20701 states and 24320 transitions.
[2020-05-31 02:31:22,324 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:22,324 INFO  L728         BuchiCegarLoop]: Abstraction has 20701 states and 24320 transitions.
[2020-05-31 02:31:22,333 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 20701 states and 24320 transitions.
[2020-05-31 02:31:22,472 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 20701 to 20459.
[2020-05-31 02:31:22,473 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20459 states.
[2020-05-31 02:31:22,504 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20459 states to 20459 states and 23700 transitions.
[2020-05-31 02:31:22,504 INFO  L751         BuchiCegarLoop]: Abstraction has 20459 states and 23700 transitions.
[2020-05-31 02:31:22,504 INFO  L631         BuchiCegarLoop]: Abstraction has 20459 states and 23700 transitions.
[2020-05-31 02:31:22,504 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 02:31:22,505 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20459 states and 23700 transitions.
[2020-05-31 02:31:22,527 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:22,527 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:22,527 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:22,528 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:22,528 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:22,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:22,532 INFO  L82        PathProgramCache]: Analyzing trace with hash 1477514626, now seen corresponding path program 1 times
[2020-05-31 02:31:22,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:22,558 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:22,861 INFO  L134       CoverageAnalysis]: Checked inductivity of 108 backedges. 4 proven. 51 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-05-31 02:31:22,861 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:22,861 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-05-31 02:31:22,862 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:22,862 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-05-31 02:31:22,863 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=1708, Unknown=0, NotChecked=0, Total=1892
[2020-05-31 02:31:22,863 INFO  L87              Difference]: Start difference. First operand 20459 states and 23700 transitions. cyclomatic complexity: 3303 Second operand 44 states.
[2020-05-31 02:31:42,741 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:42,741 INFO  L93              Difference]: Finished difference Result 21113 states and 25234 transitions.
[2020-05-31 02:31:42,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 70 states. 
[2020-05-31 02:31:42,741 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 21113 states and 25234 transitions.
[2020-05-31 02:31:42,792 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:42,856 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 21113 states to 21113 states and 25234 transitions.
[2020-05-31 02:31:42,856 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1423
[2020-05-31 02:31:42,857 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1423
[2020-05-31 02:31:42,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 21113 states and 25234 transitions.
[2020-05-31 02:31:42,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:42,871 INFO  L728         BuchiCegarLoop]: Abstraction has 21113 states and 25234 transitions.
[2020-05-31 02:31:42,880 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 21113 states and 25234 transitions.
[2020-05-31 02:31:43,025 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 21113 to 20647.
[2020-05-31 02:31:43,025 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 20647 states.
[2020-05-31 02:31:43,061 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 20647 states to 20647 states and 24554 transitions.
[2020-05-31 02:31:43,061 INFO  L751         BuchiCegarLoop]: Abstraction has 20647 states and 24554 transitions.
[2020-05-31 02:31:43,061 INFO  L631         BuchiCegarLoop]: Abstraction has 20647 states and 24554 transitions.
[2020-05-31 02:31:43,061 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 02:31:43,061 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 20647 states and 24554 transitions.
[2020-05-31 02:31:43,083 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 02:31:43,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:43,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:43,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:43,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:43,088 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:43,088 INFO  L82        PathProgramCache]: Analyzing trace with hash 238609136, now seen corresponding path program 1 times
[2020-05-31 02:31:43,089 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:43,100 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:43,160 INFO  L134       CoverageAnalysis]: Checked inductivity of 34 backedges. 24 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-31 02:31:43,160 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:31:43,160 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:31:43,160 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:43,161 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:31:43,161 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:31:43,161 INFO  L87              Difference]: Start difference. First operand 20647 states and 24554 transitions. cyclomatic complexity: 3999 Second operand 11 states.
[2020-05-31 02:31:47,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:47,378 INFO  L93              Difference]: Finished difference Result 23117 states and 28337 transitions.
[2020-05-31 02:31:47,378 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:31:47,378 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 23117 states and 28337 transitions.
[2020-05-31 02:31:47,451 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 22
[2020-05-31 02:31:47,542 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 23117 states to 22977 states and 28177 transitions.
[2020-05-31 02:31:47,542 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1433
[2020-05-31 02:31:47,543 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1433
[2020-05-31 02:31:47,543 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 22977 states and 28177 transitions.
[2020-05-31 02:31:47,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:47,562 INFO  L728         BuchiCegarLoop]: Abstraction has 22977 states and 28177 transitions.
[2020-05-31 02:31:47,572 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 22977 states and 28177 transitions.
[2020-05-31 02:31:47,755 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 22977 to 22884.
[2020-05-31 02:31:47,755 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 22884 states.
[2020-05-31 02:31:47,799 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 22884 states to 22884 states and 27986 transitions.
[2020-05-31 02:31:47,799 INFO  L751         BuchiCegarLoop]: Abstraction has 22884 states and 27986 transitions.
[2020-05-31 02:31:47,799 INFO  L631         BuchiCegarLoop]: Abstraction has 22884 states and 27986 transitions.
[2020-05-31 02:31:47,799 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 02:31:47,799 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 22884 states and 27986 transitions.
[2020-05-31 02:31:47,824 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 22
[2020-05-31 02:31:47,824 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:47,825 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:47,826 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:47,826 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:47,830 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:47,830 INFO  L82        PathProgramCache]: Analyzing trace with hash -2038940798, now seen corresponding path program 1 times
[2020-05-31 02:31:47,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:47,847 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:47,999 INFO  L134       CoverageAnalysis]: Checked inductivity of 81 backedges. 2 proven. 29 refuted. 0 times theorem prover too weak. 50 trivial. 0 not checked.
[2020-05-31 02:31:47,999 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:47,999 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:31:48,000 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:48,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:31:48,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:31:48,000 INFO  L87              Difference]: Start difference. First operand 22884 states and 27986 transitions. cyclomatic complexity: 5194 Second operand 11 states.
[2020-05-31 02:31:50,797 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:50,797 INFO  L93              Difference]: Finished difference Result 26655 states and 33631 transitions.
[2020-05-31 02:31:50,798 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:31:50,798 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 26655 states and 33631 transitions.
[2020-05-31 02:31:50,887 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:50,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 26655 states to 25238 states and 31320 transitions.
[2020-05-31 02:31:50,999 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1576
[2020-05-31 02:31:51,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1576
[2020-05-31 02:31:51,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25238 states and 31320 transitions.
[2020-05-31 02:31:51,022 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:51,022 INFO  L728         BuchiCegarLoop]: Abstraction has 25238 states and 31320 transitions.
[2020-05-31 02:31:51,035 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25238 states and 31320 transitions.
[2020-05-31 02:31:51,235 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25238 to 25117.
[2020-05-31 02:31:51,235 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25117 states.
[2020-05-31 02:31:51,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25117 states to 25117 states and 31105 transitions.
[2020-05-31 02:31:51,289 INFO  L751         BuchiCegarLoop]: Abstraction has 25117 states and 31105 transitions.
[2020-05-31 02:31:51,289 INFO  L631         BuchiCegarLoop]: Abstraction has 25117 states and 31105 transitions.
[2020-05-31 02:31:51,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 02:31:51,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25117 states and 31105 transitions.
[2020-05-31 02:31:51,320 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:51,320 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:51,320 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:51,321 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:51,321 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND TRUE   choice == 5
[L2513]              gas := gas - 21000;
[L2514]  COND TRUE   gas >= 0
[L2516]              assume msgvalue_MSG == 0;
[L2517]  CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND FALSE  !(gas > 2300)
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2517]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:51,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:51,325 INFO  L82        PathProgramCache]: Analyzing trace with hash 272728603, now seen corresponding path program 1 times
[2020-05-31 02:31:51,326 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:51,342 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:51,416 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 2 proven. 29 refuted. 0 times theorem prover too weak. 39 trivial. 0 not checked.
[2020-05-31 02:31:51,416 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:51,416 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 02:31:51,417 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:51,417 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:31:51,417 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:31:51,417 INFO  L87              Difference]: Start difference. First operand 25117 states and 31105 transitions. cyclomatic complexity: 6092 Second operand 11 states.
[2020-05-31 02:31:57,481 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:57,481 INFO  L93              Difference]: Finished difference Result 25117 states and 31067 transitions.
[2020-05-31 02:31:57,481 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 02:31:57,482 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25117 states and 31067 transitions.
[2020-05-31 02:31:57,562 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:57,666 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25117 states to 25117 states and 31067 transitions.
[2020-05-31 02:31:57,666 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1568
[2020-05-31 02:31:57,667 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1568
[2020-05-31 02:31:57,667 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25117 states and 31067 transitions.
[2020-05-31 02:31:57,767 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:57,767 INFO  L728         BuchiCegarLoop]: Abstraction has 25117 states and 31067 transitions.
[2020-05-31 02:31:57,776 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25117 states and 31067 transitions.
[2020-05-31 02:31:57,946 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25117 to 25117.
[2020-05-31 02:31:57,947 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25117 states.
[2020-05-31 02:31:57,997 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25117 states to 25117 states and 31067 transitions.
[2020-05-31 02:31:57,997 INFO  L751         BuchiCegarLoop]: Abstraction has 25117 states and 31067 transitions.
[2020-05-31 02:31:57,997 INFO  L631         BuchiCegarLoop]: Abstraction has 25117 states and 31067 transitions.
[2020-05-31 02:31:57,998 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 02:31:57,998 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25117 states and 31067 transitions.
[2020-05-31 02:31:58,027 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:58,027 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:58,028 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:58,029 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:58,029 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:58,038 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:58,038 INFO  L82        PathProgramCache]: Analyzing trace with hash 252470236, now seen corresponding path program 1 times
[2020-05-31 02:31:58,039 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:58,054 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:58,119 INFO  L134       CoverageAnalysis]: Checked inductivity of 122 backedges. 8 proven. 7 refuted. 0 times theorem prover too weak. 107 trivial. 0 not checked.
[2020-05-31 02:31:58,119 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:31:58,120 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-05-31 02:31:58,120 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:58,120 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 02:31:58,120 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 02:31:58,120 INFO  L87              Difference]: Start difference. First operand 25117 states and 31067 transitions. cyclomatic complexity: 6054 Second operand 4 states.
[2020-05-31 02:31:58,228 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:31:58,229 INFO  L93              Difference]: Finished difference Result 25157 states and 31087 transitions.
[2020-05-31 02:31:58,229 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 02:31:58,229 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 25157 states and 31087 transitions.
[2020-05-31 02:31:58,303 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:58,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 25157 states to 25117 states and 31047 transitions.
[2020-05-31 02:31:58,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1568
[2020-05-31 02:31:58,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1568
[2020-05-31 02:31:58,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 25117 states and 31047 transitions.
[2020-05-31 02:31:58,427 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:31:58,427 INFO  L728         BuchiCegarLoop]: Abstraction has 25117 states and 31047 transitions.
[2020-05-31 02:31:58,439 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 25117 states and 31047 transitions.
[2020-05-31 02:31:58,629 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 25117 to 25117.
[2020-05-31 02:31:58,629 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 25117 states.
[2020-05-31 02:31:58,682 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 25117 states to 25117 states and 31047 transitions.
[2020-05-31 02:31:58,682 INFO  L751         BuchiCegarLoop]: Abstraction has 25117 states and 31047 transitions.
[2020-05-31 02:31:58,682 INFO  L631         BuchiCegarLoop]: Abstraction has 25117 states and 31047 transitions.
[2020-05-31 02:31:58,682 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-05-31 02:31:58,682 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 25117 states and 31047 transitions.
[2020-05-31 02:31:58,712 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 32
[2020-05-31 02:31:58,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:31:58,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:31:58,714 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:31:58,714 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume to == user && amount == fsum_deposit_EscrowVault_2_0;
[L7]                       success_send__success0 := true;
[L7]                       success_send__success0 := false;
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND TRUE   choice == 5
[L2513]              gas := gas - 21000;
[L2514]  COND TRUE   gas >= 0
[L2516]              assume msgvalue_MSG == 0;
[L2517]  CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND FALSE  !(gas > 2300)
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2517]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:31:58,718 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:31:58,718 INFO  L82        PathProgramCache]: Analyzing trace with hash 864642134, now seen corresponding path program 1 times
[2020-05-31 02:31:58,718 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:31:58,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:31:58,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 98 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-05-31 02:31:58,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:31:58,826 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-31 02:31:58,827 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:31:58,827 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 02:31:58,827 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 02:31:58,827 INFO  L87              Difference]: Start difference. First operand 25117 states and 31047 transitions. cyclomatic complexity: 6034 Second operand 11 states.
[2020-05-31 02:32:01,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:32:01,149 INFO  L93              Difference]: Finished difference Result 14141 states and 16552 transitions.
[2020-05-31 02:32:01,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-31 02:32:01,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14141 states and 16552 transitions.
[2020-05-31 02:32:01,187 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:01,232 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14141 states to 13086 states and 15432 transitions.
[2020-05-31 02:32:01,232 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1077
[2020-05-31 02:32:01,233 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1101
[2020-05-31 02:32:01,233 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13086 states and 15432 transitions.
[2020-05-31 02:32:01,242 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:32:01,242 INFO  L728         BuchiCegarLoop]: Abstraction has 13086 states and 15432 transitions.
[2020-05-31 02:32:01,248 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13086 states and 15432 transitions.
[2020-05-31 02:32:01,309 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13086 to 10470.
[2020-05-31 02:32:01,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10470 states.
[2020-05-31 02:32:01,322 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10470 states to 10470 states and 12114 transitions.
[2020-05-31 02:32:01,322 INFO  L751         BuchiCegarLoop]: Abstraction has 10470 states and 12114 transitions.
[2020-05-31 02:32:01,322 INFO  L631         BuchiCegarLoop]: Abstraction has 10470 states and 12114 transitions.
[2020-05-31 02:32:01,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-05-31 02:32:01,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10470 states and 12114 transitions.
[2020-05-31 02:32:01,332 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:01,332 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:32:01,332 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:32:01,333 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:32:01,333 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:32:01,336 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:32:01,336 INFO  L82        PathProgramCache]: Analyzing trace with hash 130562615, now seen corresponding path program 1 times
[2020-05-31 02:32:01,336 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:32:01,345 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:32:01,388 INFO  L134       CoverageAnalysis]: Checked inductivity of 88 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 87 trivial. 0 not checked.
[2020-05-31 02:32:01,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 02:32:01,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 02:32:01,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:32:01,388 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 02:32:01,389 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 02:32:01,389 INFO  L87              Difference]: Start difference. First operand 10470 states and 12114 transitions. cyclomatic complexity: 1682 Second operand 3 states.
[2020-05-31 02:32:01,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:32:01,444 INFO  L93              Difference]: Finished difference Result 10470 states and 12106 transitions.
[2020-05-31 02:32:01,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 02:32:01,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10470 states and 12106 transitions.
[2020-05-31 02:32:01,465 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:01,494 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10470 states to 10470 states and 12106 transitions.
[2020-05-31 02:32:01,494 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1036
[2020-05-31 02:32:01,495 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1036
[2020-05-31 02:32:01,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10470 states and 12106 transitions.
[2020-05-31 02:32:01,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:32:01,501 INFO  L728         BuchiCegarLoop]: Abstraction has 10470 states and 12106 transitions.
[2020-05-31 02:32:01,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10470 states and 12106 transitions.
[2020-05-31 02:32:01,552 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10470 to 10470.
[2020-05-31 02:32:01,553 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10470 states.
[2020-05-31 02:32:01,567 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10470 states to 10470 states and 12106 transitions.
[2020-05-31 02:32:01,568 INFO  L751         BuchiCegarLoop]: Abstraction has 10470 states and 12106 transitions.
[2020-05-31 02:32:01,568 INFO  L631         BuchiCegarLoop]: Abstraction has 10470 states and 12106 transitions.
[2020-05-31 02:32:01,568 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-05-31 02:32:01,568 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10470 states and 12106 transitions.
[2020-05-31 02:32:01,577 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:01,577 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:32:01,578 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:32:01,578 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:32:01,579 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:32:01,581 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:32:01,581 INFO  L82        PathProgramCache]: Analyzing trace with hash -117749582, now seen corresponding path program 1 times
[2020-05-31 02:32:01,582 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:32:01,597 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:32:01,887 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 46 proven. 27 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-05-31 02:32:01,887 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:32:01,887 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-05-31 02:32:01,888 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:32:01,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-05-31 02:32:01,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=101, Invalid=1459, Unknown=0, NotChecked=0, Total=1560
[2020-05-31 02:32:01,888 INFO  L87              Difference]: Start difference. First operand 10470 states and 12106 transitions. cyclomatic complexity: 1674 Second operand 40 states.
[2020-05-31 02:32:26,584 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:32:26,584 INFO  L93              Difference]: Finished difference Result 15054 states and 17887 transitions.
[2020-05-31 02:32:26,584 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 55 states. 
[2020-05-31 02:32:26,585 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15054 states and 17887 transitions.
[2020-05-31 02:32:26,623 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:26,672 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15054 states to 15054 states and 17885 transitions.
[2020-05-31 02:32:26,672 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1086
[2020-05-31 02:32:26,673 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1086
[2020-05-31 02:32:26,673 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15054 states and 17885 transitions.
[2020-05-31 02:32:26,684 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:32:26,684 INFO  L728         BuchiCegarLoop]: Abstraction has 15054 states and 17885 transitions.
[2020-05-31 02:32:26,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15054 states and 17885 transitions.
[2020-05-31 02:32:26,770 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15054 to 14816.
[2020-05-31 02:32:26,770 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14816 states.
[2020-05-31 02:32:26,794 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14816 states to 14816 states and 17555 transitions.
[2020-05-31 02:32:26,794 INFO  L751         BuchiCegarLoop]: Abstraction has 14816 states and 17555 transitions.
[2020-05-31 02:32:26,794 INFO  L631         BuchiCegarLoop]: Abstraction has 14816 states and 17555 transitions.
[2020-05-31 02:32:26,794 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-05-31 02:32:26,794 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14816 states and 17555 transitions.
[2020-05-31 02:32:26,808 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:26,809 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:32:26,809 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:32:26,810 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:32:26,810 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:32:26,813 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:32:26,813 INFO  L82        PathProgramCache]: Analyzing trace with hash 767844439, now seen corresponding path program 1 times
[2020-05-31 02:32:26,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:32:26,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:32:27,319 INFO  L134       CoverageAnalysis]: Checked inductivity of 144 backedges. 11 proven. 78 refuted. 0 times theorem prover too weak. 55 trivial. 0 not checked.
[2020-05-31 02:32:27,319 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:32:27,319 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [45] total 45
[2020-05-31 02:32:27,320 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:32:27,320 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 46 interpolants.
[2020-05-31 02:32:27,320 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=171, Invalid=1899, Unknown=0, NotChecked=0, Total=2070
[2020-05-31 02:32:27,320 INFO  L87              Difference]: Start difference. First operand 14816 states and 17555 transitions. cyclomatic complexity: 2788 Second operand 46 states.
[2020-05-31 02:32:43,423 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:32:43,423 INFO  L93              Difference]: Finished difference Result 15728 states and 19205 transitions.
[2020-05-31 02:32:43,423 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-31 02:32:43,423 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 15728 states and 19205 transitions.
[2020-05-31 02:32:43,469 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:43,526 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 15728 states to 15724 states and 19191 transitions.
[2020-05-31 02:32:43,526 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-05-31 02:32:43,526 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-05-31 02:32:43,526 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 15724 states and 19191 transitions.
[2020-05-31 02:32:43,539 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:32:43,539 INFO  L728         BuchiCegarLoop]: Abstraction has 15724 states and 19191 transitions.
[2020-05-31 02:32:43,545 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 15724 states and 19191 transitions.
[2020-05-31 02:32:43,642 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 15724 to 14960.
[2020-05-31 02:32:43,642 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 14960 states.
[2020-05-31 02:32:43,669 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 14960 states to 14960 states and 17894 transitions.
[2020-05-31 02:32:43,669 INFO  L751         BuchiCegarLoop]: Abstraction has 14960 states and 17894 transitions.
[2020-05-31 02:32:43,669 INFO  L631         BuchiCegarLoop]: Abstraction has 14960 states and 17894 transitions.
[2020-05-31 02:32:43,669 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-05-31 02:32:43,669 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 14960 states and 17894 transitions.
[2020-05-31 02:32:43,686 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:32:43,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:32:43,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:32:43,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:32:43,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:32:43,691 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:32:43,691 INFO  L82        PathProgramCache]: Analyzing trace with hash 1509474789, now seen corresponding path program 1 times
[2020-05-31 02:32:43,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:32:43,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:32:44,312 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 36 proven. 37 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-05-31 02:32:44,312 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:32:44,312 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-05-31 02:32:44,312 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:32:44,313 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-05-31 02:32:44,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=2401, Unknown=0, NotChecked=0, Total=2550
[2020-05-31 02:32:44,314 INFO  L87              Difference]: Start difference. First operand 14960 states and 17894 transitions. cyclomatic complexity: 2993 Second operand 51 states.
[2020-05-31 02:33:11,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:33:11,829 INFO  L93              Difference]: Finished difference Result 18109 states and 22720 transitions.
[2020-05-31 02:33:11,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-31 02:33:11,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18109 states and 22720 transitions.
[2020-05-31 02:33:11,871 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:11,932 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18109 states to 18109 states and 22716 transitions.
[2020-05-31 02:33:11,932 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1140
[2020-05-31 02:33:11,933 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1140
[2020-05-31 02:33:11,933 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18109 states and 22716 transitions.
[2020-05-31 02:33:11,947 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:33:11,947 INFO  L728         BuchiCegarLoop]: Abstraction has 18109 states and 22716 transitions.
[2020-05-31 02:33:11,953 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18109 states and 22716 transitions.
[2020-05-31 02:33:12,060 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18109 to 17752.
[2020-05-31 02:33:12,060 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17752 states.
[2020-05-31 02:33:12,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17752 states to 17752 states and 22225 transitions.
[2020-05-31 02:33:12,096 INFO  L751         BuchiCegarLoop]: Abstraction has 17752 states and 22225 transitions.
[2020-05-31 02:33:12,096 INFO  L631         BuchiCegarLoop]: Abstraction has 17752 states and 22225 transitions.
[2020-05-31 02:33:12,097 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-05-31 02:33:12,097 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17752 states and 22225 transitions.
[2020-05-31 02:33:12,116 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:12,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:33:12,117 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:33:12,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:33:12,118 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:33:12,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:33:12,121 INFO  L82        PathProgramCache]: Analyzing trace with hash -947733835, now seen corresponding path program 1 times
[2020-05-31 02:33:12,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:33:12,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:33:12,492 INFO  L134       CoverageAnalysis]: Checked inductivity of 261 backedges. 19 proven. 69 refuted. 0 times theorem prover too weak. 173 trivial. 0 not checked.
[2020-05-31 02:33:12,492 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:33:12,492 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-05-31 02:33:12,492 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:33:12,492 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-05-31 02:33:12,493 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=104, Invalid=1536, Unknown=0, NotChecked=0, Total=1640
[2020-05-31 02:33:12,493 INFO  L87              Difference]: Start difference. First operand 17752 states and 22225 transitions. cyclomatic complexity: 4569 Second operand 41 states.
[2020-05-31 02:33:27,319 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:33:27,319 INFO  L93              Difference]: Finished difference Result 17813 states and 22284 transitions.
[2020-05-31 02:33:27,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-05-31 02:33:27,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 17813 states and 22284 transitions.
[2020-05-31 02:33:27,361 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:27,421 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 17813 states to 17813 states and 22274 transitions.
[2020-05-31 02:33:27,421 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1076
[2020-05-31 02:33:27,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1076
[2020-05-31 02:33:27,422 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 17813 states and 22274 transitions.
[2020-05-31 02:33:27,436 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:33:27,436 INFO  L728         BuchiCegarLoop]: Abstraction has 17813 states and 22274 transitions.
[2020-05-31 02:33:27,442 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 17813 states and 22274 transitions.
[2020-05-31 02:33:27,545 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 17813 to 17571.
[2020-05-31 02:33:27,545 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17571 states.
[2020-05-31 02:33:27,578 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17571 states to 17571 states and 21614 transitions.
[2020-05-31 02:33:27,578 INFO  L751         BuchiCegarLoop]: Abstraction has 17571 states and 21614 transitions.
[2020-05-31 02:33:27,578 INFO  L631         BuchiCegarLoop]: Abstraction has 17571 states and 21614 transitions.
[2020-05-31 02:33:27,578 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-05-31 02:33:27,578 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17571 states and 21614 transitions.
[2020-05-31 02:33:27,597 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:27,597 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:33:27,597 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:33:27,598 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:33:27,599 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:33:27,601 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:33:27,601 INFO  L82        PathProgramCache]: Analyzing trace with hash -1631972556, now seen corresponding path program 1 times
[2020-05-31 02:33:27,602 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:33:27,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:33:27,929 INFO  L134       CoverageAnalysis]: Checked inductivity of 180 backedges. 50 proven. 67 refuted. 0 times theorem prover too weak. 63 trivial. 0 not checked.
[2020-05-31 02:33:27,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:33:27,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-05-31 02:33:27,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:33:27,930 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-05-31 02:33:27,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=131, Invalid=1761, Unknown=0, NotChecked=0, Total=1892
[2020-05-31 02:33:27,931 INFO  L87              Difference]: Start difference. First operand 17571 states and 21614 transitions. cyclomatic complexity: 4115 Second operand 44 states.
[2020-05-31 02:33:54,734 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:33:54,734 INFO  L93              Difference]: Finished difference Result 18017 states and 22213 transitions.
[2020-05-31 02:33:54,734 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 63 states. 
[2020-05-31 02:33:54,734 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18017 states and 22213 transitions.
[2020-05-31 02:33:54,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:54,843 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18017 states to 18017 states and 22211 transitions.
[2020-05-31 02:33:54,843 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1086
[2020-05-31 02:33:54,844 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1086
[2020-05-31 02:33:54,844 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18017 states and 22211 transitions.
[2020-05-31 02:33:54,858 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:33:54,858 INFO  L728         BuchiCegarLoop]: Abstraction has 18017 states and 22211 transitions.
[2020-05-31 02:33:54,864 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18017 states and 22211 transitions.
[2020-05-31 02:33:54,966 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18017 to 17779.
[2020-05-31 02:33:54,966 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17779 states.
[2020-05-31 02:33:54,999 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17779 states to 17779 states and 21877 transitions.
[2020-05-31 02:33:54,999 INFO  L751         BuchiCegarLoop]: Abstraction has 17779 states and 21877 transitions.
[2020-05-31 02:33:54,999 INFO  L631         BuchiCegarLoop]: Abstraction has 17779 states and 21877 transitions.
[2020-05-31 02:33:54,999 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-05-31 02:33:54,999 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17779 states and 21877 transitions.
[2020-05-31 02:33:55,019 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:33:55,019 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:33:55,019 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:33:55,020 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:33:55,020 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:33:55,023 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:33:55,023 INFO  L82        PathProgramCache]: Analyzing trace with hash -494410858, now seen corresponding path program 1 times
[2020-05-31 02:33:55,024 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:33:55,061 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:33:55,651 INFO  L134       CoverageAnalysis]: Checked inductivity of 191 backedges. 40 proven. 76 refuted. 0 times theorem prover too weak. 75 trivial. 0 not checked.
[2020-05-31 02:33:55,651 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:33:55,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-05-31 02:33:55,652 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:33:55,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-05-31 02:33:55,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=187, Invalid=2465, Unknown=0, NotChecked=0, Total=2652
[2020-05-31 02:33:55,652 INFO  L87              Difference]: Start difference. First operand 17779 states and 21877 transitions. cyclomatic complexity: 4172 Second operand 52 states.
[2020-05-31 02:34:18,789 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:34:18,789 INFO  L93              Difference]: Finished difference Result 18224 states and 22682 transitions.
[2020-05-31 02:34:18,789 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-05-31 02:34:18,790 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18224 states and 22682 transitions.
[2020-05-31 02:34:18,831 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:34:18,892 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18224 states to 18220 states and 22664 transitions.
[2020-05-31 02:34:18,892 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-05-31 02:34:18,893 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-05-31 02:34:18,893 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18220 states and 22664 transitions.
[2020-05-31 02:34:18,907 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:34:18,908 INFO  L728         BuchiCegarLoop]: Abstraction has 18220 states and 22664 transitions.
[2020-05-31 02:34:18,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18220 states and 22664 transitions.
[2020-05-31 02:34:19,021 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18220 to 17735.
[2020-05-31 02:34:19,022 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17735 states.
[2020-05-31 02:34:19,055 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17735 states to 17735 states and 21647 transitions.
[2020-05-31 02:34:19,056 INFO  L751         BuchiCegarLoop]: Abstraction has 17735 states and 21647 transitions.
[2020-05-31 02:34:19,056 INFO  L631         BuchiCegarLoop]: Abstraction has 17735 states and 21647 transitions.
[2020-05-31 02:34:19,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-05-31 02:34:19,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17735 states and 21647 transitions.
[2020-05-31 02:34:19,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:34:19,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:34:19,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:34:19,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:34:19,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:34:19,082 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:34:19,082 INFO  L82        PathProgramCache]: Analyzing trace with hash -2050382612, now seen corresponding path program 1 times
[2020-05-31 02:34:19,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:34:19,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:34:19,526 INFO  L134       CoverageAnalysis]: Checked inductivity of 215 backedges. 53 proven. 70 refuted. 0 times theorem prover too weak. 92 trivial. 0 not checked.
[2020-05-31 02:34:19,526 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:34:19,526 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-31 02:34:19,526 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:34:19,526 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-31 02:34:19,527 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=2013, Unknown=0, NotChecked=0, Total=2162
[2020-05-31 02:34:19,527 INFO  L87              Difference]: Start difference. First operand 17735 states and 21647 transitions. cyclomatic complexity: 3978 Second operand 47 states.
[2020-05-31 02:34:45,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:34:45,382 INFO  L93              Difference]: Finished difference Result 18129 states and 22171 transitions.
[2020-05-31 02:34:45,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 65 states. 
[2020-05-31 02:34:45,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18129 states and 22171 transitions.
[2020-05-31 02:34:45,426 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:34:45,484 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18129 states to 18129 states and 22169 transitions.
[2020-05-31 02:34:45,484 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1086
[2020-05-31 02:34:45,485 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1086
[2020-05-31 02:34:45,485 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18129 states and 22169 transitions.
[2020-05-31 02:34:45,499 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:34:45,499 INFO  L728         BuchiCegarLoop]: Abstraction has 18129 states and 22169 transitions.
[2020-05-31 02:34:45,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18129 states and 22169 transitions.
[2020-05-31 02:34:45,608 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18129 to 17881.
[2020-05-31 02:34:45,608 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17881 states.
[2020-05-31 02:34:45,640 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17881 states to 17881 states and 21841 transitions.
[2020-05-31 02:34:45,640 INFO  L751         BuchiCegarLoop]: Abstraction has 17881 states and 21841 transitions.
[2020-05-31 02:34:45,640 INFO  L631         BuchiCegarLoop]: Abstraction has 17881 states and 21841 transitions.
[2020-05-31 02:34:45,640 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-05-31 02:34:45,640 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17881 states and 21841 transitions.
[2020-05-31 02:34:45,660 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:34:45,660 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:34:45,660 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:34:45,661 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:34:45,661 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:34:45,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:34:45,665 INFO  L82        PathProgramCache]: Analyzing trace with hash -166175381, now seen corresponding path program 1 times
[2020-05-31 02:34:45,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:34:45,711 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:34:46,410 INFO  L134       CoverageAnalysis]: Checked inductivity of 227 backedges. 40 proven. 83 refuted. 0 times theorem prover too weak. 104 trivial. 0 not checked.
[2020-05-31 02:34:46,410 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:34:46,410 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [54] total 54
[2020-05-31 02:34:46,410 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:34:46,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 55 interpolants.
[2020-05-31 02:34:46,411 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=213, Invalid=2757, Unknown=0, NotChecked=0, Total=2970
[2020-05-31 02:34:46,411 INFO  L87              Difference]: Start difference. First operand 17881 states and 21841 transitions. cyclomatic complexity: 4028 Second operand 55 states.
[2020-05-31 02:35:10,796 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:10,796 INFO  L93              Difference]: Finished difference Result 18360 states and 22745 transitions.
[2020-05-31 02:35:10,797 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 60 states. 
[2020-05-31 02:35:10,797 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 18360 states and 22745 transitions.
[2020-05-31 02:35:10,833 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:35:10,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 18360 states to 18356 states and 22731 transitions.
[2020-05-31 02:35:10,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-05-31 02:35:10,884 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-05-31 02:35:10,884 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 18356 states and 22731 transitions.
[2020-05-31 02:35:10,897 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:10,897 INFO  L728         BuchiCegarLoop]: Abstraction has 18356 states and 22731 transitions.
[2020-05-31 02:35:10,902 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 18356 states and 22731 transitions.
[2020-05-31 02:35:10,989 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 18356 to 17853.
[2020-05-31 02:35:10,989 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 17853 states.
[2020-05-31 02:35:11,010 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 17853 states to 17853 states and 21703 transitions.
[2020-05-31 02:35:11,010 INFO  L751         BuchiCegarLoop]: Abstraction has 17853 states and 21703 transitions.
[2020-05-31 02:35:11,010 INFO  L631         BuchiCegarLoop]: Abstraction has 17853 states and 21703 transitions.
[2020-05-31 02:35:11,010 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-05-31 02:35:11,010 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 17853 states and 21703 transitions.
[2020-05-31 02:35:11,025 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-05-31 02:35:11,025 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 02:35:11,025 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 02:35:11,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 02:35:11,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]           CALL        call main();
[L7]                       havoc user;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s256 == user);
[L7]                       revert := revert_hold;
[L7]                       assume !(investor_s256 == user);
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s256 == user;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       assume investor_s256 == user;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_enableRefunds_EscrowVault0 := true;
[L7]                       success_enableRefunds_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(investor_s431 == user);
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND FALSE  !(choice == 2)
[L2547]        COND TRUE   choice == 1
[L2549]                    gas := gas - 21000;
[L2550]        COND TRUE   gas >= 0
[L2552]                    assume msgvalue_MSG == 0;
[L2553]        CALL        call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L531]                     havoc __exception;
[L532]                     revert := false;
[L533]         COND FALSE  !(__exception)
[L553]         CALL        call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L1784]                    gas := gas - 367;
[L1785]        COND FALSE  !(!(state_EscrowVault[this] == 1))
[L1791]                    gas := gas - 307;
[L1792]                    assume depositedValue_s430 >= 0;
[L1793]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1794]                    depositedValue_s430 := M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1795]                    gas := gas - 5104;
[L1796]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] >= 0;
[L1797-L1798]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1799]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431] := 0;
[L1800-L1801]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s431];
[L1802]                    gas := gas - 35787;
[L1803]                    __var_12 := gas;
[L1804]        COND TRUE   gas > 2300
[L1806]                    gas := 2300;
[L1809]                    __var_12 := __var_12 - gas;
[L1810]                    assume depositedValue_s430 >= 0;
[L1811]        CALL        call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == user && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1811]        RET         call __var_13 := send__success(this, investor_s431, depositedValue_s430);
[L1812]        COND FALSE  !(!__var_13)
[L1818]                    gas := __var_12 + gas;
[L1819]                    assert { :EventEmitted "Refunded_EscrowVault" } true;
[L553]         RET         call refund_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L554]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume investor_s431 == user;
[L7]                       success_refund_EscrowVault0 := true;
[L7]                       success_refund_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2553]        RET         call refund_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s431);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND FALSE  !(choice == 3)
[L2538]  COND FALSE  !(choice == 2)
[L2547]  COND FALSE  !(choice == 1)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 02:35:11,030 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 02:35:11,030 INFO  L82        PathProgramCache]: Analyzing trace with hash 1060591718, now seen corresponding path program 1 times
[2020-05-31 02:35:11,031 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 02:35:11,053 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 02:35:11,515 INFO  L134       CoverageAnalysis]: Checked inductivity of 363 backedges. 51 proven. 86 refuted. 0 times theorem prover too weak. 226 trivial. 0 not checked.
[2020-05-31 02:35:11,515 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 02:35:11,515 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-05-31 02:35:11,515 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 02:35:11,515 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-05-31 02:35:11,516 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=132, Invalid=1674, Unknown=0, NotChecked=0, Total=1806
[2020-05-31 02:35:11,516 INFO  L87              Difference]: Start difference. First operand 17853 states and 21703 transitions. cyclomatic complexity: 3912 Second operand 43 states.
[2020-05-31 02:35:22,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 02:35:22,576 INFO  L93              Difference]: Finished difference Result 16350 states and 20066 transitions.
[2020-05-31 02:35:22,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-05-31 02:35:22,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 16350 states and 20066 transitions.
[2020-05-31 02:35:22,621 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:35:22,621 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 16350 states to 0 states and 0 transitions.
[2020-05-31 02:35:22,621 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-05-31 02:35:22,621 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-05-31 02:35:22,621 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-05-31 02:35:22,621 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 02:35:22,621 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:22,621 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:22,621 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-05-31 02:35:22,621 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-05-31 02:35:22,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-05-31 02:35:22,622 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-05-31 02:35:22,622 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-05-31 02:35:22,625 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 02:35:22 BasicIcfg
[2020-05-31 02:35:22,625 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 02:35:22,626 INFO  L168              Benchmark]: Toolchain (without parser) took 342452.64 ms. Allocated memory was 514.9 MB in the beginning and 5.1 GB in the end (delta: 4.6 GB). Free memory was 460.2 MB in the beginning and 2.2 GB in the end (delta: -1.7 GB). Peak memory consumption was 2.9 GB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,627 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,628 INFO  L168              Benchmark]: Boogie Preprocessor took 67.56 ms. Allocated memory is still 514.9 MB. Free memory was 458.8 MB in the beginning and 453.4 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,628 INFO  L168              Benchmark]: UtopiaSpecLang took 41.78 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,629 INFO  L168              Benchmark]: Boogie Printer took 11.34 ms. Allocated memory is still 514.9 MB. Free memory was 449.3 MB in the beginning and 447.9 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,629 INFO  L168              Benchmark]: RCFGBuilder took 427.84 ms. Allocated memory is still 514.9 MB. Free memory was 447.9 MB in the beginning and 389.8 MB in the end (delta: 58.1 MB). Peak memory consumption was 58.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,629 INFO  L168              Benchmark]: UtopiaLTL2Aut took 50.59 ms. Allocated memory is still 514.9 MB. Free memory was 389.8 MB in the beginning and 385.3 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,630 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4161.67 ms. Allocated memory was 514.9 MB in the beginning and 1.3 GB in the end (delta: 774.9 MB). Free memory was 385.3 MB in the beginning and 966.2 MB in the end (delta: -580.9 MB). Peak memory consumption was 661.1 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,630 INFO  L168              Benchmark]: BlockEncodingV2 took 312.30 ms. Allocated memory is still 1.3 GB. Free memory was 966.2 MB in the beginning and 744.7 MB in the end (delta: 221.5 MB). Peak memory consumption was 221.5 MB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,630 INFO  L168              Benchmark]: BuchiAutomizer took 337375.94 ms. Allocated memory was 1.3 GB in the beginning and 5.1 GB in the end (delta: 3.8 GB). Free memory was 744.7 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-05-31 02:35:22,634 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    9647 locations, 38576 edges
  - StatisticsResult: Encoded RCFG
    9527 locations, 37894 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 67.56 ms. Allocated memory is still 514.9 MB. Free memory was 458.8 MB in the beginning and 453.4 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 41.78 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.34 ms. Allocated memory is still 514.9 MB. Free memory was 449.3 MB in the beginning and 447.9 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 427.84 ms. Allocated memory is still 514.9 MB. Free memory was 447.9 MB in the beginning and 389.8 MB in the end (delta: 58.1 MB). Peak memory consumption was 58.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 50.59 ms. Allocated memory is still 514.9 MB. Free memory was 389.8 MB in the beginning and 385.3 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4161.67 ms. Allocated memory was 514.9 MB in the beginning and 1.3 GB in the end (delta: 774.9 MB). Free memory was 385.3 MB in the beginning and 966.2 MB in the end (delta: -580.9 MB). Peak memory consumption was 661.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 312.30 ms. Allocated memory is still 1.3 GB. Free memory was 966.2 MB in the beginning and 744.7 MB in the end (delta: 221.5 MB). Peak memory consumption was 221.5 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 337375.94 ms. Allocated memory was 1.3 GB in the beginning and 5.1 GB in the end (delta: 3.8 GB). Free memory was 744.7 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    8 locations, 27 edges
  - StatisticsResult: Initial RCFG
    1028 locations, 1335 edges
  - StatisticsResult: BuchiProgram size
    9647 locations, 38576 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 32 terminating modules (32 trivial, 0 deterministic, 0 nondeterministic). 32 modules have a trivial ranking function, the largest among these consists of 55 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 337.3s and 33 iterations.  TraceHistogramMax:3. Analysis of lassos took 7.4s. Construction of modules took 264.7s. BÃ¼chi inclusion checks took 56.4s. Highest rank in rank-based complementation 0. Minimization of det autom 32. Minimization of nondet autom 0. Automata minimization 4.3s AutomataMinimizationTime, 31 MinimizatonAttempts, 15618 StatesRemovedByMinimization, 24 NontrivialMinimizations. Non-live state removal took 2.9s Buchi closure took 0.0s. Biggest automaton had 25117 states and ocurred in iteration 19.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 228513 SDtfs, 519940 SDslu, 594890 SDs, 0 SdLazy, 2204936 SolverSat, 97395 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 264.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU32 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ( ( <>(success_deposit_EscrowVault0) ) && ( <>(success_refund_EscrowVault0) ) )&& ! ( ( []( (success_enableRefunds_EscrowVault0) ==> ( <>(success_send__success0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
