This is Ultimate 0.1.24-9993c5c-m
[2020-05-31 01:08:01,791 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-31 01:08:01,792 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-31 01:08:01,803 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-31 01:08:01,803 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-31 01:08:01,804 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-31 01:08:01,806 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-31 01:08:01,807 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-31 01:08:01,809 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-31 01:08:01,810 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-31 01:08:01,826 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-31 01:08:01,827 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-31 01:08:01,828 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-31 01:08:01,829 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-31 01:08:01,830 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-31 01:08:01,831 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-31 01:08:01,832 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-31 01:08:01,834 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-31 01:08:01,835 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-31 01:08:01,836 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-31 01:08:01,838 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-31 01:08:01,839 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-31 01:08:01,840 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-31 01:08:01,840 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-31 01:08:01,840 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-31 01:08:01,841 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-31 01:08:01,842 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-31 01:08:01,843 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-31 01:08:01,843 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-31 01:08:01,843 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-31 01:08:01,843 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-31 01:08:01,844 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-31 01:08:01,845 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-31 01:08:01,846 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-31 01:08:01,848 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-31 01:08:01,849 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-31 01:08:01,849 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-31 01:08:01,850 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-31 01:08:01,850 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-31 01:08:01,850 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-31 01:08:01,851 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-31 01:08:01,852 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-31 01:08:01,852 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-31 01:08:01,862 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-31 01:08:01,862 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-31 01:08:01,862 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-31 01:08:01,863 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-31 01:08:01,863 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-31 01:08:01,863 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-31 01:08:01,864 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-31 01:08:01,864 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-31 01:08:01,864 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-31 01:08:01,865 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-31 01:08:01,865 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-31 01:08:01,883 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-31 01:08:01,893 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-31 01:08:01,895 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-31 01:08:01,896 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-31 01:08:01,896 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-31 01:08:01,898 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/inf-callback/L2-EscrowVault.bpl
[2020-05-31 01:08:01,898 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/inf-callback/L2-EscrowVault.bpl'
[2020-05-31 01:08:01,945 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-31 01:08:01,946 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-31 01:08:01,947 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-31 01:08:01,947 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-31 01:08:01,947 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-31 01:08:01,961 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:01,962 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:01,983 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:01,983 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:01,995 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:02,001 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:02,005 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:02,011 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-31 01:08:02,012 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-31 01:08:02,012 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-31 01:08:02,014 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-31 01:08:02,017 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/1) ...
[2020-05-31 01:08:02,028 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-31 01:08:02,032 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-31 01:08:02,037 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-31 01:08:02,040 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_deposit_EscrowVault_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_deposit_EscrowVault_2_0,GLOBAL]]]
[2020-05-31 01:08:02,041 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-31 01:08:02,041 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_send__success0) )
[2020-05-31 01:08:02,041 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-31 01:08:02,042 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-31 01:08:02,043 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-31 01:08:02,044 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_EscrowVault[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_EscrowVault,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,close_EscrowVault>]]]]
[2020-05-31 01:08:02,046 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-31 01:08:02,046 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_deposit_EscrowVault0) ) && ( <>AP(success_close_EscrowVault0) ) )
Executed UtopiaSpecLang
[2020-05-31 01:08:02,053 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 01:08:02 PropertyContainer
[2020-05-31 01:08:02,053 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-31 01:08:02,053 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-31 01:08:02,053 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-31 01:08:02,053 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-31 01:08:02,054 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/2) ...
[2020-05-31 01:08:02,054 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 01:08:02,054 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-31 01:08:02,063 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 01:08:02" (2/2) ...
[2020-05-31 01:08:02,063 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-31 01:08:02,064 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-31 01:08:02,064 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-31 01:08:02,064 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-31 01:08:02,065 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/2) ...
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-31 01:08:02,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-31 01:08:02,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-31 01:08:02,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-31 01:08:02,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-31 01:08:02,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault
[2020-05-31 01:08:02,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault
[2020-05-31 01:08:02,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault
[2020-05-31 01:08:02,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault
[2020-05-31 01:08:02,110 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault
[2020-05-31 01:08:02,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault
[2020-05-31 01:08:02,111 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault
[2020-05-31 01:08:02,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault
[2020-05-31 01:08:02,111 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault
[2020-05-31 01:08:02,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault
[2020-05-31 01:08:02,111 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault
[2020-05-31 01:08:02,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault
[2020-05-31 01:08:02,111 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault
[2020-05-31 01:08:02,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EscrowVault
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-31 01:08:02,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__success
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__fail
[2020-05-31 01:08:02,113 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__success
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__fail
[2020-05-31 01:08:02,114 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__success
[2020-05-31 01:08:02,115 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__fail
[2020-05-31 01:08:02,115 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-31 01:08:02,115 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-31 01:08:02,115 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-31 01:08:02,115 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__fail
[2020-05-31 01:08:02,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-31 01:08:02,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__fail
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__fail
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__fail
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__fail
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__success
[2020-05-31 01:08:02,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__fail
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__success
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__fail
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__success
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__fail
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__success
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__fail
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__success
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-31 01:08:02,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EscrowVault
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-31 01:08:02,119 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-31 01:08:02,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-31 01:08:02,256 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 01:08:02,267 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 01:08:02,398 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-31 01:08:02,486 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-31 01:08:02,486 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-05-31 01:08:02,487 INFO  L202        PluginConnector]: Adding new model L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 01:08:02 BoogieIcfgContainer
[2020-05-31 01:08:02,488 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 01:08:02" (2/2) ...
[2020-05-31 01:08:02,488 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-31 01:08:02,488 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@cd90190 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 01:08:02, skipping insertion in model container
[2020-05-31 01:08:02,488 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-31 01:08:02,489 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-31 01:08:02,489 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-31 01:08:02,491 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-31 01:08:02,491 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/3) ...
[2020-05-31 01:08:02,491 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@698d4e5e and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 01:08:02, skipping insertion in model container
[2020-05-31 01:08:02,491 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 01:08:02" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( <>c ) )  (exit command is null, workingDir is null)
[2020-05-31 01:08:02,527 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 01:08:02 NWAContainer
[2020-05-31 01:08:02,528 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-31 01:08:02,528 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-31 01:08:02,528 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-31 01:08:02,528 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-31 01:08:02,529 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 01:08:02" (3/4) ...
[2020-05-31 01:08:02,530 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3c73c4f6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 01:08:02, skipping insertion in model container
[2020-05-31 01:08:02,530 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 01:08:02" (4/4) ...
[2020-05-31 01:08:02,533 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-31 01:08:02,535 INFO  L110   BuchiProductObserver]: Initial RCFG 1020 locations, 1325 edges
[2020-05-31 01:08:02,535 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-31 01:08:02,545 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-31 01:08:04,392 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-31 01:08:04,401 INFO  L110   BuchiProductObserver]: BuchiProgram size 4798 locations, 12530 edges
[2020-05-31 01:08:04,401 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 01:08:04 BoogieIcfgContainer
[2020-05-31 01:08:04,401 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-31 01:08:04,402 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-31 01:08:04,402 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-31 01:08:04,403 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-31 01:08:04,404 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 01:08:04" (1/1) ...
[2020-05-31 01:08:04,517 INFO  L313           BlockEncoder]: Initial Icfg 4798 locations, 12530 edges
[2020-05-31 01:08:04,517 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-31 01:08:04,518 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-31 01:08:04,518 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-31 01:08:04,518 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-31 01:08:04,532 INFO  L70    emoveInfeasibleEdges]: Removed 145 edges and 20 locations because of local infeasibility
[2020-05-31 01:08:04,542 INFO  L70        RemoveSinkStates]: Removed 9 edges and 4 locations by removing sink states
[2020-05-31 01:08:04,558 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-31 01:08:04,563 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-31 01:08:04,569 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-31 01:08:04,570 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-31 01:08:04,574 INFO  L313           BlockEncoder]: Encoded RCFG 4734 locations, 12291 edges
[2020-05-31 01:08:04,575 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 01:08:04 BasicIcfg
[2020-05-31 01:08:04,575 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-31 01:08:04,575 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-31 01:08:04,575 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-31 01:08:04,577 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-31 01:08:04,578 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,578 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 31.05 01:08:01" (1/6) ...
[2020-05-31 01:08:04,579 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@490da2a9 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 01:08:04, skipping insertion in model container
[2020-05-31 01:08:04,579 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,579 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 31.05 01:08:02" (2/6) ...
[2020-05-31 01:08:04,579 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@490da2a9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 01:08:04, skipping insertion in model container
[2020-05-31 01:08:04,580 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,580 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 31.05 01:08:02" (3/6) ...
[2020-05-31 01:08:04,580 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@490da2a9 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 01:08:04, skipping insertion in model container
[2020-05-31 01:08:04,580 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,580 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 31.05 01:08:02" (4/6) ...
[2020-05-31 01:08:04,580 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@490da2a9 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 31.05 01:08:04, skipping insertion in model container
[2020-05-31 01:08:04,580 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,580 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 31.05 01:08:04" (5/6) ...
[2020-05-31 01:08:04,581 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@490da2a9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 31.05 01:08:04, skipping insertion in model container
[2020-05-31 01:08:04,581 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-31 01:08:04,581 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 31.05 01:08:04" (6/6) ...
[2020-05-31 01:08:04,582 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EscrowVault.bpl_BEv2
[2020-05-31 01:08:04,612 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-31 01:08:04,612 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-31 01:08:04,612 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-31 01:08:04,612 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-31 01:08:04,613 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-31 01:08:04,613 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-31 01:08:04,613 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-31 01:08:04,613 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-31 01:08:04,613 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-31 01:08:04,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4734 states.
[2020-05-31 01:08:04,743 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:04,743 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:04,743 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:04,752 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:04,752 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:04,752 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-31 01:08:04,752 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4734 states.
[2020-05-31 01:08:04,831 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:04,831 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:04,832 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:04,833 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:04,833 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:04,851 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:04,851 INFO  L82        PathProgramCache]: Analyzing trace with hash 1391578994, now seen corresponding path program 1 times
[2020-05-31 01:08:04,855 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:04,873 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:04,922 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 01:08:04,924 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:04,925 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 01:08:04,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:05,193 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 01:08:05,193 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 01:08:05,195 INFO  L87              Difference]: Start difference. First operand 4734 states. Second operand 3 states.
[2020-05-31 01:08:05,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:05,695 INFO  L93              Difference]: Finished difference Result 4052 states and 6951 transitions.
[2020-05-31 01:08:05,696 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 01:08:05,697 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4052 states and 6951 transitions.
[2020-05-31 01:08:05,726 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:05,767 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4052 states to 4052 states and 6951 transitions.
[2020-05-31 01:08:05,768 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-31 01:08:05,769 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 93
[2020-05-31 01:08:05,769 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4052 states and 6951 transitions.
[2020-05-31 01:08:05,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:05,786 INFO  L728         BuchiCegarLoop]: Abstraction has 4052 states and 6951 transitions.
[2020-05-31 01:08:05,805 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4052 states and 6951 transitions.
[2020-05-31 01:08:05,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4052 to 4052.
[2020-05-31 01:08:05,884 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4052 states.
[2020-05-31 01:08:05,895 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4052 states to 4052 states and 6951 transitions.
[2020-05-31 01:08:05,896 INFO  L751         BuchiCegarLoop]: Abstraction has 4052 states and 6951 transitions.
[2020-05-31 01:08:05,896 INFO  L631         BuchiCegarLoop]: Abstraction has 4052 states and 6951 transitions.
[2020-05-31 01:08:05,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-31 01:08:05,896 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4052 states and 6951 transitions.
[2020-05-31 01:08:05,905 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:05,905 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:05,905 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:05,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:05,908 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:05,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:05,912 INFO  L82        PathProgramCache]: Analyzing trace with hash 83124424, now seen corresponding path program 1 times
[2020-05-31 01:08:05,913 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:05,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:05,940 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 01:08:05,940 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:05,940 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 01:08:05,941 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:05,941 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 01:08:05,941 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 01:08:05,942 INFO  L87              Difference]: Start difference. First operand 4052 states and 6951 transitions. cyclomatic complexity: 2911 Second operand 3 states.
[2020-05-31 01:08:06,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:06,110 INFO  L93              Difference]: Finished difference Result 3915 states and 4697 transitions.
[2020-05-31 01:08:06,110 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 01:08:06,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3915 states and 4697 transitions.
[2020-05-31 01:08:06,123 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:06,138 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3915 states to 3915 states and 4697 transitions.
[2020-05-31 01:08:06,138 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 93
[2020-05-31 01:08:06,139 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 93
[2020-05-31 01:08:06,139 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3915 states and 4697 transitions.
[2020-05-31 01:08:06,142 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:06,142 INFO  L728         BuchiCegarLoop]: Abstraction has 3915 states and 4697 transitions.
[2020-05-31 01:08:06,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3915 states and 4697 transitions.
[2020-05-31 01:08:06,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3915 to 3915.
[2020-05-31 01:08:06,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3915 states.
[2020-05-31 01:08:06,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3915 states to 3915 states and 4697 transitions.
[2020-05-31 01:08:06,182 INFO  L751         BuchiCegarLoop]: Abstraction has 3915 states and 4697 transitions.
[2020-05-31 01:08:06,182 INFO  L631         BuchiCegarLoop]: Abstraction has 3915 states and 4697 transitions.
[2020-05-31 01:08:06,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-31 01:08:06,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3915 states and 4697 transitions.
[2020-05-31 01:08:06,187 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 160
[2020-05-31 01:08:06,187 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:06,188 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:06,189 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:06,189 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2568]              assume null == 0;
[L2569]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2569]  RET         call this := FreshRefGenerator__success();
[L2570]              assume now >= 0;
[L2571]              assume DType[this] == EscrowVault;
[L2572]              gas := gas - 53000;
[L2573]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND TRUE   revert
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]              assume !revert && gas >= 0;
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND TRUE   choice == 7
[L2495]              gas := gas - 21000;
[L2496]  COND TRUE   gas >= 0
[L2498]              assume msgvalue_MSG >= 0;
[L2499]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND TRUE   revert
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND TRUE   choice == 7
[L2495]              gas := gas - 21000;
[L2496]  COND TRUE   gas >= 0
[L2498]              assume msgvalue_MSG >= 0;
[L2499]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND TRUE   revert
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:06,193 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:06,193 INFO  L82        PathProgramCache]: Analyzing trace with hash -1443991194, now seen corresponding path program 1 times
[2020-05-31 01:08:06,194 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:06,204 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:06,228 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-31 01:08:06,229 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:06,229 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-31 01:08:06,229 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:06,229 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-31 01:08:06,229 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-31 01:08:06,230 INFO  L87              Difference]: Start difference. First operand 3915 states and 4697 transitions. cyclomatic complexity: 794 Second operand 3 states.
[2020-05-31 01:08:06,351 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:06,351 INFO  L93              Difference]: Finished difference Result 5111 states and 6123 transitions.
[2020-05-31 01:08:06,351 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-31 01:08:06,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5111 states and 6123 transitions.
[2020-05-31 01:08:06,365 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:06,384 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5111 states to 4687 states and 5529 transitions.
[2020-05-31 01:08:06,385 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 140
[2020-05-31 01:08:06,385 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 140
[2020-05-31 01:08:06,385 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4687 states and 5529 transitions.
[2020-05-31 01:08:06,390 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:06,390 INFO  L728         BuchiCegarLoop]: Abstraction has 4687 states and 5529 transitions.
[2020-05-31 01:08:06,395 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4687 states and 5529 transitions.
[2020-05-31 01:08:06,439 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4687 to 4354.
[2020-05-31 01:08:06,439 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4354 states.
[2020-05-31 01:08:06,448 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4354 states to 4354 states and 5108 transitions.
[2020-05-31 01:08:06,449 INFO  L751         BuchiCegarLoop]: Abstraction has 4354 states and 5108 transitions.
[2020-05-31 01:08:06,449 INFO  L631         BuchiCegarLoop]: Abstraction has 4354 states and 5108 transitions.
[2020-05-31 01:08:06,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-31 01:08:06,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4354 states and 5108 transitions.
[2020-05-31 01:08:06,456 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:06,456 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:06,456 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:06,459 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:06,459 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND TRUE   __exception
[L269]                     __tmp__Balance := Balance;
[L270]                     __tmp__DType := DType;
[L271]                     __tmp__Alloc := Alloc;
[L272]                     __tmp__balance_ADDR := balance_ADDR;
[L273]                     __tmp__M_Ref_int_deposited0 := M_Ref_int_deposited0;
[L274]                     __tmp__sum_deposited0 := sum_deposited0;
[L275]                     __tmp__Length := Length;
[L276]                     __tmp__now := now;
[L277]                     __tmp__owner_Ownable := owner_Ownable;
[L278]                     __tmp__deposited_EscrowVault := deposited_EscrowVault;
[L279]                     __tmp__beneficiary_EscrowVault := beneficiary_EscrowVault;
[L280]                     __tmp__superOwner_EscrowVault := superOwner_EscrowVault;
[L281]                     __tmp__state_EscrowVault := state_EscrowVault;
[L282]         CALL        call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1268]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1101]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1081]                    assume msgsender_MSG != null;
[L1082]                    __tmp__Balance[this] := 0;
[L1083]                    __tmp__owner_Ownable[this] := null;
[L1084]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1101]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1102]        COND FALSE  !(revert)
[L1268]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1269]        COND FALSE  !(revert)
[L1274]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1180]                    assume msgsender_MSG != null;
[L1181]                    __tmp__Balance[this] := 0;
[L1182]        CALL        call __var_4 := FreshRefGenerator__fail();
[L823]                     havoc newRef;
[L824]                     assume __tmp__Alloc[newRef] == false;
[L825]                     __tmp__Alloc[newRef] := true;
[L826]                     assume newRef != null;
[L1182]        RET         call __var_4 := FreshRefGenerator__fail();
[L1183]        COND FALSE  !(revert)
[L1188]                    __tmp__deposited_EscrowVault[this] := __var_4;
[L1189]                    __tmp__M_Ref_int_deposited0[__tmp__deposited_EscrowVault[this]] := zeroRefIntArr();
[L1190]                    __tmp__sum_deposited0[__tmp__deposited_EscrowVault[this]] := 0;
[L1191]                    __tmp__beneficiary_EscrowVault[this] := null;
[L1192]                    __tmp__superOwner_EscrowVault[this] := null;
[L1193]                    __var_2 := null;
[L1194]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1200]                    __var_3 := null;
[L1201]        COND FALSE  !(!(_superOwner_s224 != null))
[L1207]                    __tmp__beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1208]                    __tmp__superOwner_EscrowVault[this] := _superOwner_s224;
[L1209]                    __tmp__state_EscrowVault[this] := 0;
[L1274]        RET         call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1275]        COND FALSE  !(revert)
[L282]         RET         call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L283]                     assume revert || gas < 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:06,463 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:06,463 INFO  L82        PathProgramCache]: Analyzing trace with hash -1753024867, now seen corresponding path program 1 times
[2020-05-31 01:08:06,464 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:06,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:06,580 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-05-31 01:08:06,580 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:06,580 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 01:08:06,581 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:06,581 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 01:08:06,581 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-31 01:08:06,581 INFO  L87              Difference]: Start difference. First operand 4354 states and 5108 transitions. cyclomatic complexity: 766 Second operand 4 states.
[2020-05-31 01:08:07,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:07,182 INFO  L93              Difference]: Finished difference Result 5174 states and 6080 transitions.
[2020-05-31 01:08:07,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 01:08:07,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5174 states and 6080 transitions.
[2020-05-31 01:08:07,196 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 166
[2020-05-31 01:08:07,218 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5174 states to 5053 states and 5927 transitions.
[2020-05-31 01:08:07,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 179
[2020-05-31 01:08:07,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 179
[2020-05-31 01:08:07,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5053 states and 5927 transitions.
[2020-05-31 01:08:07,225 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:07,225 INFO  L728         BuchiCegarLoop]: Abstraction has 5053 states and 5927 transitions.
[2020-05-31 01:08:07,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5053 states and 5927 transitions.
[2020-05-31 01:08:07,273 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5053 to 4213.
[2020-05-31 01:08:07,274 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4213 states.
[2020-05-31 01:08:07,280 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4213 states to 4213 states and 4857 transitions.
[2020-05-31 01:08:07,281 INFO  L751         BuchiCegarLoop]: Abstraction has 4213 states and 4857 transitions.
[2020-05-31 01:08:07,281 INFO  L631         BuchiCegarLoop]: Abstraction has 4213 states and 4857 transitions.
[2020-05-31 01:08:07,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-31 01:08:07,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4213 states and 4857 transitions.
[2020-05-31 01:08:07,285 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:07,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:07,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:07,288 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:07,288 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:07,291 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:07,291 INFO  L82        PathProgramCache]: Analyzing trace with hash -1846219273, now seen corresponding path program 1 times
[2020-05-31 01:08:07,291 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:07,305 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:07,388 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-31 01:08:07,388 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:07,388 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-31 01:08:07,388 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:07,389 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 01:08:07,389 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-31 01:08:07,389 INFO  L87              Difference]: Start difference. First operand 4213 states and 4857 transitions. cyclomatic complexity: 656 Second operand 10 states.
[2020-05-31 01:08:09,031 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:09,031 INFO  L93              Difference]: Finished difference Result 4746 states and 5525 transitions.
[2020-05-31 01:08:09,031 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 01:08:09,031 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4746 states and 5525 transitions.
[2020-05-31 01:08:09,040 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 232
[2020-05-31 01:08:09,060 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4746 states to 4746 states and 5525 transitions.
[2020-05-31 01:08:09,060 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 140
[2020-05-31 01:08:09,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 140
[2020-05-31 01:08:09,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4746 states and 5525 transitions.
[2020-05-31 01:08:09,065 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:09,065 INFO  L728         BuchiCegarLoop]: Abstraction has 4746 states and 5525 transitions.
[2020-05-31 01:08:09,069 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4746 states and 5525 transitions.
[2020-05-31 01:08:09,109 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4746 to 4404.
[2020-05-31 01:08:09,109 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4404 states.
[2020-05-31 01:08:09,116 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4404 states to 4404 states and 5095 transitions.
[2020-05-31 01:08:09,116 INFO  L751         BuchiCegarLoop]: Abstraction has 4404 states and 5095 transitions.
[2020-05-31 01:08:09,116 INFO  L631         BuchiCegarLoop]: Abstraction has 4404 states and 5095 transitions.
[2020-05-31 01:08:09,116 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-31 01:08:09,116 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4404 states and 5095 transitions.
[2020-05-31 01:08:09,121 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:09,121 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:09,121 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:09,124 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:09,124 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND FALSE  !(Balance[from] >= amount)
[L2315]                    success := false;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND FALSE  !(Balance[from] >= amount)
[L2315]              success := false;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:09,129 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:09,129 INFO  L82        PathProgramCache]: Analyzing trace with hash -1421102486, now seen corresponding path program 1 times
[2020-05-31 01:08:09,129 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:09,147 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:09,194 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-31 01:08:09,194 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:09,194 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-31 01:08:09,195 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:09,195 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-31 01:08:09,195 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-31 01:08:09,195 INFO  L87              Difference]: Start difference. First operand 4404 states and 5095 transitions. cyclomatic complexity: 705 Second operand 4 states.
[2020-05-31 01:08:09,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:09,232 INFO  L93              Difference]: Finished difference Result 4440 states and 5135 transitions.
[2020-05-31 01:08:09,233 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-31 01:08:09,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4440 states and 5135 transitions.
[2020-05-31 01:08:09,242 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:09,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4440 states to 4432 states and 5127 transitions.
[2020-05-31 01:08:09,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 109
[2020-05-31 01:08:09,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 109
[2020-05-31 01:08:09,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4432 states and 5127 transitions.
[2020-05-31 01:08:09,264 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:09,264 INFO  L728         BuchiCegarLoop]: Abstraction has 4432 states and 5127 transitions.
[2020-05-31 01:08:09,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4432 states and 5127 transitions.
[2020-05-31 01:08:09,305 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4432 to 4432.
[2020-05-31 01:08:09,306 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4432 states.
[2020-05-31 01:08:09,311 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4432 states to 4432 states and 5127 transitions.
[2020-05-31 01:08:09,311 INFO  L751         BuchiCegarLoop]: Abstraction has 4432 states and 5127 transitions.
[2020-05-31 01:08:09,311 INFO  L631         BuchiCegarLoop]: Abstraction has 4432 states and 5127 transitions.
[2020-05-31 01:08:09,311 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-31 01:08:09,311 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4432 states and 5127 transitions.
[2020-05-31 01:08:09,316 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 162
[2020-05-31 01:08:09,316 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:09,316 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:09,319 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:09,319 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND FALSE  !(gas < 21000)
[L2064]        COND TRUE   iterate && gas >= 21000
[L2066]                    havoc msgsender_MSG;
[L2067]                    havoc msgvalue_MSG;
[L2068]                    havoc choice;
[L2069]                    havoc newOwner_s150;
[L2070]                    havoc _superOwner_s224;
[L2071]                    havoc _beneficiary_s224;
[L2072]                    havoc investor_s256;
[L2073]                    havoc _amount_s320;
[L2074]                    havoc investor_s431;
[L2075]                    havoc iterate;
[L2076]        COND TRUE   DType[from] == EscrowVault
[L2078]        COND FALSE  !(choice == 8)
[L2091]        COND FALSE  !(choice == 7)
[L2104]        COND TRUE   choice == 6
[L2106]                    gas := gas - 21000;
[L2107]        COND TRUE   gas >= 0
[L2109]                    assume msgvalue_MSG == 0;
[L2110]        CALL        call setGoalReached_EscrowVault__success(from, to, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L2110]        RET         call setGoalReached_EscrowVault__success(from, to, msgvalue_MSG);
[L2111]        COND FALSE  !(revert)
[L2064]        COND FALSE  !(iterate && gas >= 21000)
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:09,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:09,324 INFO  L82        PathProgramCache]: Analyzing trace with hash 581884903, now seen corresponding path program 1 times
[2020-05-31 01:08:09,324 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:09,343 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:09,482 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-31 01:08:09,482 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:09,482 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [6] total 6
[2020-05-31 01:08:09,482 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:09,483 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-05-31 01:08:09,483 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-05-31 01:08:09,483 INFO  L87              Difference]: Start difference. First operand 4432 states and 5127 transitions. cyclomatic complexity: 709 Second operand 6 states.
[2020-05-31 01:08:09,959 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:09,959 INFO  L93              Difference]: Finished difference Result 3672 states and 4120 transitions.
[2020-05-31 01:08:09,959 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-05-31 01:08:09,960 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3672 states and 4120 transitions.
[2020-05-31 01:08:09,966 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 01:08:09,976 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3672 states to 3672 states and 4120 transitions.
[2020-05-31 01:08:09,976 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 137
[2020-05-31 01:08:09,977 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 631
[2020-05-31 01:08:09,977 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3672 states and 4120 transitions.
[2020-05-31 01:08:09,979 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:09,979 INFO  L728         BuchiCegarLoop]: Abstraction has 3672 states and 4120 transitions.
[2020-05-31 01:08:09,982 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3672 states and 4120 transitions.
[2020-05-31 01:08:10,005 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3672 to 3398.
[2020-05-31 01:08:10,005 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3398 states.
[2020-05-31 01:08:10,008 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3398 states to 3398 states and 3792 transitions.
[2020-05-31 01:08:10,008 INFO  L751         BuchiCegarLoop]: Abstraction has 3398 states and 3792 transitions.
[2020-05-31 01:08:10,009 INFO  L631         BuchiCegarLoop]: Abstraction has 3398 states and 3792 transitions.
[2020-05-31 01:08:10,009 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-31 01:08:10,009 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3398 states and 3792 transitions.
[2020-05-31 01:08:10,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:10,013 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:10,013 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:10,014 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:10,014 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND FALSE  !(choice == 3)
[L2538]        COND TRUE   choice == 2
[L2540]                    gas := gas - 21000;
[L2541]        COND TRUE   gas >= 0
[L2543]                    assume msgvalue_MSG == 0;
[L2544]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L2544]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:10,018 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:10,018 INFO  L82        PathProgramCache]: Analyzing trace with hash -293865998, now seen corresponding path program 1 times
[2020-05-31 01:08:10,019 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:10,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:10,100 INFO  L134       CoverageAnalysis]: Checked inductivity of 49 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-31 01:08:10,100 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:10,100 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-31 01:08:10,101 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:10,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 01:08:10,101 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 01:08:10,101 INFO  L87              Difference]: Start difference. First operand 3398 states and 3792 transitions. cyclomatic complexity: 400 Second operand 11 states.
[2020-05-31 01:08:11,295 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:11,295 INFO  L93              Difference]: Finished difference Result 3934 states and 4486 transitions.
[2020-05-31 01:08:11,295 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 01:08:11,295 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3934 states and 4486 transitions.
[2020-05-31 01:08:11,300 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 01:08:11,307 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3934 states to 3906 states and 4454 transitions.
[2020-05-31 01:08:11,307 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 628
[2020-05-31 01:08:11,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 628
[2020-05-31 01:08:11,308 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3906 states and 4454 transitions.
[2020-05-31 01:08:11,309 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:11,309 INFO  L728         BuchiCegarLoop]: Abstraction has 3906 states and 4454 transitions.
[2020-05-31 01:08:11,312 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3906 states and 4454 transitions.
[2020-05-31 01:08:11,327 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3906 to 3906.
[2020-05-31 01:08:11,327 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3906 states.
[2020-05-31 01:08:11,330 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3906 states to 3906 states and 4454 transitions.
[2020-05-31 01:08:11,331 INFO  L751         BuchiCegarLoop]: Abstraction has 3906 states and 4454 transitions.
[2020-05-31 01:08:11,331 INFO  L631         BuchiCegarLoop]: Abstraction has 3906 states and 4454 transitions.
[2020-05-31 01:08:11,331 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-31 01:08:11,331 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3906 states and 4454 transitions.
[2020-05-31 01:08:11,334 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 01:08:11,334 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:11,334 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:11,335 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:11,335 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:11,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:11,339 INFO  L82        PathProgramCache]: Analyzing trace with hash -62588563, now seen corresponding path program 1 times
[2020-05-31 01:08:11,339 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:11,354 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:11,411 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-31 01:08:11,411 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:11,411 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-31 01:08:11,412 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:11,412 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-31 01:08:11,412 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=42, Unknown=0, NotChecked=0, Total=56
[2020-05-31 01:08:11,412 INFO  L87              Difference]: Start difference. First operand 3906 states and 4454 transitions. cyclomatic complexity: 554 Second operand 8 states.
[2020-05-31 01:08:11,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:11,995 INFO  L93              Difference]: Finished difference Result 4308 states and 4970 transitions.
[2020-05-31 01:08:11,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 01:08:11,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4308 states and 4970 transitions.
[2020-05-31 01:08:12,003 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 16
[2020-05-31 01:08:12,013 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4308 states to 4272 states and 4934 transitions.
[2020-05-31 01:08:12,013 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 684
[2020-05-31 01:08:12,014 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 684
[2020-05-31 01:08:12,014 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4272 states and 4934 transitions.
[2020-05-31 01:08:12,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:12,017 INFO  L728         BuchiCegarLoop]: Abstraction has 4272 states and 4934 transitions.
[2020-05-31 01:08:12,020 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4272 states and 4934 transitions.
[2020-05-31 01:08:12,044 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4272 to 3938.
[2020-05-31 01:08:12,045 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3938 states.
[2020-05-31 01:08:12,049 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3938 states to 3938 states and 4490 transitions.
[2020-05-31 01:08:12,049 INFO  L751         BuchiCegarLoop]: Abstraction has 3938 states and 4490 transitions.
[2020-05-31 01:08:12,049 INFO  L631         BuchiCegarLoop]: Abstraction has 3938 states and 4490 transitions.
[2020-05-31 01:08:12,049 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-31 01:08:12,049 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3938 states and 4490 transitions.
[2020-05-31 01:08:12,053 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-31 01:08:12,053 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:12,053 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:12,054 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:12,054 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:12,057 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:12,058 INFO  L82        PathProgramCache]: Analyzing trace with hash 2005809502, now seen corresponding path program 1 times
[2020-05-31 01:08:12,058 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:12,075 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:12,364 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-31 01:08:12,364 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:12,364 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-31 01:08:12,365 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:12,365 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-31 01:08:12,366 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1019, Unknown=0, NotChecked=0, Total=1122
[2020-05-31 01:08:12,366 INFO  L87              Difference]: Start difference. First operand 3938 states and 4490 transitions. cyclomatic complexity: 558 Second operand 34 states.
[2020-05-31 01:08:18,428 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:18,429 INFO  L93              Difference]: Finished difference Result 6384 states and 7523 transitions.
[2020-05-31 01:08:18,429 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 57 states. 
[2020-05-31 01:08:18,429 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6384 states and 7523 transitions.
[2020-05-31 01:08:18,443 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-31 01:08:18,460 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6384 states to 6384 states and 7523 transitions.
[2020-05-31 01:08:18,461 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 748
[2020-05-31 01:08:18,461 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 748
[2020-05-31 01:08:18,461 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6384 states and 7523 transitions.
[2020-05-31 01:08:18,465 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:18,465 INFO  L728         BuchiCegarLoop]: Abstraction has 6384 states and 7523 transitions.
[2020-05-31 01:08:18,468 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6384 states and 7523 transitions.
[2020-05-31 01:08:18,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6384 to 6154.
[2020-05-31 01:08:18,517 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6154 states.
[2020-05-31 01:08:18,526 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6154 states to 6154 states and 7118 transitions.
[2020-05-31 01:08:18,526 INFO  L751         BuchiCegarLoop]: Abstraction has 6154 states and 7118 transitions.
[2020-05-31 01:08:18,526 INFO  L631         BuchiCegarLoop]: Abstraction has 6154 states and 7118 transitions.
[2020-05-31 01:08:18,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-31 01:08:18,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6154 states and 7118 transitions.
[2020-05-31 01:08:18,532 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 01:08:18,533 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:18,533 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:18,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:18,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:18,537 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:18,537 INFO  L82        PathProgramCache]: Analyzing trace with hash 549121540, now seen corresponding path program 1 times
[2020-05-31 01:08:18,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:18,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:18,740 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-31 01:08:18,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:18,740 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-05-31 01:08:18,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:18,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-05-31 01:08:18,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=838, Unknown=0, NotChecked=0, Total=930
[2020-05-31 01:08:18,741 INFO  L87              Difference]: Start difference. First operand 6154 states and 7118 transitions. cyclomatic complexity: 990 Second operand 31 states.
[2020-05-31 01:08:23,267 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:23,268 INFO  L93              Difference]: Finished difference Result 6275 states and 7261 transitions.
[2020-05-31 01:08:23,268 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 60 states. 
[2020-05-31 01:08:23,268 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6275 states and 7261 transitions.
[2020-05-31 01:08:23,281 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 01:08:23,298 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6275 states to 6275 states and 7261 transitions.
[2020-05-31 01:08:23,298 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 732
[2020-05-31 01:08:23,299 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 732
[2020-05-31 01:08:23,299 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6275 states and 7261 transitions.
[2020-05-31 01:08:23,302 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:23,302 INFO  L728         BuchiCegarLoop]: Abstraction has 6275 states and 7261 transitions.
[2020-05-31 01:08:23,305 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6275 states and 7261 transitions.
[2020-05-31 01:08:23,342 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6275 to 6188.
[2020-05-31 01:08:23,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6188 states.
[2020-05-31 01:08:23,349 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6188 states to 6188 states and 7159 transitions.
[2020-05-31 01:08:23,349 INFO  L751         BuchiCegarLoop]: Abstraction has 6188 states and 7159 transitions.
[2020-05-31 01:08:23,349 INFO  L631         BuchiCegarLoop]: Abstraction has 6188 states and 7159 transitions.
[2020-05-31 01:08:23,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-31 01:08:23,350 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6188 states and 7159 transitions.
[2020-05-31 01:08:23,356 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-31 01:08:23,356 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:23,356 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:23,357 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:23,357 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND FALSE  !(gas >= 0)
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:23,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:23,359 INFO  L82        PathProgramCache]: Analyzing trace with hash -919501013, now seen corresponding path program 1 times
[2020-05-31 01:08:23,360 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:23,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:23,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-31 01:08:23,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:23,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-05-31 01:08:23,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:23,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-31 01:08:23,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=627, Unknown=0, NotChecked=0, Total=702
[2020-05-31 01:08:23,547 INFO  L87              Difference]: Start difference. First operand 6188 states and 7159 transitions. cyclomatic complexity: 997 Second operand 27 states.
[2020-05-31 01:08:27,793 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:27,793 INFO  L93              Difference]: Finished difference Result 6269 states and 7252 transitions.
[2020-05-31 01:08:27,793 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-05-31 01:08:27,793 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6269 states and 7252 transitions.
[2020-05-31 01:08:27,806 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-31 01:08:27,817 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6269 states to 6269 states and 7252 transitions.
[2020-05-31 01:08:27,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 724
[2020-05-31 01:08:27,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 724
[2020-05-31 01:08:27,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6269 states and 7252 transitions.
[2020-05-31 01:08:27,821 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:27,821 INFO  L728         BuchiCegarLoop]: Abstraction has 6269 states and 7252 transitions.
[2020-05-31 01:08:27,823 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6269 states and 7252 transitions.
[2020-05-31 01:08:27,853 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6269 to 6031.
[2020-05-31 01:08:27,853 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6031 states.
[2020-05-31 01:08:27,860 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6031 states to 6031 states and 6961 transitions.
[2020-05-31 01:08:27,860 INFO  L751         BuchiCegarLoop]: Abstraction has 6031 states and 6961 transitions.
[2020-05-31 01:08:27,860 INFO  L631         BuchiCegarLoop]: Abstraction has 6031 states and 6961 transitions.
[2020-05-31 01:08:27,860 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-31 01:08:27,860 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6031 states and 6961 transitions.
[2020-05-31 01:08:27,866 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:27,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:27,866 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:27,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:27,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:27,870 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:27,870 INFO  L82        PathProgramCache]: Analyzing trace with hash 322366999, now seen corresponding path program 1 times
[2020-05-31 01:08:27,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:27,886 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:28,027 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-31 01:08:28,027 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-31 01:08:28,027 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-05-31 01:08:28,028 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:28,028 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-31 01:08:28,028 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-05-31 01:08:28,028 INFO  L87              Difference]: Start difference. First operand 6031 states and 6961 transitions. cyclomatic complexity: 954 Second operand 24 states.
[2020-05-31 01:08:31,570 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:31,570 INFO  L93              Difference]: Finished difference Result 6182 states and 7115 transitions.
[2020-05-31 01:08:31,570 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-05-31 01:08:31,570 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6182 states and 7115 transitions.
[2020-05-31 01:08:31,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:31,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6182 states to 6182 states and 7115 transitions.
[2020-05-31 01:08:31,588 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 703
[2020-05-31 01:08:31,589 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 703
[2020-05-31 01:08:31,589 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6182 states and 7115 transitions.
[2020-05-31 01:08:31,591 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:31,591 INFO  L728         BuchiCegarLoop]: Abstraction has 6182 states and 7115 transitions.
[2020-05-31 01:08:31,593 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6182 states and 7115 transitions.
[2020-05-31 01:08:31,616 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6182 to 5854.
[2020-05-31 01:08:31,616 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5854 states.
[2020-05-31 01:08:31,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5854 states to 5854 states and 6651 transitions.
[2020-05-31 01:08:31,622 INFO  L751         BuchiCegarLoop]: Abstraction has 5854 states and 6651 transitions.
[2020-05-31 01:08:31,622 INFO  L631         BuchiCegarLoop]: Abstraction has 5854 states and 6651 transitions.
[2020-05-31 01:08:31,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-31 01:08:31,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5854 states and 6651 transitions.
[2020-05-31 01:08:31,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:31,627 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:31,627 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:31,628 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:31,628 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:31,632 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:31,632 INFO  L82        PathProgramCache]: Analyzing trace with hash 546350043, now seen corresponding path program 1 times
[2020-05-31 01:08:31,632 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:31,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:31,707 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 1 proven. 23 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-31 01:08:31,707 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:31,707 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-31 01:08:31,708 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:31,708 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 01:08:31,708 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 01:08:31,708 INFO  L87              Difference]: Start difference. First operand 5854 states and 6651 transitions. cyclomatic complexity: 812 Second operand 11 states.
[2020-05-31 01:08:32,420 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:32,420 INFO  L93              Difference]: Finished difference Result 5923 states and 6738 transitions.
[2020-05-31 01:08:32,420 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-31 01:08:32,420 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5923 states and 6738 transitions.
[2020-05-31 01:08:32,430 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:32,440 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5923 states to 5923 states and 6738 transitions.
[2020-05-31 01:08:32,440 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 632
[2020-05-31 01:08:32,440 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-05-31 01:08:32,440 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5923 states and 6738 transitions.
[2020-05-31 01:08:32,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:32,443 INFO  L728         BuchiCegarLoop]: Abstraction has 5923 states and 6738 transitions.
[2020-05-31 01:08:32,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5923 states and 6738 transitions.
[2020-05-31 01:08:32,474 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5923 to 5863.
[2020-05-31 01:08:32,475 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5863 states.
[2020-05-31 01:08:32,481 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5863 states to 5863 states and 6663 transitions.
[2020-05-31 01:08:32,481 INFO  L751         BuchiCegarLoop]: Abstraction has 5863 states and 6663 transitions.
[2020-05-31 01:08:32,481 INFO  L631         BuchiCegarLoop]: Abstraction has 5863 states and 6663 transitions.
[2020-05-31 01:08:32,481 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-31 01:08:32,481 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5863 states and 6663 transitions.
[2020-05-31 01:08:32,486 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:32,487 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:32,487 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:32,488 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:32,488 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:32,491 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:32,491 INFO  L82        PathProgramCache]: Analyzing trace with hash -2054627656, now seen corresponding path program 1 times
[2020-05-31 01:08:32,492 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:32,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:32,942 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 7 proven. 96 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-31 01:08:32,942 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:32,942 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-31 01:08:32,943 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:32,943 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-31 01:08:32,943 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=140, Invalid=2022, Unknown=0, NotChecked=0, Total=2162
[2020-05-31 01:08:32,944 INFO  L87              Difference]: Start difference. First operand 5863 states and 6663 transitions. cyclomatic complexity: 815 Second operand 47 states.
[2020-05-31 01:08:44,185 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:44,185 INFO  L93              Difference]: Finished difference Result 6600 states and 7788 transitions.
[2020-05-31 01:08:44,185 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 69 states. 
[2020-05-31 01:08:44,185 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6600 states and 7788 transitions.
[2020-05-31 01:08:44,197 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:44,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6600 states to 6588 states and 7772 transitions.
[2020-05-31 01:08:44,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 723
[2020-05-31 01:08:44,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 723
[2020-05-31 01:08:44,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6588 states and 7772 transitions.
[2020-05-31 01:08:44,217 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:44,217 INFO  L728         BuchiCegarLoop]: Abstraction has 6588 states and 7772 transitions.
[2020-05-31 01:08:44,219 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6588 states and 7772 transitions.
[2020-05-31 01:08:44,253 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6588 to 6309.
[2020-05-31 01:08:44,253 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6309 states.
[2020-05-31 01:08:44,261 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6309 states to 6309 states and 7370 transitions.
[2020-05-31 01:08:44,261 INFO  L751         BuchiCegarLoop]: Abstraction has 6309 states and 7370 transitions.
[2020-05-31 01:08:44,261 INFO  L631         BuchiCegarLoop]: Abstraction has 6309 states and 7370 transitions.
[2020-05-31 01:08:44,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-31 01:08:44,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6309 states and 7370 transitions.
[2020-05-31 01:08:44,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:44,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:44,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:44,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:44,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND TRUE   choice == 6
[L2504]              gas := gas - 21000;
[L2505]  COND TRUE   gas >= 0
[L2507]              assume msgvalue_MSG == 0;
[L2508]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2508]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:44,272 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:44,272 INFO  L82        PathProgramCache]: Analyzing trace with hash -1500820374, now seen corresponding path program 1 times
[2020-05-31 01:08:44,272 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:44,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:44,535 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 68 proven. 17 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-05-31 01:08:44,535 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:44,535 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-31 01:08:44,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:44,536 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-31 01:08:44,536 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=89, Invalid=967, Unknown=0, NotChecked=0, Total=1056
[2020-05-31 01:08:44,536 INFO  L87              Difference]: Start difference. First operand 6309 states and 7370 transitions. cyclomatic complexity: 1086 Second operand 33 states.
[2020-05-31 01:08:50,663 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:50,663 INFO  L93              Difference]: Finished difference Result 6540 states and 7783 transitions.
[2020-05-31 01:08:50,663 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 56 states. 
[2020-05-31 01:08:50,664 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6540 states and 7783 transitions.
[2020-05-31 01:08:50,676 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:50,692 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6540 states to 6540 states and 7783 transitions.
[2020-05-31 01:08:50,692 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 711
[2020-05-31 01:08:50,692 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 711
[2020-05-31 01:08:50,693 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6540 states and 7783 transitions.
[2020-05-31 01:08:50,696 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:50,697 INFO  L728         BuchiCegarLoop]: Abstraction has 6540 states and 7783 transitions.
[2020-05-31 01:08:50,699 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6540 states and 7783 transitions.
[2020-05-31 01:08:50,730 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6540 to 6221.
[2020-05-31 01:08:50,731 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6221 states.
[2020-05-31 01:08:50,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6221 states to 6221 states and 7262 transitions.
[2020-05-31 01:08:50,738 INFO  L751         BuchiCegarLoop]: Abstraction has 6221 states and 7262 transitions.
[2020-05-31 01:08:50,738 INFO  L631         BuchiCegarLoop]: Abstraction has 6221 states and 7262 transitions.
[2020-05-31 01:08:50,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-31 01:08:50,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6221 states and 7262 transitions.
[2020-05-31 01:08:50,744 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-31 01:08:50,744 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:50,744 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:50,745 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:50,746 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND TRUE   choice == 6
[L2504]              gas := gas - 21000;
[L2505]  COND TRUE   gas >= 0
[L2507]              assume msgvalue_MSG == 0;
[L2508]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2508]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:50,749 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:50,749 INFO  L82        PathProgramCache]: Analyzing trace with hash -1255857408, now seen corresponding path program 1 times
[2020-05-31 01:08:50,749 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:50,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:50,837 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-31 01:08:50,837 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:50,837 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 01:08:50,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:50,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 01:08:50,838 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 01:08:50,838 INFO  L87              Difference]: Start difference. First operand 6221 states and 7262 transitions. cyclomatic complexity: 1066 Second operand 14 states.
[2020-05-31 01:08:51,272 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:51,272 INFO  L93              Difference]: Finished difference Result 8350 states and 10198 transitions.
[2020-05-31 01:08:51,272 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 01:08:51,273 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8350 states and 10198 transitions.
[2020-05-31 01:08:51,291 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 01:08:51,312 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8350 states to 8350 states and 10198 transitions.
[2020-05-31 01:08:51,312 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-05-31 01:08:51,312 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-05-31 01:08:51,312 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8350 states and 10198 transitions.
[2020-05-31 01:08:51,317 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:51,318 INFO  L728         BuchiCegarLoop]: Abstraction has 8350 states and 10198 transitions.
[2020-05-31 01:08:51,320 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8350 states and 10198 transitions.
[2020-05-31 01:08:51,360 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8350 to 8284.
[2020-05-31 01:08:51,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8284 states.
[2020-05-31 01:08:51,373 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8284 states to 8284 states and 10124 transitions.
[2020-05-31 01:08:51,373 INFO  L751         BuchiCegarLoop]: Abstraction has 8284 states and 10124 transitions.
[2020-05-31 01:08:51,373 INFO  L631         BuchiCegarLoop]: Abstraction has 8284 states and 10124 transitions.
[2020-05-31 01:08:51,373 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-31 01:08:51,373 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8284 states and 10124 transitions.
[2020-05-31 01:08:51,381 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-31 01:08:51,381 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:51,381 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:51,382 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:51,382 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND TRUE   DType[to] == Ownable
[L1854]                    assume amount == 0;
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND TRUE   choice == 6
[L2504]              gas := gas - 21000;
[L2505]  COND TRUE   gas >= 0
[L2507]              assume msgvalue_MSG == 0;
[L2508]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2508]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:51,385 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:51,385 INFO  L82        PathProgramCache]: Analyzing trace with hash 1329985485, now seen corresponding path program 1 times
[2020-05-31 01:08:51,385 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:51,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:51,471 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-05-31 01:08:51,472 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:51,472 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-31 01:08:51,472 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:51,472 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-31 01:08:51,472 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-31 01:08:51,472 INFO  L87              Difference]: Start difference. First operand 8284 states and 10124 transitions. cyclomatic complexity: 1879 Second operand 14 states.
[2020-05-31 01:08:52,203 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:52,203 INFO  L93              Difference]: Finished difference Result 9990 states and 12371 transitions.
[2020-05-31 01:08:52,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 01:08:52,204 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9990 states and 12371 transitions.
[2020-05-31 01:08:52,229 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-31 01:08:52,259 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9990 states to 9990 states and 12371 transitions.
[2020-05-31 01:08:52,259 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 991
[2020-05-31 01:08:52,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 991
[2020-05-31 01:08:52,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9990 states and 12371 transitions.
[2020-05-31 01:08:52,265 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:52,265 INFO  L728         BuchiCegarLoop]: Abstraction has 9990 states and 12371 transitions.
[2020-05-31 01:08:52,268 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9990 states and 12371 transitions.
[2020-05-31 01:08:52,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9990 to 9837.
[2020-05-31 01:08:52,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9837 states.
[2020-05-31 01:08:52,333 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9837 states to 9837 states and 12191 transitions.
[2020-05-31 01:08:52,333 INFO  L751         BuchiCegarLoop]: Abstraction has 9837 states and 12191 transitions.
[2020-05-31 01:08:52,333 INFO  L631         BuchiCegarLoop]: Abstraction has 9837 states and 12191 transitions.
[2020-05-31 01:08:52,334 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-31 01:08:52,334 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9837 states and 12191 transitions.
[2020-05-31 01:08:52,343 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-31 01:08:52,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:52,343 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:52,344 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:52,344 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND TRUE   choice == 6
[L2504]              gas := gas - 21000;
[L2505]  COND TRUE   gas >= 0
[L2507]              assume msgvalue_MSG == 0;
[L2508]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2508]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:52,348 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:52,348 INFO  L82        PathProgramCache]: Analyzing trace with hash 928189218, now seen corresponding path program 1 times
[2020-05-31 01:08:52,348 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:52,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:52,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 96 backedges. 4 proven. 12 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-05-31 01:08:52,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:52,460 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-31 01:08:52,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-31 01:08:52,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-31 01:08:52,460 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-31 01:08:52,460 INFO  L87              Difference]: Start difference. First operand 9837 states and 12191 transitions. cyclomatic complexity: 2399 Second operand 10 states.
[2020-05-31 01:08:52,927 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:52,927 INFO  L93              Difference]: Finished difference Result 11745 states and 14957 transitions.
[2020-05-31 01:08:52,927 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-31 01:08:52,927 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11745 states and 14957 transitions.
[2020-05-31 01:08:52,959 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 24
[2020-05-31 01:08:53,001 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11745 states to 11499 states and 14630 transitions.
[2020-05-31 01:08:53,002 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1143
[2020-05-31 01:08:53,002 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1143
[2020-05-31 01:08:53,002 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11499 states and 14630 transitions.
[2020-05-31 01:08:53,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:53,012 INFO  L728         BuchiCegarLoop]: Abstraction has 11499 states and 14630 transitions.
[2020-05-31 01:08:53,017 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11499 states and 14630 transitions.
[2020-05-31 01:08:53,081 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11499 to 9895.
[2020-05-31 01:08:53,081 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9895 states.
[2020-05-31 01:08:53,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9895 states to 9895 states and 11891 transitions.
[2020-05-31 01:08:53,096 INFO  L751         BuchiCegarLoop]: Abstraction has 9895 states and 11891 transitions.
[2020-05-31 01:08:53,096 INFO  L631         BuchiCegarLoop]: Abstraction has 9895 states and 11891 transitions.
[2020-05-31 01:08:53,097 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-31 01:08:53,097 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9895 states and 11891 transitions.
[2020-05-31 01:08:53,107 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-31 01:08:53,107 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:53,107 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:53,108 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:53,108 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND FALSE  !(choice == 8)
[L2493]  COND FALSE  !(choice == 7)
[L2502]  COND FALSE  !(choice == 6)
[L2511]  COND FALSE  !(choice == 5)
[L2520]  COND FALSE  !(choice == 4)
[L2529]  COND TRUE   choice == 3
[L2531]              gas := gas - 21000;
[L2532]  COND TRUE   gas >= 0
[L2534]              assume msgvalue_MSG == 0;
[L2535]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:53,112 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:53,112 INFO  L82        PathProgramCache]: Analyzing trace with hash 215236687, now seen corresponding path program 1 times
[2020-05-31 01:08:53,112 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:53,131 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:53,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:53,238 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:53,238 INFO  L82        PathProgramCache]: Analyzing trace with hash 242200269, now seen corresponding path program 1 times
[2020-05-31 01:08:53,239 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:53,244 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:53,250 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:53,261 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:53,261 INFO  L82        PathProgramCache]: Analyzing trace with hash -1063636069, now seen corresponding path program 1 times
[2020-05-31 01:08:53,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:53,280 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-31 01:08:53,379 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-05-31 01:08:53,379 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-31 01:08:53,379 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-31 01:08:53,380 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-31 01:08:53,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-31 01:08:53,380 INFO  L87              Difference]: Start difference. First operand 9895 states and 11891 transitions. cyclomatic complexity: 2041 Second operand 11 states.
[2020-05-31 01:08:54,632 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-31 01:08:54,632 INFO  L93              Difference]: Finished difference Result 11907 states and 14653 transitions.
[2020-05-31 01:08:54,632 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-31 01:08:54,632 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11907 states and 14653 transitions.
[2020-05-31 01:08:54,674 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-31 01:08:54,714 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11907 states to 11865 states and 14605 transitions.
[2020-05-31 01:08:54,714 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1084
[2020-05-31 01:08:54,715 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1084
[2020-05-31 01:08:54,715 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11865 states and 14605 transitions.
[2020-05-31 01:08:54,724 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-31 01:08:54,724 INFO  L728         BuchiCegarLoop]: Abstraction has 11865 states and 14605 transitions.
[2020-05-31 01:08:54,729 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11865 states and 14605 transitions.
[2020-05-31 01:08:54,792 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11865 to 11832.
[2020-05-31 01:08:54,792 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11832 states.
[2020-05-31 01:08:54,811 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11832 states to 11832 states and 14566 transitions.
[2020-05-31 01:08:54,811 INFO  L751         BuchiCegarLoop]: Abstraction has 11832 states and 14566 transitions.
[2020-05-31 01:08:54,811 INFO  L631         BuchiCegarLoop]: Abstraction has 11832 states and 14566 transitions.
[2020-05-31 01:08:54,811 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-31 01:08:54,811 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11832 states and 14566 transitions.
[2020-05-31 01:08:54,827 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-31 01:08:54,827 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-31 01:08:54,827 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-31 01:08:54,828 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-31 01:08:54,828 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2568]                    assume null == 0;
[L2569]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2569]        RET         call this := FreshRefGenerator__success();
[L2570]                    assume now >= 0;
[L2571]                    assume DType[this] == EscrowVault;
[L2572]                    gas := gas - 53000;
[L2573]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2573]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2574]                    assume !revert && gas >= 0;
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND TRUE   choice == 6
[L2504]                    gas := gas - 21000;
[L2505]        COND TRUE   gas >= 0
[L2507]                    assume msgvalue_MSG == 0;
[L2508]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2508]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND TRUE   choice == 7
[L2495]                    gas := gas - 21000;
[L2496]        COND TRUE   gas >= 0
[L2498]                    assume msgvalue_MSG >= 0;
[L2499]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND TRUE   choice == 5
[L2513]                    gas := gas - 21000;
[L2514]        COND TRUE   gas >= 0
[L2516]                    assume msgvalue_MSG == 0;
[L2517]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2517]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2577]        RET         call CorralChoice_EscrowVault(this);
[L2577]        CALL        call CorralChoice_EscrowVault(this);
[L2464]                    havoc msgsender_MSG;
[L2465]                    havoc msgvalue_MSG;
[L2466]                    havoc choice;
[L2467]                    havoc newOwner_s150;
[L2468]                    havoc _superOwner_s224;
[L2469]                    havoc _beneficiary_s224;
[L2470]                    havoc investor_s256;
[L2471]                    havoc _amount_s320;
[L2472]                    havoc investor_s431;
[L2473]                    havoc tmpNow;
[L2474]                    havoc gas;
[L2475]                    assume gas > 4000000 && gas <= 8000000;
[L2476]                    tmpNow := now;
[L2477]                    havoc now;
[L2478]                    assume now > tmpNow;
[L2479]                    assume msgsender_MSG != null;
[L2480]                    assume DType[msgsender_MSG] != SafeMath;
[L2481]                    assume DType[msgsender_MSG] != Ownable;
[L2482]                    assume DType[msgsender_MSG] != EscrowVault;
[L2483]                    Alloc[msgsender_MSG] := true;
[L2484]        COND FALSE  !(choice == 8)
[L2493]        COND FALSE  !(choice == 7)
[L2502]        COND FALSE  !(choice == 6)
[L2511]        COND FALSE  !(choice == 5)
[L2520]        COND FALSE  !(choice == 4)
[L2529]        COND TRUE   choice == 3
[L2531]                    gas := gas - 21000;
[L2532]        COND TRUE   gas >= 0
[L2534]                    assume msgvalue_MSG == 0;
[L2535]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]                    havoc __exception;
[L2282]        COND FALSE  !(__exception)
[L2308]        COND TRUE   Balance[from] >= amount
[L2310]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]                    assume Balance[from] >= amount;
[L2051]                    Balance[from] := Balance[from] - amount;
[L2052]                    Balance[to] := Balance[to] + amount;
[L2053]        COND FALSE  !(choice == 0)
[L2059]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2310]        RET         call FallbackDispatch__success(from, to, amount);
[L2311]                    success := true;
[L2318]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2535]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2577]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2577]  CALL        call CorralChoice_EscrowVault(this);
[L2464]              havoc msgsender_MSG;
[L2465]              havoc msgvalue_MSG;
[L2466]              havoc choice;
[L2467]              havoc newOwner_s150;
[L2468]              havoc _superOwner_s224;
[L2469]              havoc _beneficiary_s224;
[L2470]              havoc investor_s256;
[L2471]              havoc _amount_s320;
[L2472]              havoc investor_s431;
[L2473]              havoc tmpNow;
[L2474]              havoc gas;
[L2475]              assume gas > 4000000 && gas <= 8000000;
[L2476]              tmpNow := now;
[L2477]              havoc now;
[L2478]              assume now > tmpNow;
[L2479]              assume msgsender_MSG != null;
[L2480]              assume DType[msgsender_MSG] != SafeMath;
[L2481]              assume DType[msgsender_MSG] != Ownable;
[L2482]              assume DType[msgsender_MSG] != EscrowVault;
[L2483]              Alloc[msgsender_MSG] := true;
[L2484]  COND TRUE   choice == 8
[L2486]              gas := gas - 21000;
[L2487]  COND TRUE   gas >= 0
[L2489]              assume msgvalue_MSG == 0;
[L2490]  CALL        call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L202]               havoc __exception;
[L203]               revert := false;
[L204]   COND FALSE  !(__exception)
[L224]   CALL        call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L1149]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1149]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1150]  COND FALSE  !(revert)
[L1155]              gas := gas - 88;
[L1156]              __var_1 := null;
[L1157]  COND FALSE  !(!(newOwner_s150 != null))
[L1163]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L1164]              gas := gas - 40534;
[L1165]              owner_Ownable[this] := newOwner_s150;
[L224]   RET         call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L225]               assume !revert && gas >= 0;
[L2490]  RET         call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L2577]  RET         call CorralChoice_EscrowVault(this);

[2020-05-31 01:08:54,831 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:54,831 INFO  L82        PathProgramCache]: Analyzing trace with hash 215236687, now seen corresponding path program 2 times
[2020-05-31 01:08:54,831 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:54,851 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:54,873 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:54,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:54,918 INFO  L82        PathProgramCache]: Analyzing trace with hash -1963977770, now seen corresponding path program 1 times
[2020-05-31 01:08:54,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:54,921 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:54,923 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:54,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-31 01:08:54,927 INFO  L82        PathProgramCache]: Analyzing trace with hash 1520492360, now seen corresponding path program 1 times
[2020-05-31 01:08:54,927 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-31 01:08:54,946 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:08:54,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 113 to 223
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-05-31 01:08:55,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 71 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-05-31 01:08:56,102 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 161
[2020-05-31 01:08:56,283 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 196
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-31 01:08:56,648 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 201
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-31 01:08:57,122 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 194
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
[2020-05-31 01:08:57,595 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification that was a NOOP. DAG size: 219
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
[2020-05-31 01:08:57,724 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 174
[2020-05-31 01:08:57,979 WARN  L188               SmtUtils]: Spent 253.00 ms on a formula simplification. DAG size of input: 219 DAG size of output: 206
Garbage collection #1: 79 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
[2020-05-31 01:08:58,274 WARN  L188               SmtUtils]: Spent 121.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 199
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-31 01:08:58,777 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 208
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #6: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-31 01:08:59,132 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 202
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-05-31 01:09:01,871 WARN  L188               SmtUtils]: Spent 2.36 s on a formula simplification. DAG size of input: 804 DAG size of output: 757
Garbage collection #1: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #2: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #3: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #4: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #5: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #6: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #7: 21023 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21023 to 42043
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-31 01:09:02,009 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 216
[2020-05-31 01:09:02,208 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 283
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-31 01:09:02,703 WARN  L188               SmtUtils]: Spent 392.00 ms on a formula simplification. DAG size of input: 287 DAG size of output: 284
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-31 01:09:02,900 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification that was a NOOP. DAG size: 276
[2020-05-31 01:09:02,923 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:09:02,968 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-31 01:09:02,977 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 31.05 01:09:02 BasicIcfg
[2020-05-31 01:09:02,977 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-31 01:09:02,977 INFO  L168              Benchmark]: Toolchain (without parser) took 61030.53 ms. Allocated memory was 514.9 MB in the beginning and 2.7 GB in the end (delta: 2.2 GB). Free memory was 460.2 MB in the beginning and 2.5 GB in the end (delta: -2.1 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,978 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,978 INFO  L168              Benchmark]: Boogie Preprocessor took 64.84 ms. Allocated memory is still 514.9 MB. Free memory was 458.8 MB in the beginning and 453.4 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,979 INFO  L168              Benchmark]: UtopiaSpecLang took 40.94 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,979 INFO  L168              Benchmark]: Boogie Printer took 10.57 ms. Allocated memory is still 514.9 MB. Free memory was 449.3 MB in the beginning and 448.0 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,979 INFO  L168              Benchmark]: RCFGBuilder took 424.86 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 391.4 MB in the end (delta: 56.6 MB). Peak memory consumption was 56.6 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,979 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.87 ms. Allocated memory is still 514.9 MB. Free memory was 391.4 MB in the beginning and 386.9 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,980 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1873.83 ms. Allocated memory was 514.9 MB in the beginning and 744.5 MB in the end (delta: 229.6 MB). Free memory was 386.9 MB in the beginning and 439.0 MB in the end (delta: -52.1 MB). Peak memory consumption was 177.5 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,980 INFO  L168              Benchmark]: BlockEncodingV2 took 173.24 ms. Allocated memory is still 744.5 MB. Free memory was 439.0 MB in the beginning and 361.9 MB in the end (delta: 77.1 MB). Peak memory consumption was 77.1 MB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,980 INFO  L168              Benchmark]: BuchiAutomizer took 58400.47 ms. Allocated memory was 744.5 MB in the beginning and 2.7 GB in the end (delta: 2.0 GB). Free memory was 361.9 MB in the beginning and 2.5 GB in the end (delta: -2.2 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-05-31 01:09:02,984 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4798 locations, 12530 edges
  - StatisticsResult: Encoded RCFG
    4734 locations, 12291 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 64.84 ms. Allocated memory is still 514.9 MB. Free memory was 458.8 MB in the beginning and 453.4 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 40.94 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.3 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 10.57 ms. Allocated memory is still 514.9 MB. Free memory was 449.3 MB in the beginning and 448.0 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 424.86 ms. Allocated memory is still 514.9 MB. Free memory was 448.0 MB in the beginning and 391.4 MB in the end (delta: 56.6 MB). Peak memory consumption was 56.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.87 ms. Allocated memory is still 514.9 MB. Free memory was 391.4 MB in the beginning and 386.9 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1873.83 ms. Allocated memory was 514.9 MB in the beginning and 744.5 MB in the end (delta: 229.6 MB). Free memory was 386.9 MB in the beginning and 439.0 MB in the end (delta: -52.1 MB). Peak memory consumption was 177.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 173.24 ms. Allocated memory is still 744.5 MB. Free memory was 439.0 MB in the beginning and 361.9 MB in the end (delta: 77.1 MB). Peak memory consumption was 77.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 58400.47 ms. Allocated memory was 744.5 MB in the beginning and 2.7 GB in the end (delta: 2.0 GB). Free memory was 361.9 MB in the beginning and 2.5 GB in the end (delta: -2.2 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    1020 locations, 1325 edges
  - StatisticsResult: BuchiProgram size
    4798 locations, 12530 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 20 terminating modules (20 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.20 modules have a trivial ranking function, the largest among these consists of 47 locations. The remainder module has 11832 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 58.3s and 21 iterations.  TraceHistogramMax:4. Analysis of lassos took 11.1s. Construction of modules took 33.0s. BÃ¼chi inclusion checks took 11.9s. Highest rank in rank-based complementation 0. Minimization of det autom 20. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 20 MinimizatonAttempts, 5520 StatesRemovedByMinimization, 16 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 11832 states and ocurred in iteration 20.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 77849 SDtfs, 112406 SDslu, 246815 SDs, 0 SdLazy, 508351 SolverSat, 20575 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 33.0s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979018) = (new EscrowVault).value(3979013)({from : 3979022, _superOwner : 3979022, _beneficiary : 3979024});
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND FALSE  !(revert)
[L1299]  CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]              assume msgsender_MSG != null;
[L1225]              Balance[this] := 0;
[L1226]  CALL        call __var_4 := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L1226]  RET         call __var_4 := FreshRefGenerator__success();
[L1227]  COND FALSE  !(revert)
[L1232]              deposited_EscrowVault[this] := __var_4;
[L1233]              M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]              sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]              beneficiary_EscrowVault[this] := null;
[L1236]              superOwner_EscrowVault[this] := null;
[L1237]              __var_2 := null;
[L1238]  COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]              __var_3 := null;
[L1245]  COND FALSE  !(!(_superOwner_s224 != null))
[L1251]              beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]              superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]              state_EscrowVault[this] := 0;
[L1299]  RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]  COND FALSE  !(revert)
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2573]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
EscrowVault(3979018).setGoalReached.gas(3979002)({from : 3979022});
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2508]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
EscrowVault(3979018).deposit.gas(3979003).value(7)({from : 3979022, investor : 3979009});
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]                    gas := gas - 1932;
[L2339]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2499]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
EscrowVault(3979018).withdraw.gas(3979004)({from : 3979022, _amount : 6});
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND TRUE   gas > 2300
[L1520]              gas := 2300;
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2517]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
EscrowVault(3979018).close.gas(3979005)({from : 3979022});
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2281]              havoc __exception;
[L2282]  COND FALSE  !(__exception)
[L2308]  COND TRUE   Balance[from] >= amount
[L2310]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2050]              assume Balance[from] >= amount;
[L2051]              Balance[from] := Balance[from] - amount;
[L2052]              Balance[to] := Balance[to] + amount;
[L2053]  COND FALSE  !(choice == 0)
[L2059]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2310]  RET         call FallbackDispatch__success(from, to, amount);
[L2311]              success := true;
[L2318]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2535]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);

Loop:
Ownable(3979018).transferOwnership.gas(3979006)({from : 3979022, newOwner : 3979019});
[L202]               havoc __exception;
[L203]               revert := false;
[L204]   COND FALSE  !(__exception)
[L224]   CALL        call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L1149]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2338]              gas := gas - 1932;
[L2339]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1149]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1150]  COND FALSE  !(revert)
[L1155]              gas := gas - 88;
[L1156]              __var_1 := null;
[L1157]  COND FALSE  !(!(newOwner_s150 != null))
[L1163]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L1164]              gas := gas - 40534;
[L1165]              owner_Ownable[this] := newOwner_s150;
[L224]   RET         call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L225]               assume !revert && gas >= 0;
[L2490]  RET         call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
