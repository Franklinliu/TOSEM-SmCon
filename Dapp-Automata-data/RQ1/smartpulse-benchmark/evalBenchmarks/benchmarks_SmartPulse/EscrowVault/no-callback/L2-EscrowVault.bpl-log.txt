This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 23:35:53,907 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 23:35:53,907 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 23:35:53,918 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 23:35:53,918 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 23:35:53,919 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 23:35:53,920 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 23:35:53,922 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 23:35:53,924 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 23:35:53,925 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 23:35:53,927 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 23:35:53,927 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 23:35:53,928 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 23:35:53,929 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 23:35:53,931 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 23:35:53,932 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 23:35:53,933 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 23:35:53,934 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 23:35:53,936 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 23:35:53,937 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 23:35:53,938 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 23:35:53,939 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 23:35:53,941 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 23:35:53,941 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 23:35:53,941 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 23:35:53,942 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 23:35:53,943 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 23:35:53,944 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 23:35:53,944 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 23:35:53,944 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 23:35:53,944 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 23:35:53,945 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 23:35:53,946 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 23:35:53,947 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 23:35:53,948 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 23:35:53,949 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 23:35:53,949 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 23:35:53,950 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 23:35:53,950 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 23:35:53,950 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 23:35:53,951 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 23:35:53,952 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 23:35:53,952 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 23:35:53,962 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 23:35:53,962 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 23:35:53,963 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 23:35:53,963 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 23:35:53,963 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 23:35:53,963 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 23:35:53,963 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 23:35:53,963 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 23:35:53,963 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 23:35:53,963 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 23:35:53,964 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 23:35:53,964 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 23:35:53,965 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 23:35:53,965 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 23:35:53,965 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 23:35:53,965 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 23:35:53,965 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 23:35:53,965 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 23:35:53,985 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 23:35:53,996 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 23:35:53,998 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 23:35:53,999 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 23:35:53,999 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 23:35:54,001 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/no-callback/L2-EscrowVault.bpl
[2020-05-30 23:35:54,001 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/no-callback/L2-EscrowVault.bpl'
[2020-05-30 23:35:54,048 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 23:35:54,050 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 23:35:54,050 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 23:35:54,050 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 23:35:54,050 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 23:35:54,064 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,066 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,088 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,089 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,100 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,104 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,108 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,114 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 23:35:54,115 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 23:35:54,115 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 23:35:54,117 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 23:35:54,119 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/1) ...
[2020-05-30 23:35:54,128 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 23:35:54,134 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 23:35:54,139 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 23:35:54,141 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_deposit_EscrowVault_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_deposit_EscrowVault_2_0,GLOBAL]]]
[2020-05-30 23:35:54,142 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 23:35:54,142 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_send__success0) )
[2020-05-30 23:35:54,142 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 23:35:54,142 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 23:35:54,143 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 23:35:54,145 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_EscrowVault[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_EscrowVault,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,close_EscrowVault>]]]]
[2020-05-30 23:35:54,147 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 23:35:54,147 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_deposit_EscrowVault0) ) && ( <>AP(success_close_EscrowVault0) ) )
Executed UtopiaSpecLang
[2020-05-30 23:35:54,152 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 11:35:54 PropertyContainer
[2020-05-30 23:35:54,152 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 23:35:54,152 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 23:35:54,153 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 23:35:54,153 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 23:35:54,153 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/2) ...
[2020-05-30 23:35:54,154 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 23:35:54,154 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 23:35:54,162 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 11:35:54" (2/2) ...
[2020-05-30 23:35:54,162 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 23:35:54,163 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 23:35:54,163 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 23:35:54,163 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 23:35:54,164 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/2) ...
[2020-05-30 23:35:54,205 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 23:35:54,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-30 23:35:54,205 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-30 23:35:54,205 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-30 23:35:54,205 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__success
[2020-05-30 23:35:54,205 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__success
[2020-05-30 23:35:54,206 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-30 23:35:54,206 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-30 23:35:54,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 23:35:54,206 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 23:35:54,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 23:35:54,206 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 23:35:54,206 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault
[2020-05-30 23:35:54,207 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault
[2020-05-30 23:35:54,207 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault
[2020-05-30 23:35:54,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault
[2020-05-30 23:35:54,208 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 23:35:54,208 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EscrowVault
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__fail
[2020-05-30 23:35:54,209 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__success
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__fail
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__success
[2020-05-30 23:35:54,210 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__fail
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__success
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__fail
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__success
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__fail
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__success
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__fail
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__success
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__fail
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__success
[2020-05-30 23:35:54,211 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__fail
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__success
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__fail
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 23:35:54,212 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 23:35:54,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 23:35:54,212 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__fail
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__fail
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-30 23:35:54,213 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__fail
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__success
[2020-05-30 23:35:54,214 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__fail
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__success
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__fail
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__success
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__fail
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__success
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__fail
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__success
[2020-05-30 23:35:54,215 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__fail
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__success
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__fail
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__success
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__fail
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__success
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 23:35:54,216 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-30 23:35:54,217 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 23:35:54,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 23:35:54,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EscrowVault
[2020-05-30 23:35:54,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 23:35:54,218 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 23:35:54,218 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 23:35:54,351 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 23:35:54,363 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 23:35:54,493 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 23:35:54,556 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 23:35:54,556 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-05-30 23:35:54,557 INFO  L202        PluginConnector]: Adding new model L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 11:35:54 BoogieIcfgContainer
[2020-05-30 23:35:54,557 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 11:35:54" (2/2) ...
[2020-05-30 23:35:54,557 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 23:35:54,558 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7aa92156 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 11:35:54, skipping insertion in model container
[2020-05-30 23:35:54,558 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 23:35:54,559 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 23:35:54,559 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 23:35:54,561 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 23:35:54,561 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/3) ...
[2020-05-30 23:35:54,561 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6786d2fe and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 11:35:54, skipping insertion in model container
[2020-05-30 23:35:54,561 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 11:35:54" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( <>c ) )  (exit command is null, workingDir is null)
[2020-05-30 23:35:54,596 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 11:35:54 NWAContainer
[2020-05-30 23:35:54,597 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 23:35:54,597 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 23:35:54,597 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 23:35:54,598 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 23:35:54,598 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 11:35:54" (3/4) ...
[2020-05-30 23:35:54,599 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5c57456e and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 11:35:54, skipping insertion in model container
[2020-05-30 23:35:54,599 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 11:35:54" (4/4) ...
[2020-05-30 23:35:54,602 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-30 23:35:54,604 INFO  L110   BuchiProductObserver]: Initial RCFG 880 locations, 1085 edges
[2020-05-30 23:35:54,604 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 23:35:54,613 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 23:35:56,336 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 23:35:56,345 INFO  L110   BuchiProductObserver]: BuchiProgram size 4094 locations, 10262 edges
[2020-05-30 23:35:56,346 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 11:35:56 BoogieIcfgContainer
[2020-05-30 23:35:56,346 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 23:35:56,346 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 23:35:56,346 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 23:35:56,347 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 23:35:56,348 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 11:35:56" (1/1) ...
[2020-05-30 23:35:56,439 INFO  L313           BlockEncoder]: Initial Icfg 4094 locations, 10262 edges
[2020-05-30 23:35:56,439 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 23:35:56,440 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 23:35:56,440 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 23:35:56,440 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 23:35:56,454 INFO  L70    emoveInfeasibleEdges]: Removed 145 edges and 20 locations because of local infeasibility
[2020-05-30 23:35:56,462 INFO  L70        RemoveSinkStates]: Removed 9 edges and 4 locations by removing sink states
[2020-05-30 23:35:56,475 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 23:35:56,480 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 23:35:56,485 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 23:35:56,485 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 23:35:56,489 INFO  L313           BlockEncoder]: Encoded RCFG 4030 locations, 10023 edges
[2020-05-30 23:35:56,489 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 11:35:56 BasicIcfg
[2020-05-30 23:35:56,489 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 23:35:56,490 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 23:35:56,490 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 23:35:56,492 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 23:35:56,492 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,492 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 11:35:54" (1/6) ...
[2020-05-30 23:35:56,493 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e5df536 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 11:35:56, skipping insertion in model container
[2020-05-30 23:35:56,494 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,494 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 11:35:54" (2/6) ...
[2020-05-30 23:35:56,494 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e5df536 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 11:35:56, skipping insertion in model container
[2020-05-30 23:35:56,494 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,494 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 11:35:54" (3/6) ...
[2020-05-30 23:35:56,494 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e5df536 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 11:35:56, skipping insertion in model container
[2020-05-30 23:35:56,494 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,494 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 11:35:54" (4/6) ...
[2020-05-30 23:35:56,495 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e5df536 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 11:35:56, skipping insertion in model container
[2020-05-30 23:35:56,495 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,495 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 11:35:56" (5/6) ...
[2020-05-30 23:35:56,495 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5e5df536 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 11:35:56, skipping insertion in model container
[2020-05-30 23:35:56,495 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 23:35:56,495 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 11:35:56" (6/6) ...
[2020-05-30 23:35:56,496 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EscrowVault.bpl_BEv2
[2020-05-30 23:35:56,528 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 23:35:56,528 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 23:35:56,529 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 23:35:56,529 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 23:35:56,529 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 23:35:56,529 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 23:35:56,529 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 23:35:56,529 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 23:35:56,529 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 23:35:56,567 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4030 states.
[2020-05-30 23:35:56,641 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:56,641 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:56,641 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:56,650 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:56,650 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:56,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 23:35:56,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4030 states.
[2020-05-30 23:35:56,677 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:56,677 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:56,677 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:56,679 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:56,679 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2250]              assume null == 0;
[L2251]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2251]  RET         call this := FreshRefGenerator__success();
[L2252]              assume now >= 0;
[L2253]              assume DType[this] == EscrowVault;
[L2254]              gas := gas - 53000;
[L2255]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2255]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]              assume !revert && gas >= 0;

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND FALSE  !(gas >= 0)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:56,696 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:56,696 INFO  L82        PathProgramCache]: Analyzing trace with hash -405022554, now seen corresponding path program 1 times
[2020-05-30 23:35:56,701 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:56,719 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:56,769 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 23:35:56,771 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:56,771 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 23:35:56,774 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:56,972 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 23:35:56,973 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 23:35:56,974 INFO  L87              Difference]: Start difference. First operand 4030 states. Second operand 3 states.
[2020-05-30 23:35:57,349 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:57,350 INFO  L93              Difference]: Finished difference Result 3348 states and 5475 transitions.
[2020-05-30 23:35:57,350 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 23:35:57,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3348 states and 5475 transitions.
[2020-05-30 23:35:57,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:57,418 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3348 states to 3348 states and 5475 transitions.
[2020-05-30 23:35:57,419 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-30 23:35:57,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 535
[2020-05-30 23:35:57,423 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3348 states and 5475 transitions.
[2020-05-30 23:35:57,436 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:35:57,436 INFO  L728         BuchiCegarLoop]: Abstraction has 3348 states and 5475 transitions.
[2020-05-30 23:35:57,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3348 states and 5475 transitions.
[2020-05-30 23:35:57,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3348 to 3348.
[2020-05-30 23:35:57,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3348 states.
[2020-05-30 23:35:57,522 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3348 states to 3348 states and 5475 transitions.
[2020-05-30 23:35:57,523 INFO  L751         BuchiCegarLoop]: Abstraction has 3348 states and 5475 transitions.
[2020-05-30 23:35:57,523 INFO  L631         BuchiCegarLoop]: Abstraction has 3348 states and 5475 transitions.
[2020-05-30 23:35:57,523 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 23:35:57,523 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3348 states and 5475 transitions.
[2020-05-30 23:35:57,532 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:57,532 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:57,532 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:57,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:57,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2250]              assume null == 0;
[L2251]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2251]  RET         call this := FreshRefGenerator__success();
[L2252]              assume now >= 0;
[L2253]              assume DType[this] == EscrowVault;
[L2254]              gas := gas - 53000;
[L2255]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2255]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]              assume !revert && gas >= 0;
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:57,539 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:57,539 INFO  L82        PathProgramCache]: Analyzing trace with hash 1523551820, now seen corresponding path program 1 times
[2020-05-30 23:35:57,540 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:57,551 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:57,565 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 23:35:57,566 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:57,566 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 23:35:57,567 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:57,567 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 23:35:57,567 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 23:35:57,568 INFO  L87              Difference]: Start difference. First operand 3348 states and 5475 transitions. cyclomatic complexity: 2131 Second operand 3 states.
[2020-05-30 23:35:57,701 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:57,701 INFO  L93              Difference]: Finished difference Result 3211 states and 3665 transitions.
[2020-05-30 23:35:57,701 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 23:35:57,702 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3211 states and 3665 transitions.
[2020-05-30 23:35:57,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:57,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3211 states to 3211 states and 3665 transitions.
[2020-05-30 23:35:57,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 535
[2020-05-30 23:35:57,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 535
[2020-05-30 23:35:57,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3211 states and 3665 transitions.
[2020-05-30 23:35:57,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:35:57,727 INFO  L728         BuchiCegarLoop]: Abstraction has 3211 states and 3665 transitions.
[2020-05-30 23:35:57,731 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3211 states and 3665 transitions.
[2020-05-30 23:35:57,756 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3211 to 3211.
[2020-05-30 23:35:57,756 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3211 states.
[2020-05-30 23:35:57,759 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3211 states to 3211 states and 3665 transitions.
[2020-05-30 23:35:57,760 INFO  L751         BuchiCegarLoop]: Abstraction has 3211 states and 3665 transitions.
[2020-05-30 23:35:57,760 INFO  L631         BuchiCegarLoop]: Abstraction has 3211 states and 3665 transitions.
[2020-05-30 23:35:57,760 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 23:35:57,760 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3211 states and 3665 transitions.
[2020-05-30 23:35:57,767 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 23:35:57,767 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:57,767 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:57,769 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:57,770 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2250]              assume null == 0;
[L2251]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2251]  RET         call this := FreshRefGenerator__success();
[L2252]              assume now >= 0;
[L2253]              assume DType[this] == EscrowVault;
[L2254]              gas := gas - 53000;
[L2255]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2255]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]              assume !revert && gas >= 0;
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND TRUE   choice == 7
[L2177]              gas := gas - 21000;
[L2178]  COND TRUE   gas >= 0
[L2180]              assume msgvalue_MSG >= 0;
[L2181]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND TRUE   revert
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]  RET         call CorralChoice_EscrowVault(this);
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:57,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:57,775 INFO  L82        PathProgramCache]: Analyzing trace with hash -2070457043, now seen corresponding path program 1 times
[2020-05-30 23:35:57,776 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:57,786 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:57,826 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 23:35:57,826 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:57,827 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 23:35:57,827 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:57,827 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 23:35:57,827 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 23:35:57,828 INFO  L87              Difference]: Start difference. First operand 3211 states and 3665 transitions. cyclomatic complexity: 458 Second operand 3 states.
[2020-05-30 23:35:57,949 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:57,949 INFO  L93              Difference]: Finished difference Result 4049 states and 4676 transitions.
[2020-05-30 23:35:57,949 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 23:35:57,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4049 states and 4676 transitions.
[2020-05-30 23:35:57,969 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:35:57,998 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4049 states to 4049 states and 4676 transitions.
[2020-05-30 23:35:57,998 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 660
[2020-05-30 23:35:57,998 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 660
[2020-05-30 23:35:57,998 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4049 states and 4676 transitions.
[2020-05-30 23:35:58,004 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:35:58,004 INFO  L728         BuchiCegarLoop]: Abstraction has 4049 states and 4676 transitions.
[2020-05-30 23:35:58,009 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4049 states and 4676 transitions.
[2020-05-30 23:35:58,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4049 to 3694.
[2020-05-30 23:35:58,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3694 states.
[2020-05-30 23:35:58,058 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3694 states to 3694 states and 4233 transitions.
[2020-05-30 23:35:58,058 INFO  L751         BuchiCegarLoop]: Abstraction has 3694 states and 4233 transitions.
[2020-05-30 23:35:58,058 INFO  L631         BuchiCegarLoop]: Abstraction has 3694 states and 4233 transitions.
[2020-05-30 23:35:58,058 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 23:35:58,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3694 states and 4233 transitions.
[2020-05-30 23:35:58,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:35:58,065 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:58,065 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:58,067 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:58,067 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2250]              assume null == 0;
[L2251]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2251]  RET         call this := FreshRefGenerator__success();
[L2252]              assume now >= 0;
[L2253]              assume DType[this] == EscrowVault;
[L2254]              gas := gas - 53000;
[L2255]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND FALSE  !(revert)
[L1299]  CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]              assume msgsender_MSG != null;
[L1225]              Balance[this] := 0;
[L1226]  CALL        call __var_4 := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L1226]  RET         call __var_4 := FreshRefGenerator__success();
[L1227]  COND FALSE  !(revert)
[L1232]              deposited_EscrowVault[this] := __var_4;
[L1233]              M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]              sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]              beneficiary_EscrowVault[this] := null;
[L1236]              superOwner_EscrowVault[this] := null;
[L1237]              __var_2 := null;
[L1238]  COND TRUE   !(_beneficiary_s224 != null)
[L1240]              revert := true;
[L1299]  RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]  COND FALSE  !(revert)
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2255]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]              assume !revert && gas >= 0;
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND TRUE   choice == 7
[L2177]              gas := gas - 21000;
[L2178]  COND TRUE   gas >= 0
[L2180]              assume msgvalue_MSG >= 0;
[L2181]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND FALSE  !(revert)
[L1363]              gas := gas - 733;
[L1364]  COND TRUE   !(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2)
[L1366]              revert := true;
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]  RET         call CorralChoice_EscrowVault(this);
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND TRUE   !(state_EscrowVault[this] == 2)
[L1670]              revert := true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND TRUE   !(state_EscrowVault[this] == 2)
[L1670]              revert := true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:58,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:58,071 INFO  L82        PathProgramCache]: Analyzing trace with hash 1032085821, now seen corresponding path program 1 times
[2020-05-30 23:35:58,071 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:58,081 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:58,110 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 23:35:58,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:58,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 23:35:58,111 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:58,111 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 23:35:58,111 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 23:35:58,111 INFO  L87              Difference]: Start difference. First operand 3694 states and 4233 transitions. cyclomatic complexity: 543 Second operand 3 states.
[2020-05-30 23:35:58,190 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:58,190 INFO  L93              Difference]: Finished difference Result 4270 states and 4873 transitions.
[2020-05-30 23:35:58,190 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 23:35:58,190 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4270 states and 4873 transitions.
[2020-05-30 23:35:58,200 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 23:35:58,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4270 states to 3978 states and 4523 transitions.
[2020-05-30 23:35:58,216 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-05-30 23:35:58,217 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-05-30 23:35:58,217 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3978 states and 4523 transitions.
[2020-05-30 23:35:58,222 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:35:58,222 INFO  L728         BuchiCegarLoop]: Abstraction has 3978 states and 4523 transitions.
[2020-05-30 23:35:58,226 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3978 states and 4523 transitions.
[2020-05-30 23:35:58,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3978 to 3406.
[2020-05-30 23:35:58,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3406 states.
[2020-05-30 23:35:58,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3406 states to 3406 states and 3795 transitions.
[2020-05-30 23:35:58,271 INFO  L751         BuchiCegarLoop]: Abstraction has 3406 states and 3795 transitions.
[2020-05-30 23:35:58,271 INFO  L631         BuchiCegarLoop]: Abstraction has 3406 states and 3795 transitions.
[2020-05-30 23:35:58,271 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 23:35:58,271 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3406 states and 3795 transitions.
[2020-05-30 23:35:58,275 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:35:58,275 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:58,275 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:58,278 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:58,278 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND FALSE  !(Balance[from] >= amount)
[L1997]                    success := false;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:58,283 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:58,283 INFO  L82        PathProgramCache]: Analyzing trace with hash 776978049, now seen corresponding path program 1 times
[2020-05-30 23:35:58,284 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:58,298 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:58,372 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 23:35:58,372 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:58,372 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 23:35:58,373 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:58,373 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 23:35:58,373 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 23:35:58,374 INFO  L87              Difference]: Start difference. First operand 3406 states and 3795 transitions. cyclomatic complexity: 393 Second operand 10 states.
[2020-05-30 23:35:59,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:59,783 INFO  L93              Difference]: Finished difference Result 3465 states and 3884 transitions.
[2020-05-30 23:35:59,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 23:35:59,784 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3465 states and 3884 transitions.
[2020-05-30 23:35:59,790 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:35:59,801 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3465 states to 3465 states and 3884 transitions.
[2020-05-30 23:35:59,802 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 569
[2020-05-30 23:35:59,802 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 569
[2020-05-30 23:35:59,802 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3465 states and 3884 transitions.
[2020-05-30 23:35:59,806 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:35:59,806 INFO  L728         BuchiCegarLoop]: Abstraction has 3465 states and 3884 transitions.
[2020-05-30 23:35:59,809 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3465 states and 3884 transitions.
[2020-05-30 23:35:59,846 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3465 to 3391.
[2020-05-30 23:35:59,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3391 states.
[2020-05-30 23:35:59,850 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3391 states to 3391 states and 3773 transitions.
[2020-05-30 23:35:59,851 INFO  L751         BuchiCegarLoop]: Abstraction has 3391 states and 3773 transitions.
[2020-05-30 23:35:59,851 INFO  L631         BuchiCegarLoop]: Abstraction has 3391 states and 3773 transitions.
[2020-05-30 23:35:59,851 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 23:35:59,851 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3391 states and 3773 transitions.
[2020-05-30 23:35:59,855 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:35:59,855 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:35:59,855 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:35:59,858 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:35:59,858 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND FALSE  !(choice == 3)
[L2220]        COND TRUE   choice == 2
[L2222]                    gas := gas - 21000;
[L2223]        COND TRUE   gas >= 0
[L2225]                    assume msgvalue_MSG == 0;
[L2226]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L2226]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND FALSE  !(Balance[from] >= amount)
[L1997]                    success := false;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND FALSE  !(Balance[from] >= amount)
[L1997]              success := false;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:35:59,862 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:35:59,862 INFO  L82        PathProgramCache]: Analyzing trace with hash 581331231, now seen corresponding path program 1 times
[2020-05-30 23:35:59,863 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:35:59,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:35:59,940 INFO  L134       CoverageAnalysis]: Checked inductivity of 49 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-05-30 23:35:59,941 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:35:59,941 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 23:35:59,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:35:59,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 23:35:59,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 23:35:59,954 INFO  L87              Difference]: Start difference. First operand 3391 states and 3773 transitions. cyclomatic complexity: 388 Second operand 4 states.
[2020-05-30 23:35:59,979 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:35:59,979 INFO  L93              Difference]: Finished difference Result 3427 states and 3813 transitions.
[2020-05-30 23:35:59,979 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 23:35:59,979 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3427 states and 3813 transitions.
[2020-05-30 23:35:59,988 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:00,003 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3427 states to 3419 states and 3805 transitions.
[2020-05-30 23:36:00,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 568
[2020-05-30 23:36:00,004 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 568
[2020-05-30 23:36:00,004 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3419 states and 3805 transitions.
[2020-05-30 23:36:00,008 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:00,008 INFO  L728         BuchiCegarLoop]: Abstraction has 3419 states and 3805 transitions.
[2020-05-30 23:36:00,011 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3419 states and 3805 transitions.
[2020-05-30 23:36:00,039 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3419 to 3419.
[2020-05-30 23:36:00,039 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3419 states.
[2020-05-30 23:36:00,043 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3419 states to 3419 states and 3805 transitions.
[2020-05-30 23:36:00,043 INFO  L751         BuchiCegarLoop]: Abstraction has 3419 states and 3805 transitions.
[2020-05-30 23:36:00,043 INFO  L631         BuchiCegarLoop]: Abstraction has 3419 states and 3805 transitions.
[2020-05-30 23:36:00,043 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 23:36:00,043 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3419 states and 3805 transitions.
[2020-05-30 23:36:00,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:00,047 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:00,047 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:00,050 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:00,050 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:00,054 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:00,054 INFO  L82        PathProgramCache]: Analyzing trace with hash 893511083, now seen corresponding path program 1 times
[2020-05-30 23:36:00,054 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:00,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:00,151 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 23:36:00,151 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:36:00,152 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-05-30 23:36:00,152 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:00,152 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-05-30 23:36:00,152 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=12, Invalid=30, Unknown=0, NotChecked=0, Total=42
[2020-05-30 23:36:00,152 INFO  L87              Difference]: Start difference. First operand 3419 states and 3805 transitions. cyclomatic complexity: 392 Second operand 7 states.
[2020-05-30 23:36:00,467 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:00,467 INFO  L93              Difference]: Finished difference Result 3717 states and 4162 transitions.
[2020-05-30 23:36:00,467 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-05-30 23:36:00,467 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3717 states and 4162 transitions.
[2020-05-30 23:36:00,475 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 23:36:00,488 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3717 states to 3681 states and 4126 transitions.
[2020-05-30 23:36:00,488 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 616
[2020-05-30 23:36:00,488 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 616
[2020-05-30 23:36:00,488 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3681 states and 4126 transitions.
[2020-05-30 23:36:00,492 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:00,492 INFO  L728         BuchiCegarLoop]: Abstraction has 3681 states and 4126 transitions.
[2020-05-30 23:36:00,495 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3681 states and 4126 transitions.
[2020-05-30 23:36:00,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3681 to 3455.
[2020-05-30 23:36:00,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3455 states.
[2020-05-30 23:36:00,526 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3455 states to 3455 states and 3846 transitions.
[2020-05-30 23:36:00,526 INFO  L751         BuchiCegarLoop]: Abstraction has 3455 states and 3846 transitions.
[2020-05-30 23:36:00,526 INFO  L631         BuchiCegarLoop]: Abstraction has 3455 states and 3846 transitions.
[2020-05-30 23:36:00,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 23:36:00,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3455 states and 3846 transitions.
[2020-05-30 23:36:00,530 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:00,530 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:00,530 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:00,532 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:00,532 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND FALSE  !(gas >= 0)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:00,535 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:00,535 INFO  L82        PathProgramCache]: Analyzing trace with hash 777569610, now seen corresponding path program 1 times
[2020-05-30 23:36:00,536 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:00,557 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:00,913 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 23:36:00,914 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:00,914 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-30 23:36:00,914 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:00,914 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-30 23:36:00,915 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=104, Invalid=1018, Unknown=0, NotChecked=0, Total=1122
[2020-05-30 23:36:00,915 INFO  L87              Difference]: Start difference. First operand 3455 states and 3846 transitions. cyclomatic complexity: 397 Second operand 34 states.
[2020-05-30 23:36:06,685 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:06,685 INFO  L93              Difference]: Finished difference Result 5618 states and 6474 transitions.
[2020-05-30 23:36:06,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 23:36:06,686 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5618 states and 6474 transitions.
[2020-05-30 23:36:06,695 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-30 23:36:06,718 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5618 states to 5618 states and 6474 transitions.
[2020-05-30 23:36:06,718 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 679
[2020-05-30 23:36:06,719 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 679
[2020-05-30 23:36:06,719 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5618 states and 6474 transitions.
[2020-05-30 23:36:06,722 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:06,723 INFO  L728         BuchiCegarLoop]: Abstraction has 5618 states and 6474 transitions.
[2020-05-30 23:36:06,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5618 states and 6474 transitions.
[2020-05-30 23:36:06,780 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5618 to 5392.
[2020-05-30 23:36:06,780 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5392 states.
[2020-05-30 23:36:06,787 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5392 states to 5392 states and 6050 transitions.
[2020-05-30 23:36:06,787 INFO  L751         BuchiCegarLoop]: Abstraction has 5392 states and 6050 transitions.
[2020-05-30 23:36:06,787 INFO  L631         BuchiCegarLoop]: Abstraction has 5392 states and 6050 transitions.
[2020-05-30 23:36:06,787 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 23:36:06,787 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5392 states and 6050 transitions.
[2020-05-30 23:36:06,793 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-05-30 23:36:06,793 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:06,793 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:06,794 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:06,795 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND FALSE  !(choice == 3)
[L2220]        COND TRUE   choice == 2
[L2222]                    gas := gas - 21000;
[L2223]        COND TRUE   gas >= 0
[L2225]                    assume msgvalue_MSG == 0;
[L2226]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L2226]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:06,798 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:06,799 INFO  L82        PathProgramCache]: Analyzing trace with hash -1591895791, now seen corresponding path program 1 times
[2020-05-30 23:36:06,799 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:06,816 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:06,883 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 24 proven. 0 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 23:36:06,883 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:36:06,883 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-05-30 23:36:06,883 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:06,883 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 23:36:06,884 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 23:36:06,884 INFO  L87              Difference]: Start difference. First operand 5392 states and 6050 transitions. cyclomatic complexity: 679 Second operand 12 states.
[2020-05-30 23:36:07,982 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:07,983 INFO  L93              Difference]: Finished difference Result 6140 states and 7088 transitions.
[2020-05-30 23:36:07,983 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-05-30 23:36:07,983 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6140 states and 7088 transitions.
[2020-05-30 23:36:07,992 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-05-30 23:36:08,004 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6140 states to 6098 states and 7040 transitions.
[2020-05-30 23:36:08,005 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 708
[2020-05-30 23:36:08,005 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 708
[2020-05-30 23:36:08,005 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6098 states and 7040 transitions.
[2020-05-30 23:36:08,009 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:08,009 INFO  L728         BuchiCegarLoop]: Abstraction has 6098 states and 7040 transitions.
[2020-05-30 23:36:08,012 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6098 states and 7040 transitions.
[2020-05-30 23:36:08,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6098 to 6053.
[2020-05-30 23:36:08,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6053 states.
[2020-05-30 23:36:08,065 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6053 states to 6053 states and 6954 transitions.
[2020-05-30 23:36:08,066 INFO  L751         BuchiCegarLoop]: Abstraction has 6053 states and 6954 transitions.
[2020-05-30 23:36:08,066 INFO  L631         BuchiCegarLoop]: Abstraction has 6053 states and 6954 transitions.
[2020-05-30 23:36:08,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 23:36:08,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6053 states and 6954 transitions.
[2020-05-30 23:36:08,073 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-05-30 23:36:08,073 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:08,073 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:08,074 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:08,074 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND TRUE   gas >= 0
[L2171]              assume msgvalue_MSG == 0;
[L2172]  CALL        call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L202]               havoc __exception;
[L203]               revert := false;
[L204]   COND FALSE  !(__exception)
[L224]   CALL        call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L1149]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1149]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1150]  COND FALSE  !(revert)
[L1155]              gas := gas - 88;
[L1156]              __var_1 := null;
[L1157]  COND FALSE  !(!(newOwner_s150 != null))
[L1163]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L1164]              gas := gas - 40534;
[L1165]              owner_Ownable[this] := newOwner_s150;
[L224]   RET         call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L225]               assume !revert && gas >= 0;
[L2172]  RET         call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:08,079 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:08,079 INFO  L82        PathProgramCache]: Analyzing trace with hash -308326189, now seen corresponding path program 1 times
[2020-05-30 23:36:08,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:08,097 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:08,281 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 23:36:08,282 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:08,282 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-05-30 23:36:08,282 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:08,282 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-05-30 23:36:08,282 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=838, Unknown=0, NotChecked=0, Total=930
[2020-05-30 23:36:08,283 INFO  L87              Difference]: Start difference. First operand 6053 states and 6954 transitions. cyclomatic complexity: 926 Second operand 31 states.
[2020-05-30 23:36:12,469 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:12,469 INFO  L93              Difference]: Finished difference Result 6182 states and 7139 transitions.
[2020-05-30 23:36:12,470 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 61 states. 
[2020-05-30 23:36:12,470 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6182 states and 7139 transitions.
[2020-05-30 23:36:12,483 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-05-30 23:36:12,498 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6182 states to 6182 states and 7139 transitions.
[2020-05-30 23:36:12,498 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 710
[2020-05-30 23:36:12,498 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 710
[2020-05-30 23:36:12,498 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6182 states and 7139 transitions.
[2020-05-30 23:36:12,502 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:12,502 INFO  L728         BuchiCegarLoop]: Abstraction has 6182 states and 7139 transitions.
[2020-05-30 23:36:12,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6182 states and 7139 transitions.
[2020-05-30 23:36:12,539 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6182 to 6087.
[2020-05-30 23:36:12,539 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6087 states.
[2020-05-30 23:36:12,546 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6087 states to 6087 states and 6995 transitions.
[2020-05-30 23:36:12,547 INFO  L751         BuchiCegarLoop]: Abstraction has 6087 states and 6995 transitions.
[2020-05-30 23:36:12,547 INFO  L631         BuchiCegarLoop]: Abstraction has 6087 states and 6995 transitions.
[2020-05-30 23:36:12,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 23:36:12,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6087 states and 6995 transitions.
[2020-05-30 23:36:12,553 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-05-30 23:36:12,553 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:12,553 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:12,554 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:12,554 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND TRUE   __exception
[L269]                     __tmp__Balance := Balance;
[L270]                     __tmp__DType := DType;
[L271]                     __tmp__Alloc := Alloc;
[L272]                     __tmp__balance_ADDR := balance_ADDR;
[L273]                     __tmp__M_Ref_int_deposited0 := M_Ref_int_deposited0;
[L274]                     __tmp__sum_deposited0 := sum_deposited0;
[L275]                     __tmp__Length := Length;
[L276]                     __tmp__now := now;
[L277]                     __tmp__owner_Ownable := owner_Ownable;
[L278]                     __tmp__deposited_EscrowVault := deposited_EscrowVault;
[L279]                     __tmp__beneficiary_EscrowVault := beneficiary_EscrowVault;
[L280]                     __tmp__superOwner_EscrowVault := superOwner_EscrowVault;
[L281]                     __tmp__state_EscrowVault := state_EscrowVault;
[L282]         CALL        call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1268]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1101]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1081]                    assume msgsender_MSG != null;
[L1082]                    __tmp__Balance[this] := 0;
[L1083]                    __tmp__owner_Ownable[this] := null;
[L1084]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1101]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1102]        COND FALSE  !(revert)
[L1268]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1269]        COND FALSE  !(revert)
[L1274]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1180]                    assume msgsender_MSG != null;
[L1181]                    __tmp__Balance[this] := 0;
[L1182]        CALL        call __var_4 := FreshRefGenerator__fail();
[L823]                     havoc newRef;
[L824]                     assume __tmp__Alloc[newRef] == false;
[L825]                     __tmp__Alloc[newRef] := true;
[L826]                     assume newRef != null;
[L1182]        RET         call __var_4 := FreshRefGenerator__fail();
[L1183]        COND FALSE  !(revert)
[L1188]                    __tmp__deposited_EscrowVault[this] := __var_4;
[L1189]                    __tmp__M_Ref_int_deposited0[__tmp__deposited_EscrowVault[this]] := zeroRefIntArr();
[L1190]                    __tmp__sum_deposited0[__tmp__deposited_EscrowVault[this]] := 0;
[L1191]                    __tmp__beneficiary_EscrowVault[this] := null;
[L1192]                    __tmp__superOwner_EscrowVault[this] := null;
[L1193]                    __var_2 := null;
[L1194]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1200]                    __var_3 := null;
[L1201]        COND FALSE  !(!(_superOwner_s224 != null))
[L1207]                    __tmp__beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1208]                    __tmp__superOwner_EscrowVault[this] := _superOwner_s224;
[L1209]                    __tmp__state_EscrowVault[this] := 0;
[L1274]        RET         call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1275]        COND FALSE  !(revert)
[L282]         RET         call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L283]                     assume revert || gas < 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND FALSE  !(gas >= 0)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:12,556 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:12,556 INFO  L82        PathProgramCache]: Analyzing trace with hash 1648877291, now seen corresponding path program 1 times
[2020-05-30 23:36:12,557 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:12,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:12,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-05-30 23:36:12,590 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:36:12,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 23:36:12,590 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:12,590 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 23:36:12,590 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 23:36:12,591 INFO  L87              Difference]: Start difference. First operand 6087 states and 6995 transitions. cyclomatic complexity: 933 Second operand 4 states.
[2020-05-30 23:36:12,893 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:12,893 INFO  L93              Difference]: Finished difference Result 7905 states and 10156 transitions.
[2020-05-30 23:36:12,893 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 23:36:12,893 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7905 states and 10156 transitions.
[2020-05-30 23:36:12,918 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 36
[2020-05-30 23:36:12,950 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7905 states to 7836 states and 10087 transitions.
[2020-05-30 23:36:12,950 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 859
[2020-05-30 23:36:12,951 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 859
[2020-05-30 23:36:12,951 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7836 states and 10087 transitions.
[2020-05-30 23:36:12,959 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:12,959 INFO  L728         BuchiCegarLoop]: Abstraction has 7836 states and 10087 transitions.
[2020-05-30 23:36:12,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7836 states and 10087 transitions.
[2020-05-30 23:36:13,037 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7836 to 6018.
[2020-05-30 23:36:13,037 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6018 states.
[2020-05-30 23:36:13,044 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6018 states to 6018 states and 6925 transitions.
[2020-05-30 23:36:13,045 INFO  L751         BuchiCegarLoop]: Abstraction has 6018 states and 6925 transitions.
[2020-05-30 23:36:13,045 INFO  L631         BuchiCegarLoop]: Abstraction has 6018 states and 6925 transitions.
[2020-05-30 23:36:13,045 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 23:36:13,045 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6018 states and 6925 transitions.
[2020-05-30 23:36:13,051 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 12
[2020-05-30 23:36:13,051 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:13,051 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:13,052 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:13,052 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:13,056 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:13,056 INFO  L82        PathProgramCache]: Analyzing trace with hash 726130422, now seen corresponding path program 1 times
[2020-05-30 23:36:13,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:13,069 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:13,232 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-30 23:36:13,232 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:36:13,232 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-05-30 23:36:13,233 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:13,233 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-30 23:36:13,233 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=74, Invalid=628, Unknown=0, NotChecked=0, Total=702
[2020-05-30 23:36:13,234 INFO  L87              Difference]: Start difference. First operand 6018 states and 6925 transitions. cyclomatic complexity: 932 Second operand 27 states.
[2020-05-30 23:36:18,536 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:18,537 INFO  L93              Difference]: Finished difference Result 6103 states and 7026 transitions.
[2020-05-30 23:36:18,537 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-05-30 23:36:18,537 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6103 states and 7026 transitions.
[2020-05-30 23:36:18,548 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:18,559 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6103 states to 6103 states and 7026 transitions.
[2020-05-30 23:36:18,559 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 704
[2020-05-30 23:36:18,559 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 704
[2020-05-30 23:36:18,559 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6103 states and 7026 transitions.
[2020-05-30 23:36:18,562 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:18,562 INFO  L728         BuchiCegarLoop]: Abstraction has 6103 states and 7026 transitions.
[2020-05-30 23:36:18,564 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6103 states and 7026 transitions.
[2020-05-30 23:36:18,592 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6103 to 5912.
[2020-05-30 23:36:18,592 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5912 states.
[2020-05-30 23:36:18,598 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5912 states to 5912 states and 6800 transitions.
[2020-05-30 23:36:18,599 INFO  L751         BuchiCegarLoop]: Abstraction has 5912 states and 6800 transitions.
[2020-05-30 23:36:18,599 INFO  L631         BuchiCegarLoop]: Abstraction has 5912 states and 6800 transitions.
[2020-05-30 23:36:18,599 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 23:36:18,599 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5912 states and 6800 transitions.
[2020-05-30 23:36:18,604 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:18,604 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:18,604 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:18,605 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:18,606 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:18,609 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:18,609 INFO  L82        PathProgramCache]: Analyzing trace with hash 1525962919, now seen corresponding path program 1 times
[2020-05-30 23:36:18,609 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:18,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:18,752 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-30 23:36:18,752 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 23:36:18,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-05-30 23:36:18,753 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:18,753 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-30 23:36:18,753 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-05-30 23:36:18,753 INFO  L87              Difference]: Start difference. First operand 5912 states and 6800 transitions. cyclomatic complexity: 911 Second operand 24 states.
[2020-05-30 23:36:24,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:24,141 INFO  L93              Difference]: Finished difference Result 6063 states and 6954 transitions.
[2020-05-30 23:36:24,141 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-05-30 23:36:24,141 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6063 states and 6954 transitions.
[2020-05-30 23:36:24,156 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:24,170 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6063 states to 6063 states and 6954 transitions.
[2020-05-30 23:36:24,170 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 692
[2020-05-30 23:36:24,170 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 692
[2020-05-30 23:36:24,170 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6063 states and 6954 transitions.
[2020-05-30 23:36:24,174 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:24,174 INFO  L728         BuchiCegarLoop]: Abstraction has 6063 states and 6954 transitions.
[2020-05-30 23:36:24,177 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6063 states and 6954 transitions.
[2020-05-30 23:36:24,208 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6063 to 5788.
[2020-05-30 23:36:24,209 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5788 states.
[2020-05-30 23:36:24,214 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5788 states to 5788 states and 6573 transitions.
[2020-05-30 23:36:24,215 INFO  L751         BuchiCegarLoop]: Abstraction has 5788 states and 6573 transitions.
[2020-05-30 23:36:24,215 INFO  L631         BuchiCegarLoop]: Abstraction has 5788 states and 6573 transitions.
[2020-05-30 23:36:24,215 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 23:36:24,215 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5788 states and 6573 transitions.
[2020-05-30 23:36:24,220 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:24,220 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:24,220 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:24,221 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:24,221 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:24,224 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:24,224 INFO  L82        PathProgramCache]: Analyzing trace with hash -1853383053, now seen corresponding path program 1 times
[2020-05-30 23:36:24,225 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:24,235 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:24,336 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 1 proven. 23 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 23:36:24,336 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:24,336 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 23:36:24,337 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:24,337 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 23:36:24,337 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-05-30 23:36:24,337 INFO  L87              Difference]: Start difference. First operand 5788 states and 6573 transitions. cyclomatic complexity: 800 Second operand 10 states.
[2020-05-30 23:36:25,203 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:25,203 INFO  L93              Difference]: Finished difference Result 5857 states and 6660 transitions.
[2020-05-30 23:36:25,203 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 23:36:25,203 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5857 states and 6660 transitions.
[2020-05-30 23:36:25,213 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:25,223 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5857 states to 5857 states and 6660 transitions.
[2020-05-30 23:36:25,223 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 621
[2020-05-30 23:36:25,224 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 621
[2020-05-30 23:36:25,224 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5857 states and 6660 transitions.
[2020-05-30 23:36:25,226 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:25,226 INFO  L728         BuchiCegarLoop]: Abstraction has 5857 states and 6660 transitions.
[2020-05-30 23:36:25,229 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5857 states and 6660 transitions.
[2020-05-30 23:36:25,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5857 to 5797.
[2020-05-30 23:36:25,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5797 states.
[2020-05-30 23:36:25,261 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5797 states to 5797 states and 6585 transitions.
[2020-05-30 23:36:25,261 INFO  L751         BuchiCegarLoop]: Abstraction has 5797 states and 6585 transitions.
[2020-05-30 23:36:25,261 INFO  L631         BuchiCegarLoop]: Abstraction has 5797 states and 6585 transitions.
[2020-05-30 23:36:25,261 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 23:36:25,261 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5797 states and 6585 transitions.
[2020-05-30 23:36:25,267 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:25,267 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:25,267 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:25,268 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:25,268 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND FALSE  !(gas >= 0)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:25,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:25,271 INFO  L82        PathProgramCache]: Analyzing trace with hash 2146744909, now seen corresponding path program 1 times
[2020-05-30 23:36:25,271 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:25,288 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:25,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 7 proven. 96 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-05-30 23:36:25,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:25,709 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-05-30 23:36:25,709 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:25,710 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-05-30 23:36:25,710 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=138, Invalid=2024, Unknown=0, NotChecked=0, Total=2162
[2020-05-30 23:36:25,710 INFO  L87              Difference]: Start difference. First operand 5797 states and 6585 transitions. cyclomatic complexity: 803 Second operand 47 states.
[2020-05-30 23:36:37,097 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:37,098 INFO  L93              Difference]: Finished difference Result 6198 states and 7252 transitions.
[2020-05-30 23:36:37,098 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 64 states. 
[2020-05-30 23:36:37,098 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6198 states and 7252 transitions.
[2020-05-30 23:36:37,111 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:37,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6198 states to 6198 states and 7252 transitions.
[2020-05-30 23:36:37,125 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 712
[2020-05-30 23:36:37,125 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 712
[2020-05-30 23:36:37,125 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6198 states and 7252 transitions.
[2020-05-30 23:36:37,128 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:37,128 INFO  L728         BuchiCegarLoop]: Abstraction has 6198 states and 7252 transitions.
[2020-05-30 23:36:37,131 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6198 states and 7252 transitions.
[2020-05-30 23:36:37,160 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6198 to 5939.
[2020-05-30 23:36:37,160 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5939 states.
[2020-05-30 23:36:37,167 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5939 states to 5939 states and 6866 transitions.
[2020-05-30 23:36:37,167 INFO  L751         BuchiCegarLoop]: Abstraction has 5939 states and 6866 transitions.
[2020-05-30 23:36:37,167 INFO  L631         BuchiCegarLoop]: Abstraction has 5939 states and 6866 transitions.
[2020-05-30 23:36:37,167 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 23:36:37,167 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5939 states and 6866 transitions.
[2020-05-30 23:36:37,172 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:37,172 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:37,172 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:37,173 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:37,173 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND TRUE   choice == 8
[L2168]              gas := gas - 21000;
[L2169]  COND FALSE  !(gas >= 0)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:37,176 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:37,176 INFO  L82        PathProgramCache]: Analyzing trace with hash 1619218224, now seen corresponding path program 1 times
[2020-05-30 23:36:37,177 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:37,210 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:37,452 INFO  L134       CoverageAnalysis]: Checked inductivity of 151 backedges. 68 proven. 17 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-05-30 23:36:37,452 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:37,453 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 23:36:37,453 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:37,453 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 23:36:37,453 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=964, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 23:36:37,454 INFO  L87              Difference]: Start difference. First operand 5939 states and 6866 transitions. cyclomatic complexity: 952 Second operand 33 states.
[2020-05-30 23:36:45,059 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:45,059 INFO  L93              Difference]: Finished difference Result 6146 states and 7173 transitions.
[2020-05-30 23:36:45,060 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 56 states. 
[2020-05-30 23:36:45,060 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6146 states and 7173 transitions.
[2020-05-30 23:36:45,070 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:45,080 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6146 states to 6146 states and 7173 transitions.
[2020-05-30 23:36:45,080 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 700
[2020-05-30 23:36:45,081 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 700
[2020-05-30 23:36:45,081 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6146 states and 7173 transitions.
[2020-05-30 23:36:45,083 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:45,083 INFO  L728         BuchiCegarLoop]: Abstraction has 6146 states and 7173 transitions.
[2020-05-30 23:36:45,085 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6146 states and 7173 transitions.
[2020-05-30 23:36:45,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6146 to 5825.
[2020-05-30 23:36:45,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5825 states.
[2020-05-30 23:36:45,110 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5825 states to 5825 states and 6664 transitions.
[2020-05-30 23:36:45,110 INFO  L751         BuchiCegarLoop]: Abstraction has 5825 states and 6664 transitions.
[2020-05-30 23:36:45,110 INFO  L631         BuchiCegarLoop]: Abstraction has 5825 states and 6664 transitions.
[2020-05-30 23:36:45,110 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 23:36:45,110 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5825 states and 6664 transitions.
[2020-05-30 23:36:45,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:45,114 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:45,114 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:45,115 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:45,115 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND TRUE   choice == 6
[L2186]              gas := gas - 21000;
[L2187]  COND TRUE   gas >= 0
[L2189]              assume msgvalue_MSG == 0;
[L2190]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2190]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:45,119 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:45,119 INFO  L82        PathProgramCache]: Analyzing trace with hash 324968114, now seen corresponding path program 1 times
[2020-05-30 23:36:45,120 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:45,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:45,192 INFO  L134       CoverageAnalysis]: Checked inductivity of 94 backedges. 4 proven. 12 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-05-30 23:36:45,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:45,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 23:36:45,193 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:45,193 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 23:36:45,193 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-30 23:36:45,194 INFO  L87              Difference]: Start difference. First operand 5825 states and 6664 transitions. cyclomatic complexity: 858 Second operand 10 states.
[2020-05-30 23:36:45,888 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:45,888 INFO  L93              Difference]: Finished difference Result 6611 states and 7688 transitions.
[2020-05-30 23:36:45,888 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-05-30 23:36:45,888 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6611 states and 7688 transitions.
[2020-05-30 23:36:45,898 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 23:36:45,911 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6611 states to 6473 states and 7531 transitions.
[2020-05-30 23:36:45,911 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 682
[2020-05-30 23:36:45,911 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 682
[2020-05-30 23:36:45,911 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6473 states and 7531 transitions.
[2020-05-30 23:36:45,914 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:45,914 INFO  L728         BuchiCegarLoop]: Abstraction has 6473 states and 7531 transitions.
[2020-05-30 23:36:45,916 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6473 states and 7531 transitions.
[2020-05-30 23:36:45,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6473 to 5825.
[2020-05-30 23:36:45,937 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5825 states.
[2020-05-30 23:36:45,941 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5825 states to 5825 states and 6556 transitions.
[2020-05-30 23:36:45,942 INFO  L751         BuchiCegarLoop]: Abstraction has 5825 states and 6556 transitions.
[2020-05-30 23:36:45,942 INFO  L631         BuchiCegarLoop]: Abstraction has 5825 states and 6556 transitions.
[2020-05-30 23:36:45,942 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 23:36:45,942 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5825 states and 6556 transitions.
[2020-05-30 23:36:45,946 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 23:36:45,946 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:45,946 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:45,947 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:45,947 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND TRUE   choice == 6
[L2186]              gas := gas - 21000;
[L2187]  COND TRUE   gas >= 0
[L2189]              assume msgvalue_MSG == 0;
[L2190]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2190]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:45,950 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:45,951 INFO  L82        PathProgramCache]: Analyzing trace with hash 217153653, now seen corresponding path program 1 times
[2020-05-30 23:36:45,951 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:45,964 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:46,032 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-30 23:36:46,032 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:46,032 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 23:36:46,033 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:46,033 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 23:36:46,033 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-30 23:36:46,033 INFO  L87              Difference]: Start difference. First operand 5825 states and 6556 transitions. cyclomatic complexity: 750 Second operand 14 states.
[2020-05-30 23:36:46,479 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:46,479 INFO  L93              Difference]: Finished difference Result 7626 states and 8868 transitions.
[2020-05-30 23:36:46,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 23:36:46,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7626 states and 8868 transitions.
[2020-05-30 23:36:46,492 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 23:36:46,509 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7626 states to 7626 states and 8868 transitions.
[2020-05-30 23:36:46,509 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 797
[2020-05-30 23:36:46,509 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 797
[2020-05-30 23:36:46,509 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7626 states and 8868 transitions.
[2020-05-30 23:36:46,513 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:46,513 INFO  L728         BuchiCegarLoop]: Abstraction has 7626 states and 8868 transitions.
[2020-05-30 23:36:46,515 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7626 states and 8868 transitions.
[2020-05-30 23:36:46,546 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7626 to 7566.
[2020-05-30 23:36:46,546 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7566 states.
[2020-05-30 23:36:46,555 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7566 states to 7566 states and 8801 transitions.
[2020-05-30 23:36:46,555 INFO  L751         BuchiCegarLoop]: Abstraction has 7566 states and 8801 transitions.
[2020-05-30 23:36:46,555 INFO  L631         BuchiCegarLoop]: Abstraction has 7566 states and 8801 transitions.
[2020-05-30 23:36:46,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 23:36:46,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7566 states and 8801 transitions.
[2020-05-30 23:36:46,561 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 23:36:46,561 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:46,561 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:46,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:46,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND TRUE   DType[to] == Ownable
[L1854]                    assume amount == 0;
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND FALSE  !(choice == 3)
[L2220]  COND FALSE  !(choice == 2)
[L2229]  COND FALSE  !(choice == 1)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:46,565 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:46,565 INFO  L82        PathProgramCache]: Analyzing trace with hash 233276019, now seen corresponding path program 1 times
[2020-05-30 23:36:46,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:46,577 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:46,661 INFO  L134       CoverageAnalysis]: Checked inductivity of 205 backedges. 9 proven. 11 refuted. 0 times theorem prover too weak. 185 trivial. 0 not checked.
[2020-05-30 23:36:46,662 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:46,662 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [14] total 14
[2020-05-30 23:36:46,662 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 23:36:46,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 23:36:46,663 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-30 23:36:46,663 INFO  L87              Difference]: Start difference. First operand 7566 states and 8801 transitions. cyclomatic complexity: 1265 Second operand 14 states.
[2020-05-30 23:36:47,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:47,269 INFO  L93              Difference]: Finished difference Result 9256 states and 10914 transitions.
[2020-05-30 23:36:47,269 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 23:36:47,270 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9256 states and 10914 transitions.
[2020-05-30 23:36:47,285 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-30 23:36:47,304 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9256 states to 9256 states and 10914 transitions.
[2020-05-30 23:36:47,305 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 980
[2020-05-30 23:36:47,305 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 980
[2020-05-30 23:36:47,305 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9256 states and 10914 transitions.
[2020-05-30 23:36:47,310 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:47,310 INFO  L728         BuchiCegarLoop]: Abstraction has 9256 states and 10914 transitions.
[2020-05-30 23:36:47,313 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9256 states and 10914 transitions.
[2020-05-30 23:36:47,345 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9256 to 9121.
[2020-05-30 23:36:47,346 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9121 states.
[2020-05-30 23:36:47,355 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9121 states to 9121 states and 10757 transitions.
[2020-05-30 23:36:47,355 INFO  L751         BuchiCegarLoop]: Abstraction has 9121 states and 10757 transitions.
[2020-05-30 23:36:47,355 INFO  L631         BuchiCegarLoop]: Abstraction has 9121 states and 10757 transitions.
[2020-05-30 23:36:47,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 23:36:47,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9121 states and 10757 transitions.
[2020-05-30 23:36:47,362 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-05-30 23:36:47,362 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:47,362 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:47,363 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:47,363 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND TRUE   choice == 3
[L2213]              gas := gas - 21000;
[L2214]  COND TRUE   gas >= 0
[L2216]              assume msgvalue_MSG == 0;
[L2217]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]              assume Balance[from] >= amount;
[L1880]              Balance[from] := Balance[from] - amount;
[L1881]              Balance[to] := Balance[to] + amount;
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:47,365 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:47,366 INFO  L82        PathProgramCache]: Analyzing trace with hash -1476463096, now seen corresponding path program 1 times
[2020-05-30 23:36:47,366 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:47,380 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:47,395 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:47,482 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:47,482 INFO  L82        PathProgramCache]: Analyzing trace with hash 1975534321, now seen corresponding path program 1 times
[2020-05-30 23:36:47,483 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:47,487 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:47,491 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:47,503 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:47,503 INFO  L82        PathProgramCache]: Analyzing trace with hash -224933640, now seen corresponding path program 1 times
[2020-05-30 23:36:47,504 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:47,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 23:36:47,662 INFO  L134       CoverageAnalysis]: Checked inductivity of 105 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 98 trivial. 0 not checked.
[2020-05-30 23:36:47,662 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 23:36:47,662 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 23:36:47,662 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-05-30 23:36:47,662 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-05-30 23:36:47,662 INFO  L87              Difference]: Start difference. First operand 9121 states and 10757 transitions. cyclomatic complexity: 1672 Second operand 12 states.
[2020-05-30 23:36:48,835 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 23:36:48,835 INFO  L93              Difference]: Finished difference Result 10821 states and 13050 transitions.
[2020-05-30 23:36:48,835 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-05-30 23:36:48,836 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10821 states and 13050 transitions.
[2020-05-30 23:36:48,864 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 23:36:48,897 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10821 states to 10779 states and 13002 transitions.
[2020-05-30 23:36:48,897 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1055
[2020-05-30 23:36:48,897 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1055
[2020-05-30 23:36:48,897 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10779 states and 13002 transitions.
[2020-05-30 23:36:48,904 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 23:36:48,904 INFO  L728         BuchiCegarLoop]: Abstraction has 10779 states and 13002 transitions.
[2020-05-30 23:36:48,911 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10779 states and 13002 transitions.
[2020-05-30 23:36:48,962 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10779 to 10722.
[2020-05-30 23:36:48,962 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 10722 states.
[2020-05-30 23:36:48,976 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 10722 states to 10722 states and 12934 transitions.
[2020-05-30 23:36:48,976 INFO  L751         BuchiCegarLoop]: Abstraction has 10722 states and 12934 transitions.
[2020-05-30 23:36:48,976 INFO  L631         BuchiCegarLoop]: Abstraction has 10722 states and 12934 transitions.
[2020-05-30 23:36:48,976 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-05-30 23:36:48,976 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10722 states and 12934 transitions.
[2020-05-30 23:36:48,987 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 23:36:48,987 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 23:36:48,987 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 23:36:48,988 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 23:36:48,989 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2250]                    assume null == 0;
[L2251]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2251]        RET         call this := FreshRefGenerator__success();
[L2252]                    assume now >= 0;
[L2253]                    assume DType[this] == EscrowVault;
[L2254]                    gas := gas - 53000;
[L2255]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2255]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2256]                    assume !revert && gas >= 0;
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND TRUE   choice == 6
[L2186]                    gas := gas - 21000;
[L2187]        COND TRUE   gas >= 0
[L2189]                    assume msgvalue_MSG == 0;
[L2190]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2190]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND TRUE   choice == 7
[L2177]                    gas := gas - 21000;
[L2178]        COND TRUE   gas >= 0
[L2180]                    assume msgvalue_MSG >= 0;
[L2181]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND TRUE   choice == 5
[L2195]                    gas := gas - 21000;
[L2196]        COND TRUE   gas >= 0
[L2198]                    assume msgvalue_MSG == 0;
[L2199]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2199]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2259]        RET         call CorralChoice_EscrowVault(this);
[L2259]        CALL        call CorralChoice_EscrowVault(this);
[L2146]                    havoc msgsender_MSG;
[L2147]                    havoc msgvalue_MSG;
[L2148]                    havoc choice;
[L2149]                    havoc newOwner_s150;
[L2150]                    havoc _superOwner_s224;
[L2151]                    havoc _beneficiary_s224;
[L2152]                    havoc investor_s256;
[L2153]                    havoc _amount_s320;
[L2154]                    havoc investor_s431;
[L2155]                    havoc tmpNow;
[L2156]                    havoc gas;
[L2157]                    assume gas > 4000000 && gas <= 8000000;
[L2158]                    tmpNow := now;
[L2159]                    havoc now;
[L2160]                    assume now > tmpNow;
[L2161]                    assume msgsender_MSG != null;
[L2162]                    assume DType[msgsender_MSG] != SafeMath;
[L2163]                    assume DType[msgsender_MSG] != Ownable;
[L2164]                    assume DType[msgsender_MSG] != EscrowVault;
[L2165]                    Alloc[msgsender_MSG] := true;
[L2166]        COND FALSE  !(choice == 8)
[L2175]        COND FALSE  !(choice == 7)
[L2184]        COND FALSE  !(choice == 6)
[L2193]        COND FALSE  !(choice == 5)
[L2202]        COND FALSE  !(choice == 4)
[L2211]        COND TRUE   choice == 3
[L2213]                    gas := gas - 21000;
[L2214]        COND TRUE   gas >= 0
[L2216]                    assume msgvalue_MSG == 0;
[L2217]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]                    havoc __exception;
[L1964]        COND FALSE  !(__exception)
[L1990]        COND TRUE   Balance[from] >= amount
[L1992]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]                    assume Balance[from] >= amount;
[L1880]                    Balance[from] := Balance[from] - amount;
[L1881]                    Balance[to] := Balance[to] + amount;
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L1992]        RET         call FallbackDispatch__success(from, to, amount);
[L1993]                    success := true;
[L2000]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2217]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2259]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2259]  CALL        call CorralChoice_EscrowVault(this);
[L2146]              havoc msgsender_MSG;
[L2147]              havoc msgvalue_MSG;
[L2148]              havoc choice;
[L2149]              havoc newOwner_s150;
[L2150]              havoc _superOwner_s224;
[L2151]              havoc _beneficiary_s224;
[L2152]              havoc investor_s256;
[L2153]              havoc _amount_s320;
[L2154]              havoc investor_s431;
[L2155]              havoc tmpNow;
[L2156]              havoc gas;
[L2157]              assume gas > 4000000 && gas <= 8000000;
[L2158]              tmpNow := now;
[L2159]              havoc now;
[L2160]              assume now > tmpNow;
[L2161]              assume msgsender_MSG != null;
[L2162]              assume DType[msgsender_MSG] != SafeMath;
[L2163]              assume DType[msgsender_MSG] != Ownable;
[L2164]              assume DType[msgsender_MSG] != EscrowVault;
[L2165]              Alloc[msgsender_MSG] := true;
[L2166]  COND FALSE  !(choice == 8)
[L2175]  COND FALSE  !(choice == 7)
[L2184]  COND FALSE  !(choice == 6)
[L2193]  COND FALSE  !(choice == 5)
[L2202]  COND FALSE  !(choice == 4)
[L2211]  COND FALSE  !(choice == 3)
[L2220]  COND FALSE  !(choice == 2)
[L2229]  COND FALSE  !(choice == 1)
[L2259]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 23:36:48,991 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:48,991 INFO  L82        PathProgramCache]: Analyzing trace with hash -1476463096, now seen corresponding path program 2 times
[2020-05-30 23:36:48,991 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:49,005 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:49,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:49,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:49,069 INFO  L82        PathProgramCache]: Analyzing trace with hash 886504466, now seen corresponding path program 1 times
[2020-05-30 23:36:49,070 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:49,071 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:49,072 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:49,074 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 23:36:49,075 INFO  L82        PathProgramCache]: Analyzing trace with hash 921510635, now seen corresponding path program 1 times
[2020-05-30 23:36:49,075 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 23:36:49,093 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:49,112 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2473 to 4943
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 631 to 1259
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2179 to 4357
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
[2020-05-30 23:36:50,086 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 161
[2020-05-30 23:36:50,344 WARN  L188               SmtUtils]: Spent 256.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 196
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
[2020-05-30 23:36:50,548 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 248
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 23:36:50,768 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 201
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-05-30 23:36:51,129 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification that was a NOOP. DAG size: 196
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
[2020-05-30 23:36:51,422 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification. DAG size of input: 165 DAG size of output: 162
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-05-30 23:36:51,855 WARN  L188               SmtUtils]: Spent 203.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 187
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #6: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #7: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 23:36:52,215 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 205 DAG size of output: 200
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-05-30 23:36:52,436 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 191 DAG size of output: 186
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
[2020-05-30 23:36:52,724 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 190 DAG size of output: 184
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 23:36:55,370 WARN  L188               SmtUtils]: Spent 2.30 s on a formula simplification. DAG size of input: 805 DAG size of output: 757
Garbage collection #1: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #2: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #3: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #4: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #5: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #6: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #7: 21023 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21023 to 42043
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 23:36:55,621 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification that was a NOOP. DAG size: 274
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 23:36:55,965 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification. DAG size of input: 278 DAG size of output: 275
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-30 23:36:56,096 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification that was a NOOP. DAG size: 267
[2020-05-30 23:36:56,118 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 23:36:56,127 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 11:36:56 BasicIcfg
[2020-05-30 23:36:56,127 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 23:36:56,127 INFO  L168              Benchmark]: Toolchain (without parser) took 62076.40 ms. Allocated memory was 514.9 MB in the beginning and 2.8 GB in the end (delta: 2.2 GB). Free memory was 460.2 MB in the beginning and 362.7 MB in the end (delta: 97.5 MB). Peak memory consumption was 2.4 GB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,128 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,129 INFO  L168              Benchmark]: Boogie Preprocessor took 64.61 ms. Allocated memory is still 514.9 MB. Free memory was 460.2 MB in the beginning and 454.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,129 INFO  L168              Benchmark]: UtopiaSpecLang took 37.55 ms. Allocated memory is still 514.9 MB. Free memory was 454.8 MB in the beginning and 450.8 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,130 INFO  L168              Benchmark]: Boogie Printer took 9.94 ms. Allocated memory is still 514.9 MB. Free memory was 450.8 MB in the beginning and 449.4 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,130 INFO  L168              Benchmark]: RCFGBuilder took 395.71 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 399.5 MB in the end (delta: 49.9 MB). Peak memory consumption was 49.9 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,130 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.14 ms. Allocated memory is still 514.9 MB. Free memory was 399.5 MB in the beginning and 395.0 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,131 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1748.90 ms. Allocated memory was 514.9 MB in the beginning and 730.9 MB in the end (delta: 216.0 MB). Free memory was 395.0 MB in the beginning and 567.2 MB in the end (delta: -172.2 MB). Peak memory consumption was 166.5 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,131 INFO  L168              Benchmark]: BlockEncodingV2 took 143.52 ms. Allocated memory is still 730.9 MB. Free memory was 567.2 MB in the beginning and 497.2 MB in the end (delta: 69.9 MB). Peak memory consumption was 69.9 MB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,132 INFO  L168              Benchmark]: BuchiAutomizer took 59635.19 ms. Allocated memory was 730.9 MB in the beginning and 2.8 GB in the end (delta: 2.0 GB). Free memory was 497.2 MB in the beginning and 362.7 MB in the end (delta: 134.5 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-05-30 23:36:56,136 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4094 locations, 10262 edges
  - StatisticsResult: Encoded RCFG
    4030 locations, 10023 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 64.61 ms. Allocated memory is still 514.9 MB. Free memory was 460.2 MB in the beginning and 454.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 37.55 ms. Allocated memory is still 514.9 MB. Free memory was 454.8 MB in the beginning and 450.8 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 9.94 ms. Allocated memory is still 514.9 MB. Free memory was 450.8 MB in the beginning and 449.4 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 395.71 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 399.5 MB in the end (delta: 49.9 MB). Peak memory consumption was 49.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.14 ms. Allocated memory is still 514.9 MB. Free memory was 399.5 MB in the beginning and 395.0 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1748.90 ms. Allocated memory was 514.9 MB in the beginning and 730.9 MB in the end (delta: 216.0 MB). Free memory was 395.0 MB in the beginning and 567.2 MB in the end (delta: -172.2 MB). Peak memory consumption was 166.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 143.52 ms. Allocated memory is still 730.9 MB. Free memory was 567.2 MB in the beginning and 497.2 MB in the end (delta: 69.9 MB). Peak memory consumption was 69.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 59635.19 ms. Allocated memory was 730.9 MB in the beginning and 2.8 GB in the end (delta: 2.0 GB). Free memory was 497.2 MB in the beginning and 362.7 MB in the end (delta: 134.5 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    880 locations, 1085 edges
  - StatisticsResult: BuchiProgram size
    4094 locations, 10262 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 20 terminating modules (20 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.20 modules have a trivial ranking function, the largest among these consists of 47 locations. The remainder module has 10722 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 59.5s and 21 iterations.  TraceHistogramMax:4. Analysis of lassos took 10.0s. Construction of modules took 35.5s. BÃ¼chi inclusion checks took 11.9s. Highest rank in rank-based complementation 0. Minimization of det autom 20. Minimization of nondet autom 0. Automata minimization 0.9s AutomataMinimizationTime, 20 MinimizatonAttempts, 5417 StatesRemovedByMinimization, 17 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 10722 states and ocurred in iteration 20.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 71732 SDtfs, 131665 SDslu, 210033 SDs, 0 SdLazy, 514881 SolverSat, 21891 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 35.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(4000012) = (new EscrowVault).value(4000008)({from : 4000017, _superOwner : 4000017, _beneficiary : 4000018});
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND FALSE  !(revert)
[L1299]  CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]              assume msgsender_MSG != null;
[L1225]              Balance[this] := 0;
[L1226]  CALL        call __var_4 := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L1226]  RET         call __var_4 := FreshRefGenerator__success();
[L1227]  COND FALSE  !(revert)
[L1232]              deposited_EscrowVault[this] := __var_4;
[L1233]              M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]              sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]              beneficiary_EscrowVault[this] := null;
[L1236]              superOwner_EscrowVault[this] := null;
[L1237]              __var_2 := null;
[L1238]  COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]              __var_3 := null;
[L1245]  COND FALSE  !(!(_superOwner_s224 != null))
[L1251]              beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]              superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]              state_EscrowVault[this] := 0;
[L1299]  RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]  COND FALSE  !(revert)
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2255]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
EscrowVault(4000012).setGoalReached.gas(3979002)({from : 4000017});
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2190]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
EscrowVault(4000012).deposit.gas(3979003).value(7)({from : 4000017, investor : 4000005});
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]                    gas := gas - 1932;
[L2021]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2181]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
EscrowVault(4000012).withdraw.gas(3979004)({from : 4000017, _amount : 6});
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND TRUE   gas > 2300
[L1520]              gas := 2300;
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]              assume Balance[from] >= amount;
[L1880]              Balance[from] := Balance[from] - amount;
[L1881]              Balance[to] := Balance[to] + amount;
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2199]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
EscrowVault(4000012).close.gas(3979001)({from : 4000017});
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2020]              gas := gas - 1932;
[L2021]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1963]              havoc __exception;
[L1964]  COND FALSE  !(__exception)
[L1990]  COND TRUE   Balance[from] >= amount
[L1992]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L1879]              assume Balance[from] >= amount;
[L1880]              Balance[from] := Balance[from] - amount;
[L1881]              Balance[to] := Balance[to] + amount;
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L1992]  RET         call FallbackDispatch__success(from, to, amount);
[L1993]              success := true;
[L2000]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2217]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
