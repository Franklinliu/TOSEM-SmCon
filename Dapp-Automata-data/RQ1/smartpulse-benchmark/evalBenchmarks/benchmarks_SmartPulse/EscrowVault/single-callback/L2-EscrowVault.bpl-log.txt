This is Ultimate 0.1.24-9993c5c-m
[2020-05-30 22:22:30,110 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-05-30 22:22:30,111 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-05-30 22:22:30,122 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-05-30 22:22:30,122 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-05-30 22:22:30,123 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-05-30 22:22:30,124 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-05-30 22:22:30,125 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-05-30 22:22:30,127 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-05-30 22:22:30,128 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-05-30 22:22:30,129 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-05-30 22:22:30,129 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-05-30 22:22:30,130 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-05-30 22:22:30,132 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-05-30 22:22:30,133 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-05-30 22:22:30,134 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-05-30 22:22:30,135 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-05-30 22:22:30,136 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-05-30 22:22:30,138 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-05-30 22:22:30,139 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-05-30 22:22:30,140 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-05-30 22:22:30,141 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-05-30 22:22:30,143 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-05-30 22:22:30,143 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-05-30 22:22:30,143 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-05-30 22:22:30,144 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-05-30 22:22:30,145 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-05-30 22:22:30,146 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-05-30 22:22:30,146 INFO  L174        SettingsManager]: Resetting UtopiaLiveness preferences to default values
[2020-05-30 22:22:30,146 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-05-30 22:22:30,146 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-05-30 22:22:30,147 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-05-30 22:22:30,148 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-05-30 22:22:30,149 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-05-30 22:22:30,150 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-05-30 22:22:30,151 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-05-30 22:22:30,151 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-05-30 22:22:30,152 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-05-30 22:22:30,152 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-05-30 22:22:30,152 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-05-30 22:22:30,153 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-05-30 22:22:30,154 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-05-30 22:22:30,154 INFO  L98         SettingsManager]: Beginning loading settings from /Users/jon/Documents/Research/masterUltimate/SmartPulse/settings.epf
[2020-05-30 22:22:30,164 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-05-30 22:22:30,164 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-05-30 22:22:30,165 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-05-30 22:22:30,165 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-05-30 22:22:30,165 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/Users/jon/Documents/Research/devUltimate/ltl2ba
[2020-05-30 22:22:30,165 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-05-30 22:22:30,165 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-05-30 22:22:30,165 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-05-30 22:22:30,165 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-05-30 22:22:30,166 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-05-30 22:22:30,166 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-05-30 22:22:30,166 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-05-30 22:22:30,167 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-05-30 22:22:30,167 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-05-30 22:22:30,187 INFO  L81    nceAwareModelManager]: Repository-Root is: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T
[2020-05-30 22:22:30,197 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-05-30 22:22:30,199 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-05-30 22:22:30,200 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-05-30 22:22:30,201 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-05-30 22:22:30,202 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/single-callback/L2-EscrowVault.bpl
[2020-05-30 22:22:30,202 INFO  L111           BoogieParser]: Parsing: '/Users/jon/Documents/Research/masterUltimate/benchmarks/evalBenchmarks/benchmarks/EscrowVault/single-callback/L2-EscrowVault.bpl'
[2020-05-30 22:22:30,248 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-05-30 22:22:30,249 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-05-30 22:22:30,249 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-05-30 22:22:30,250 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-05-30 22:22:30,250 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-05-30 22:22:30,264 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,265 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,287 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,287 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,300 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,306 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,310 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,315 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-05-30 22:22:30,316 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-05-30 22:22:30,316 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-05-30 22:22:30,317 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-05-30 22:22:30,320 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/1) ...
[2020-05-30 22:22:30,330 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 22:22:30,335 INFO  L979   opiaSpecLangObserver]: Successfully lexed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 22:22:30,340 INFO  L981   opiaSpecLangObserver]: Successfully parsed: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 22:22:30,343 INFO  L599   opiaSpecLangObserver]: Parsed ( to==ben && amount==fsum_deposit_EscrowVault_2_0 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[to,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[ben,GLOBAL]],BinaryExpression[COMPEQ,IdentifierExpression[amount,<IMPLEMENTATION_INPARAM,send__success>],IdentifierExpression[fsum_deposit_EscrowVault_2_0,GLOBAL]]]
[2020-05-30 22:22:30,343 INFO  L968   opiaSpecLangObserver]: Compiling: (<>(finished(send(from, to, amt), (to == ben && amt == fsum(EscrowVault.deposit, 2)))))
[2020-05-30 22:22:30,344 INFO  L970   opiaSpecLangObserver]: Compiled to ( <>AP(success_send__success0) )
[2020-05-30 22:22:30,344 INFO  L975   opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 22:22:30,344 INFO  L979   opiaSpecLangObserver]: Successfully lexed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 22:22:30,345 INFO  L981   opiaSpecLangObserver]: Successfully parsed: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 22:22:30,347 INFO  L599   opiaSpecLangObserver]: Parsed ben==beneficiary_EscrowVault[this] to BinaryExpression[COMPEQ,IdentifierExpression[ben,GLOBAL],ArrayAccessExpression[IdentifierExpression[beneficiary_EscrowVault,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,close_EscrowVault>]]]]
[2020-05-30 22:22:30,348 INFO  L968   opiaSpecLangObserver]: Compiling: <>(finished(EscrowVault.deposit)) && <>(finished(EscrowVault.close, (ben == beneficiary_EscrowVault[this])))
[2020-05-30 22:22:30,348 INFO  L970   opiaSpecLangObserver]: Compiled to ( ( <>AP(success_deposit_EscrowVault0) ) && ( <>AP(success_close_EscrowVault0) ) )
Executed UtopiaSpecLang
[2020-05-30 22:22:30,354 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 10:22:30 PropertyContainer
[2020-05-30 22:22:30,355 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-05-30 22:22:30,355 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-05-30 22:22:30,355 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-05-30 22:22:30,355 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-05-30 22:22:30,356 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/2) ...
[2020-05-30 22:22:30,356 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 22:22:30,356 INFO  L120   oogiePrinterObserver]: Writing to file /var/folders/t6/mxckf6w17qb907fknyrxnkyc0000gp/T/boogiePrinter.bpl
[2020-05-30 22:22:30,365 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 10:22:30" (2/2) ...
[2020-05-30 22:22:30,366 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-05-30 22:22:30,366 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-05-30 22:22:30,366 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-05-30 22:22:30,367 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-05-30 22:22:30,367 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/2) ...
[2020-05-30 22:22:30,408 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-05-30 22:22:30,409 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 22:22:30,409 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-05-30 22:22:30,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-05-30 22:22:30,410 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable
[2020-05-30 22:22:30,410 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault
[2020-05-30 22:22:30,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault
[2020-05-30 22:22:30,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault
[2020-05-30 22:22:30,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault
[2020-05-30 22:22:30,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault
[2020-05-30 22:22:30,411 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault
[2020-05-30 22:22:30,411 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault
[2020-05-30 22:22:30,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault
[2020-05-30 22:22:30,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault
[2020-05-30 22:22:30,412 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-05-30 22:22:30,412 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EscrowVault
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure mul_SafeMath__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure div_SafeMath__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure sub_SafeMath__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure add_SafeMath__fail
[2020-05-30 22:22:30,413 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership_Ownable__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure EscrowVault_EscrowVault__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure deposit_EscrowVault__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure setGoalReached_EscrowVault__fail
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__success
[2020-05-30 22:22:30,414 INFO  L130     BoogieDeclarations]: Found specification of procedure withdraw_EscrowVault__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__success
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure withdrawAll_EscrowVault__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__success
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure close_EscrowVault__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__success
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure enableRefunds_EscrowVault__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__success
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure refund_EscrowVault__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-05-30 22:22:30,415 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-05-30 22:22:30,415 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul_SafeMath__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure div_SafeMath__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub_SafeMath__success
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__fail
[2020-05-30 22:22:30,416 INFO  L138     BoogieDeclarations]: Found implementation of procedure add_SafeMath__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership_Ownable__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault_NoBaseCtor__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure EscrowVault_EscrowVault__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__fail
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure deposit_EscrowVault__success
[2020-05-30 22:22:30,417 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__fail
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGoalReached_EscrowVault__success
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__fail
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdraw_EscrowVault__success
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__fail
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure withdrawAll_EscrowVault__success
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__fail
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure close_EscrowVault__success
[2020-05-30 22:22:30,418 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__fail
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure enableRefunds_EscrowVault__success
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__fail
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure refund_EscrowVault__success
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-05-30 22:22:30,419 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-05-30 22:22:30,420 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EscrowVault
[2020-05-30 22:22:30,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-05-30 22:22:30,421 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-05-30 22:22:30,421 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-05-30 22:22:30,559 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 22:22:30,571 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 22:22:30,705 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-05-30 22:22:30,794 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-05-30 22:22:30,794 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-05-30 22:22:30,795 INFO  L202        PluginConnector]: Adding new model L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 10:22:30 BoogieIcfgContainer
[2020-05-30 22:22:30,796 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 10:22:30" (2/2) ...
[2020-05-30 22:22:30,796 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-05-30 22:22:30,796 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2454aa38 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 10:22:30, skipping insertion in model container
[2020-05-30 22:22:30,796 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-05-30 22:22:30,797 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-05-30 22:22:30,797 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-05-30 22:22:30,799 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-05-30 22:22:30,799 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/3) ...
[2020-05-30 22:22:30,800 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@47c1beae and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 10:22:30, skipping insertion in model container
[2020-05-30 22:22:30,800 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 10:22:30" (2/3) ...
No working directory specified, using /Users/jon/Documents/Research/devUltimate/ltl2ba
Starting monitored process 1 with /Users/jon/Documents/Research/devUltimate/ltl2ba -f  ( ( <>a ) && ( <>b ) ) && ! ( ( <>c ) )  (exit command is null, workingDir is null)
[2020-05-30 22:22:30,838 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 10:22:30 NWAContainer
[2020-05-30 22:22:30,838 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-05-30 22:22:30,838 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-05-30 22:22:30,838 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-05-30 22:22:30,839 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-05-30 22:22:30,839 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 10:22:30" (3/4) ...
[2020-05-30 22:22:30,840 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6bddd097 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 10:22:30, skipping insertion in model container
[2020-05-30 22:22:30,840 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 10:22:30" (4/4) ...
[2020-05-30 22:22:30,843 INFO  L104   BuchiProductObserver]: Initial property automaton 4 locations, 9 edges
[2020-05-30 22:22:30,845 INFO  L110   BuchiProductObserver]: Initial RCFG 998 locations, 1301 edges
[2020-05-30 22:22:30,845 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-05-30 22:22:30,854 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-05-30 22:22:32,692 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-05-30 22:22:32,701 INFO  L110   BuchiProductObserver]: BuchiProgram size 4710 locations, 12314 edges
[2020-05-30 22:22:32,701 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 10:22:32 BoogieIcfgContainer
[2020-05-30 22:22:32,701 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-05-30 22:22:32,702 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-05-30 22:22:32,702 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-05-30 22:22:32,703 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-05-30 22:22:32,704 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 10:22:32" (1/1) ...
[2020-05-30 22:22:32,797 INFO  L313           BlockEncoder]: Initial Icfg 4710 locations, 12314 edges
[2020-05-30 22:22:32,797 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-05-30 22:22:32,797 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-05-30 22:22:32,798 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-05-30 22:22:32,798 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-05-30 22:22:32,812 INFO  L70    emoveInfeasibleEdges]: Removed 145 edges and 20 locations because of local infeasibility
[2020-05-30 22:22:32,821 INFO  L70        RemoveSinkStates]: Removed 9 edges and 4 locations by removing sink states
[2020-05-30 22:22:32,837 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-05-30 22:22:32,842 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-05-30 22:22:32,847 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-05-30 22:22:32,848 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-05-30 22:22:32,852 INFO  L313           BlockEncoder]: Encoded RCFG 4646 locations, 12075 edges
[2020-05-30 22:22:32,853 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 10:22:32 BasicIcfg
[2020-05-30 22:22:32,853 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-05-30 22:22:32,853 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-05-30 22:22:32,853 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-05-30 22:22:32,855 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-05-30 22:22:32,856 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,856 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 30.05 10:22:30" (1/6) ...
[2020-05-30 22:22:32,857 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e455a15 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 10:22:32, skipping insertion in model container
[2020-05-30 22:22:32,857 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,857 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 30.05 10:22:30" (2/6) ...
[2020-05-30 22:22:32,858 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e455a15 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 10:22:32, skipping insertion in model container
[2020-05-30 22:22:32,858 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,858 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 30.05 10:22:30" (3/6) ...
[2020-05-30 22:22:32,858 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e455a15 and model type L2-EscrowVault.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 10:22:32, skipping insertion in model container
[2020-05-30 22:22:32,858 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,858 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 30.05 10:22:30" (4/6) ...
[2020-05-30 22:22:32,859 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e455a15 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 30.05 10:22:32, skipping insertion in model container
[2020-05-30 22:22:32,859 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,859 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 30.05 10:22:32" (5/6) ...
[2020-05-30 22:22:32,859 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1e455a15 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 30.05 10:22:32, skipping insertion in model container
[2020-05-30 22:22:32,859 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-05-30 22:22:32,859 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 30.05 10:22:32" (6/6) ...
[2020-05-30 22:22:32,860 INFO  L404   chiAutomizerObserver]: Analyzing ICFG L2-EscrowVault.bpl_BEv2
[2020-05-30 22:22:32,890 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-05-30 22:22:32,891 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-05-30 22:22:32,891 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-05-30 22:22:32,891 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-05-30 22:22:32,891 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-05-30 22:22:32,891 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-05-30 22:22:32,891 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-05-30 22:22:32,891 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-05-30 22:22:32,891 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-05-30 22:22:32,936 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4646 states.
[2020-05-30 22:22:33,019 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:33,020 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:33,020 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:33,028 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:33,028 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:33,028 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-05-30 22:22:33,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4646 states.
[2020-05-30 22:22:33,071 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:33,072 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:33,072 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:33,073 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:33,074 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2540]              assume null == 0;
[L2541]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2541]  RET         call this := FreshRefGenerator__success();
[L2542]              assume now >= 0;
[L2543]              assume DType[this] == EscrowVault;
[L2544]              gas := gas - 53000;
[L2545]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2545]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]              assume !revert && gas >= 0;

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:33,131 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:33,131 INFO  L82        PathProgramCache]: Analyzing trace with hash 1836332590, now seen corresponding path program 1 times
[2020-05-30 22:22:33,135 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:33,154 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:33,197 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 22:22:33,199 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:33,199 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 22:22:33,203 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:33,444 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 22:22:33,444 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 22:22:33,446 INFO  L87              Difference]: Start difference. First operand 4646 states. Second operand 3 states.
[2020-05-30 22:22:33,865 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:33,866 INFO  L93              Difference]: Finished difference Result 3964 states and 6807 transitions.
[2020-05-30 22:22:33,866 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 22:22:33,867 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3964 states and 6807 transitions.
[2020-05-30 22:22:33,903 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:33,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3964 states to 3964 states and 6807 transitions.
[2020-05-30 22:22:33,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 6
[2020-05-30 22:22:33,943 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 213
[2020-05-30 22:22:33,944 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3964 states and 6807 transitions.
[2020-05-30 22:22:33,959 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:33,959 INFO  L728         BuchiCegarLoop]: Abstraction has 3964 states and 6807 transitions.
[2020-05-30 22:22:33,978 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3964 states and 6807 transitions.
[2020-05-30 22:22:34,050 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3964 to 3964.
[2020-05-30 22:22:34,050 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3964 states.
[2020-05-30 22:22:34,063 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3964 states to 3964 states and 6807 transitions.
[2020-05-30 22:22:34,064 INFO  L751         BuchiCegarLoop]: Abstraction has 3964 states and 6807 transitions.
[2020-05-30 22:22:34,064 INFO  L631         BuchiCegarLoop]: Abstraction has 3964 states and 6807 transitions.
[2020-05-30 22:22:34,064 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-05-30 22:22:34,064 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3964 states and 6807 transitions.
[2020-05-30 22:22:34,074 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:34,074 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:34,074 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:34,076 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:34,076 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2540]              assume null == 0;
[L2541]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2541]  RET         call this := FreshRefGenerator__success();
[L2542]              assume now >= 0;
[L2543]              assume DType[this] == EscrowVault;
[L2544]              gas := gas - 53000;
[L2545]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND TRUE   revert
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2545]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]              assume !revert && gas >= 0;
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:34,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:34,081 INFO  L82        PathProgramCache]: Analyzing trace with hash 1783135617, now seen corresponding path program 1 times
[2020-05-30 22:22:34,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:34,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:34,103 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 22:22:34,104 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:34,104 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 22:22:34,105 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:34,105 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 22:22:34,105 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 22:22:34,106 INFO  L87              Difference]: Start difference. First operand 3964 states and 6807 transitions. cyclomatic complexity: 2855 Second operand 3 states.
[2020-05-30 22:22:34,274 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:34,275 INFO  L93              Difference]: Finished difference Result 3827 states and 4601 transitions.
[2020-05-30 22:22:34,275 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 22:22:34,275 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3827 states and 4601 transitions.
[2020-05-30 22:22:34,290 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:34,310 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3827 states to 3827 states and 4601 transitions.
[2020-05-30 22:22:34,310 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 213
[2020-05-30 22:22:34,311 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 213
[2020-05-30 22:22:34,311 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3827 states and 4601 transitions.
[2020-05-30 22:22:34,315 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:34,315 INFO  L728         BuchiCegarLoop]: Abstraction has 3827 states and 4601 transitions.
[2020-05-30 22:22:34,319 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3827 states and 4601 transitions.
[2020-05-30 22:22:34,349 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3827 to 3827.
[2020-05-30 22:22:34,349 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3827 states.
[2020-05-30 22:22:34,355 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3827 states to 3827 states and 4601 transitions.
[2020-05-30 22:22:34,355 INFO  L751         BuchiCegarLoop]: Abstraction has 3827 states and 4601 transitions.
[2020-05-30 22:22:34,355 INFO  L631         BuchiCegarLoop]: Abstraction has 3827 states and 4601 transitions.
[2020-05-30 22:22:34,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-05-30 22:22:34,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3827 states and 4601 transitions.
[2020-05-30 22:22:34,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-05-30 22:22:34,361 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:34,361 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:34,362 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:34,362 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2540]              assume null == 0;
[L2541]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2541]  RET         call this := FreshRefGenerator__success();
[L2542]              assume now >= 0;
[L2543]              assume DType[this] == EscrowVault;
[L2544]              gas := gas - 53000;
[L2545]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND TRUE   revert
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2545]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]              assume !revert && gas >= 0;
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND TRUE   choice == 7
[L2467]              gas := gas - 21000;
[L2468]  COND TRUE   gas >= 0
[L2470]              assume msgvalue_MSG >= 0;
[L2471]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND TRUE   revert
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]  RET         call CorralChoice_EscrowVault(this);
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND TRUE   revert
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:34,366 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:34,367 INFO  L82        PathProgramCache]: Analyzing trace with hash -42440093, now seen corresponding path program 1 times
[2020-05-30 22:22:34,367 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:34,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:34,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-05-30 22:22:34,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:34,404 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 22:22:34,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:34,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 22:22:34,405 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 22:22:34,405 INFO  L87              Difference]: Start difference. First operand 3827 states and 4601 transitions. cyclomatic complexity: 786 Second operand 3 states.
[2020-05-30 22:22:34,524 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:34,524 INFO  L93              Difference]: Finished difference Result 4941 states and 5964 transitions.
[2020-05-30 22:22:34,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 22:22:34,525 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4941 states and 5964 transitions.
[2020-05-30 22:22:34,541 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:34,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4941 states to 4941 states and 5964 transitions.
[2020-05-30 22:22:34,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 314
[2020-05-30 22:22:34,562 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 314
[2020-05-30 22:22:34,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4941 states and 5964 transitions.
[2020-05-30 22:22:34,566 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:34,566 INFO  L728         BuchiCegarLoop]: Abstraction has 4941 states and 5964 transitions.
[2020-05-30 22:22:34,571 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4941 states and 5964 transitions.
[2020-05-30 22:22:34,621 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4941 to 4516.
[2020-05-30 22:22:34,622 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4516 states.
[2020-05-30 22:22:34,631 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4516 states to 4516 states and 5443 transitions.
[2020-05-30 22:22:34,631 INFO  L751         BuchiCegarLoop]: Abstraction has 4516 states and 5443 transitions.
[2020-05-30 22:22:34,632 INFO  L631         BuchiCegarLoop]: Abstraction has 4516 states and 5443 transitions.
[2020-05-30 22:22:34,632 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-05-30 22:22:34,632 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4516 states and 5443 transitions.
[2020-05-30 22:22:34,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:34,642 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:34,642 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:34,644 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:34,644 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                 success_close_EscrowVault0 := false;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 fsum_deposit_EscrowVault_2_0 := 0;
[L7]                 success_send__success0 := false;
[L7]     CALL        call main();
[L7]                 havoc ben;
[L2540]              assume null == 0;
[L2541]  CALL        call this := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L2541]  RET         call this := FreshRefGenerator__success();
[L2542]              assume now >= 0;
[L2543]              assume DType[this] == EscrowVault;
[L2544]              gas := gas - 53000;
[L2545]  CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND FALSE  !(revert)
[L1299]  CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]              assume msgsender_MSG != null;
[L1225]              Balance[this] := 0;
[L1226]  CALL        call __var_4 := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L1226]  RET         call __var_4 := FreshRefGenerator__success();
[L1227]  COND FALSE  !(revert)
[L1232]              deposited_EscrowVault[this] := __var_4;
[L1233]              M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]              sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]              beneficiary_EscrowVault[this] := null;
[L1236]              superOwner_EscrowVault[this] := null;
[L1237]              __var_2 := null;
[L1238]  COND TRUE   !(_beneficiary_s224 != null)
[L1240]              revert := true;
[L1299]  RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]  COND FALSE  !(revert)
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2545]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]              assume !revert && gas >= 0;
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND TRUE   choice == 7
[L2467]              gas := gas - 21000;
[L2468]  COND TRUE   gas >= 0
[L2470]              assume msgvalue_MSG >= 0;
[L2471]  CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]               havoc __exception;
[L304]               revert := false;
[L305]   COND FALSE  !(__exception)
[L325]   CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]              assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]              Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]              Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]  COND FALSE  !(revert)
[L1363]              gas := gas - 733;
[L1364]  COND TRUE   !(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2)
[L1366]              revert := true;
[L325]   RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 success_deposit_EscrowVault0 := true;
[L7]                 success_deposit_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L7]                 fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]  RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]  RET         call CorralChoice_EscrowVault(this);
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND TRUE   !(state_EscrowVault[this] == 2)
[L1670]              revert := true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND TRUE   !(state_EscrowVault[this] == 2)
[L1670]              revert := true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:34,649 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:34,649 INFO  L82        PathProgramCache]: Analyzing trace with hash -625662960, now seen corresponding path program 1 times
[2020-05-30 22:22:34,649 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:34,660 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:34,720 INFO  L134       CoverageAnalysis]: Checked inductivity of 6 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 6 trivial. 0 not checked.
[2020-05-30 22:22:34,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:34,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-05-30 22:22:34,721 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:34,721 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-05-30 22:22:34,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-05-30 22:22:34,721 INFO  L87              Difference]: Start difference. First operand 4516 states and 5443 transitions. cyclomatic complexity: 939 Second operand 3 states.
[2020-05-30 22:22:34,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:34,858 INFO  L93              Difference]: Finished difference Result 5186 states and 6121 transitions.
[2020-05-30 22:22:34,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-05-30 22:22:34,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5186 states and 6121 transitions.
[2020-05-30 22:22:34,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 22:22:34,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5186 states to 4770 states and 5599 transitions.
[2020-05-30 22:22:34,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 256
[2020-05-30 22:22:34,905 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 256
[2020-05-30 22:22:34,905 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4770 states and 5599 transitions.
[2020-05-30 22:22:34,911 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:34,912 INFO  L728         BuchiCegarLoop]: Abstraction has 4770 states and 5599 transitions.
[2020-05-30 22:22:34,917 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4770 states and 5599 transitions.
[2020-05-30 22:22:34,977 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4770 to 4170.
[2020-05-30 22:22:34,977 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4170 states.
[2020-05-30 22:22:34,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4170 states to 4170 states and 4843 transitions.
[2020-05-30 22:22:34,984 INFO  L751         BuchiCegarLoop]: Abstraction has 4170 states and 4843 transitions.
[2020-05-30 22:22:34,984 INFO  L631         BuchiCegarLoop]: Abstraction has 4170 states and 4843 transitions.
[2020-05-30 22:22:34,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-05-30 22:22:34,984 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4170 states and 4843 transitions.
[2020-05-30 22:22:34,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:34,989 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:34,989 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:34,992 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:34,992 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND FALSE  !(Balance[from] >= amount)
[L2287]                    success := false;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:34,998 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:34,998 INFO  L82        PathProgramCache]: Analyzing trace with hash -1464924999, now seen corresponding path program 1 times
[2020-05-30 22:22:34,999 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:35,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:35,114 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-05-30 22:22:35,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:35,115 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-05-30 22:22:35,115 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:35,115 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 22:22:35,115 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-05-30 22:22:35,115 INFO  L87              Difference]: Start difference. First operand 4170 states and 4843 transitions. cyclomatic complexity: 685 Second operand 10 states.
[2020-05-30 22:22:36,695 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:36,695 INFO  L93              Difference]: Finished difference Result 4457 states and 5184 transitions.
[2020-05-30 22:22:36,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 22:22:36,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4457 states and 5184 transitions.
[2020-05-30 22:22:36,703 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:36,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4457 states to 4457 states and 5184 transitions.
[2020-05-30 22:22:36,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 275
[2020-05-30 22:22:36,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 275
[2020-05-30 22:22:36,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4457 states and 5184 transitions.
[2020-05-30 22:22:36,724 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:36,724 INFO  L728         BuchiCegarLoop]: Abstraction has 4457 states and 5184 transitions.
[2020-05-30 22:22:36,728 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4457 states and 5184 transitions.
[2020-05-30 22:22:36,762 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4457 to 4261.
[2020-05-30 22:22:36,762 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4261 states.
[2020-05-30 22:22:36,768 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4261 states to 4261 states and 4939 transitions.
[2020-05-30 22:22:36,768 INFO  L751         BuchiCegarLoop]: Abstraction has 4261 states and 4939 transitions.
[2020-05-30 22:22:36,768 INFO  L631         BuchiCegarLoop]: Abstraction has 4261 states and 4939 transitions.
[2020-05-30 22:22:36,768 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-05-30 22:22:36,768 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4261 states and 4939 transitions.
[2020-05-30 22:22:36,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:36,773 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:36,773 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:36,776 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:36,776 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND FALSE  !(Balance[from] >= amount)
[L2287]                    success := false;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND FALSE  !(Balance[from] >= amount)
[L2287]              success := false;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:36,780 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:36,780 INFO  L82        PathProgramCache]: Analyzing trace with hash -1742748326, now seen corresponding path program 1 times
[2020-05-30 22:22:36,780 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:36,797 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:36,850 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 22:22:36,850 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:36,851 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 22:22:36,851 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:36,851 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 22:22:36,851 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-05-30 22:22:36,851 INFO  L87              Difference]: Start difference. First operand 4261 states and 4939 transitions. cyclomatic complexity: 692 Second operand 4 states.
[2020-05-30 22:22:36,886 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:36,887 INFO  L93              Difference]: Finished difference Result 4297 states and 4979 transitions.
[2020-05-30 22:22:36,887 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 22:22:36,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4297 states and 4979 transitions.
[2020-05-30 22:22:36,897 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:36,911 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4297 states to 4289 states and 4971 transitions.
[2020-05-30 22:22:36,911 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 217
[2020-05-30 22:22:36,912 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 217
[2020-05-30 22:22:36,912 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4289 states and 4971 transitions.
[2020-05-30 22:22:36,915 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:36,916 INFO  L728         BuchiCegarLoop]: Abstraction has 4289 states and 4971 transitions.
[2020-05-30 22:22:36,920 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4289 states and 4971 transitions.
[2020-05-30 22:22:36,954 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4289 to 4289.
[2020-05-30 22:22:36,954 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4289 states.
[2020-05-30 22:22:36,959 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4289 states to 4289 states and 4971 transitions.
[2020-05-30 22:22:36,959 INFO  L751         BuchiCegarLoop]: Abstraction has 4289 states and 4971 transitions.
[2020-05-30 22:22:36,959 INFO  L631         BuchiCegarLoop]: Abstraction has 4289 states and 4971 transitions.
[2020-05-30 22:22:36,959 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-05-30 22:22:36,959 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4289 states and 4971 transitions.
[2020-05-30 22:22:36,964 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:36,964 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:36,964 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:36,965 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:36,965 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND FALSE  !(gas > 2300)
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND FALSE  !(gas > 2300)
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:36,969 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:36,970 INFO  L82        PathProgramCache]: Analyzing trace with hash -957322591, now seen corresponding path program 1 times
[2020-05-30 22:22:36,970 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:36,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:37,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 22:22:37,066 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:37,066 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-05-30 22:22:37,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:37,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-05-30 22:22:37,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=14, Invalid=42, Unknown=0, NotChecked=0, Total=56
[2020-05-30 22:22:37,066 INFO  L87              Difference]: Start difference. First operand 4289 states and 4971 transitions. cyclomatic complexity: 696 Second operand 8 states.
[2020-05-30 22:22:37,943 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:37,943 INFO  L93              Difference]: Finished difference Result 3817 states and 4270 transitions.
[2020-05-30 22:22:37,943 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 22:22:37,943 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3817 states and 4270 transitions.
[2020-05-30 22:22:37,950 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 22:22:37,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3817 states to 3781 states and 4234 transitions.
[2020-05-30 22:22:37,959 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 234
[2020-05-30 22:22:37,960 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 641
[2020-05-30 22:22:37,960 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3781 states and 4234 transitions.
[2020-05-30 22:22:37,962 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:37,963 INFO  L728         BuchiCegarLoop]: Abstraction has 3781 states and 4234 transitions.
[2020-05-30 22:22:37,965 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3781 states and 4234 transitions.
[2020-05-30 22:22:37,990 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3781 to 3499.
[2020-05-30 22:22:37,991 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3499 states.
[2020-05-30 22:22:37,994 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3499 states to 3499 states and 3898 transitions.
[2020-05-30 22:22:37,994 INFO  L751         BuchiCegarLoop]: Abstraction has 3499 states and 3898 transitions.
[2020-05-30 22:22:37,994 INFO  L631         BuchiCegarLoop]: Abstraction has 3499 states and 3898 transitions.
[2020-05-30 22:22:37,994 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-05-30 22:22:37,994 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3499 states and 3898 transitions.
[2020-05-30 22:22:37,998 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:37,999 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:37,999 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:38,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:38,001 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND FALSE  !(choice == 3)
[L2510]        COND TRUE   choice == 2
[L2512]                    gas := gas - 21000;
[L2513]        COND TRUE   gas >= 0
[L2515]                    assume msgvalue_MSG == 0;
[L2516]        CALL        call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L493]                     havoc __exception;
[L494]                     revert := false;
[L495]         COND FALSE  !(__exception)
[L515]         CALL        call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1711]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1711]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1712]        COND FALSE  !(revert)
[L1717]                    gas := gas - 367;
[L1718]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1724]                    gas := gas - 20337;
[L1725]                    state_EscrowVault[this] := 1;
[L1726]                    assert { :EventEmitted "RefundsEnabled_EscrowVault" } true;
[L515]         RET         call enableRefunds_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L516]                     assume !revert && gas >= 0;
[L2516]        RET         call enableRefunds_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:38,005 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:38,006 INFO  L82        PathProgramCache]: Analyzing trace with hash -1170536181, now seen corresponding path program 1 times
[2020-05-30 22:22:38,006 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:38,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:38,085 INFO  L134       CoverageAnalysis]: Checked inductivity of 49 backedges. 31 proven. 0 refuted. 0 times theorem prover too weak. 18 trivial. 0 not checked.
[2020-05-30 22:22:38,086 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:38,086 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-05-30 22:22:38,086 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:38,086 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 22:22:38,086 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 22:22:38,087 INFO  L87              Difference]: Start difference. First operand 3499 states and 3898 transitions. cyclomatic complexity: 405 Second operand 11 states.
[2020-05-30 22:22:39,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:39,089 INFO  L93              Difference]: Finished difference Result 4041 states and 4617 transitions.
[2020-05-30 22:22:39,089 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 22:22:39,089 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4041 states and 4617 transitions.
[2020-05-30 22:22:39,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 22:22:39,105 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4041 states to 4013 states and 4585 transitions.
[2020-05-30 22:22:39,105 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 636
[2020-05-30 22:22:39,105 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 636
[2020-05-30 22:22:39,105 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4013 states and 4585 transitions.
[2020-05-30 22:22:39,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:39,108 INFO  L728         BuchiCegarLoop]: Abstraction has 4013 states and 4585 transitions.
[2020-05-30 22:22:39,110 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4013 states and 4585 transitions.
[2020-05-30 22:22:39,144 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4013 to 4007.
[2020-05-30 22:22:39,145 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4007 states.
[2020-05-30 22:22:39,149 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4007 states to 4007 states and 4560 transitions.
[2020-05-30 22:22:39,149 INFO  L751         BuchiCegarLoop]: Abstraction has 4007 states and 4560 transitions.
[2020-05-30 22:22:39,149 INFO  L631         BuchiCegarLoop]: Abstraction has 4007 states and 4560 transitions.
[2020-05-30 22:22:39,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-05-30 22:22:39,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4007 states and 4560 transitions.
[2020-05-30 22:22:39,154 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-05-30 22:22:39,154 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:39,154 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:39,155 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:39,155 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:39,163 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:39,163 INFO  L82        PathProgramCache]: Analyzing trace with hash 2040167844, now seen corresponding path program 1 times
[2020-05-30 22:22:39,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:39,184 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:39,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 22:22:39,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:22:39,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-05-30 22:22:39,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:39,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-05-30 22:22:39,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=103, Invalid=1019, Unknown=0, NotChecked=0, Total=1122
[2020-05-30 22:22:39,471 INFO  L87              Difference]: Start difference. First operand 4007 states and 4560 transitions. cyclomatic complexity: 559 Second operand 34 states.
[2020-05-30 22:22:45,504 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:45,504 INFO  L93              Difference]: Finished difference Result 6469 states and 7680 transitions.
[2020-05-30 22:22:45,504 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 59 states. 
[2020-05-30 22:22:45,504 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6469 states and 7680 transitions.
[2020-05-30 22:22:45,518 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 20
[2020-05-30 22:22:45,534 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6469 states to 6469 states and 7680 transitions.
[2020-05-30 22:22:45,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 748
[2020-05-30 22:22:45,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 748
[2020-05-30 22:22:45,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6469 states and 7680 transitions.
[2020-05-30 22:22:45,539 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:45,539 INFO  L728         BuchiCegarLoop]: Abstraction has 6469 states and 7680 transitions.
[2020-05-30 22:22:45,542 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6469 states and 7680 transitions.
[2020-05-30 22:22:45,593 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6469 to 6223.
[2020-05-30 22:22:45,593 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6223 states.
[2020-05-30 22:22:45,602 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6223 states to 6223 states and 7188 transitions.
[2020-05-30 22:22:45,602 INFO  L751         BuchiCegarLoop]: Abstraction has 6223 states and 7188 transitions.
[2020-05-30 22:22:45,602 INFO  L631         BuchiCegarLoop]: Abstraction has 6223 states and 7188 transitions.
[2020-05-30 22:22:45,602 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-05-30 22:22:45,602 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6223 states and 7188 transitions.
[2020-05-30 22:22:45,608 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-30 22:22:45,609 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:45,609 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:45,610 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:45,610 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:45,613 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:45,613 INFO  L82        PathProgramCache]: Analyzing trace with hash 772898588, now seen corresponding path program 1 times
[2020-05-30 22:22:45,613 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:45,630 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:45,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 46 backedges. 4 proven. 28 refuted. 0 times theorem prover too weak. 14 trivial. 0 not checked.
[2020-05-30 22:22:45,797 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:22:45,798 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-05-30 22:22:45,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:45,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-05-30 22:22:45,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=838, Unknown=0, NotChecked=0, Total=930
[2020-05-30 22:22:45,799 INFO  L87              Difference]: Start difference. First operand 6223 states and 7188 transitions. cyclomatic complexity: 991 Second operand 31 states.
[2020-05-30 22:22:50,473 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:50,473 INFO  L93              Difference]: Finished difference Result 6352 states and 7373 transitions.
[2020-05-30 22:22:50,473 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 61 states. 
[2020-05-30 22:22:50,473 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6352 states and 7373 transitions.
[2020-05-30 22:22:50,487 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-30 22:22:50,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6352 states to 6352 states and 7373 transitions.
[2020-05-30 22:22:50,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 732
[2020-05-30 22:22:50,503 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 732
[2020-05-30 22:22:50,503 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6352 states and 7373 transitions.
[2020-05-30 22:22:50,507 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:50,507 INFO  L728         BuchiCegarLoop]: Abstraction has 6352 states and 7373 transitions.
[2020-05-30 22:22:50,510 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6352 states and 7373 transitions.
[2020-05-30 22:22:50,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6352 to 6257.
[2020-05-30 22:22:50,547 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6257 states.
[2020-05-30 22:22:50,554 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6257 states to 6257 states and 7229 transitions.
[2020-05-30 22:22:50,555 INFO  L751         BuchiCegarLoop]: Abstraction has 6257 states and 7229 transitions.
[2020-05-30 22:22:50,555 INFO  L631         BuchiCegarLoop]: Abstraction has 6257 states and 7229 transitions.
[2020-05-30 22:22:50,555 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-05-30 22:22:50,555 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6257 states and 7229 transitions.
[2020-05-30 22:22:50,560 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-30 22:22:50,561 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:50,561 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:50,562 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:50,562 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND TRUE   __exception
[L269]                     __tmp__Balance := Balance;
[L270]                     __tmp__DType := DType;
[L271]                     __tmp__Alloc := Alloc;
[L272]                     __tmp__balance_ADDR := balance_ADDR;
[L273]                     __tmp__M_Ref_int_deposited0 := M_Ref_int_deposited0;
[L274]                     __tmp__sum_deposited0 := sum_deposited0;
[L275]                     __tmp__Length := Length;
[L276]                     __tmp__now := now;
[L277]                     __tmp__owner_Ownable := owner_Ownable;
[L278]                     __tmp__deposited_EscrowVault := deposited_EscrowVault;
[L279]                     __tmp__beneficiary_EscrowVault := beneficiary_EscrowVault;
[L280]                     __tmp__superOwner_EscrowVault := superOwner_EscrowVault;
[L281]                     __tmp__state_EscrowVault := state_EscrowVault;
[L282]         CALL        call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1268]        CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1101]        CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1081]                    assume msgsender_MSG != null;
[L1082]                    __tmp__Balance[this] := 0;
[L1083]                    __tmp__owner_Ownable[this] := null;
[L1084]                    __tmp__owner_Ownable[this] := msgsender_MSG;
[L1101]        RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1102]        COND FALSE  !(revert)
[L1268]        RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L1269]        COND FALSE  !(revert)
[L1274]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1180]                    assume msgsender_MSG != null;
[L1181]                    __tmp__Balance[this] := 0;
[L1182]        CALL        call __var_4 := FreshRefGenerator__fail();
[L823]                     havoc newRef;
[L824]                     assume __tmp__Alloc[newRef] == false;
[L825]                     __tmp__Alloc[newRef] := true;
[L826]                     assume newRef != null;
[L1182]        RET         call __var_4 := FreshRefGenerator__fail();
[L1183]        COND FALSE  !(revert)
[L1188]                    __tmp__deposited_EscrowVault[this] := __var_4;
[L1189]                    __tmp__M_Ref_int_deposited0[__tmp__deposited_EscrowVault[this]] := zeroRefIntArr();
[L1190]                    __tmp__sum_deposited0[__tmp__deposited_EscrowVault[this]] := 0;
[L1191]                    __tmp__beneficiary_EscrowVault[this] := null;
[L1192]                    __tmp__superOwner_EscrowVault[this] := null;
[L1193]                    __var_2 := null;
[L1194]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1200]                    __var_3 := null;
[L1201]        COND FALSE  !(!(_superOwner_s224 != null))
[L1207]                    __tmp__beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1208]                    __tmp__superOwner_EscrowVault[this] := _superOwner_s224;
[L1209]                    __tmp__state_EscrowVault[this] := 0;
[L1274]        RET         call EscrowVault_EscrowVault_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1275]        COND FALSE  !(revert)
[L282]         RET         call EscrowVault_EscrowVault__fail(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L283]                     assume revert || gas < 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND TRUE   choice == 6
[L2476]              gas := gas - 21000;
[L2477]  COND TRUE   gas >= 0
[L2479]              assume msgvalue_MSG == 0;
[L2480]  CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2480]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:50,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:50,564 INFO  L82        PathProgramCache]: Analyzing trace with hash -1443510776, now seen corresponding path program 1 times
[2020-05-30 22:22:50,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:50,572 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:50,599 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-05-30 22:22:50,599 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:50,599 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-05-30 22:22:50,600 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:50,600 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-05-30 22:22:50,600 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-05-30 22:22:50,600 INFO  L87              Difference]: Start difference. First operand 6257 states and 7229 transitions. cyclomatic complexity: 998 Second operand 4 states.
[2020-05-30 22:22:50,978 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:50,978 INFO  L93              Difference]: Finished difference Result 8209 states and 10550 transitions.
[2020-05-30 22:22:50,978 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-05-30 22:22:50,978 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8209 states and 10550 transitions.
[2020-05-30 22:22:50,999 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 38
[2020-05-30 22:22:51,026 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8209 states to 8140 states and 10481 transitions.
[2020-05-30 22:22:51,027 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 906
[2020-05-30 22:22:51,027 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 906
[2020-05-30 22:22:51,027 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8140 states and 10481 transitions.
[2020-05-30 22:22:51,034 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:51,034 INFO  L728         BuchiCegarLoop]: Abstraction has 8140 states and 10481 transitions.
[2020-05-30 22:22:51,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8140 states and 10481 transitions.
[2020-05-30 22:22:51,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8140 to 6188.
[2020-05-30 22:22:51,087 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6188 states.
[2020-05-30 22:22:51,094 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6188 states to 6188 states and 7159 transitions.
[2020-05-30 22:22:51,094 INFO  L751         BuchiCegarLoop]: Abstraction has 6188 states and 7159 transitions.
[2020-05-30 22:22:51,094 INFO  L631         BuchiCegarLoop]: Abstraction has 6188 states and 7159 transitions.
[2020-05-30 22:22:51,094 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-05-30 22:22:51,094 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6188 states and 7159 transitions.
[2020-05-30 22:22:51,100 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 14
[2020-05-30 22:22:51,100 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:51,101 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:51,101 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:51,102 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:51,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:51,104 INFO  L82        PathProgramCache]: Analyzing trace with hash 1626086612, now seen corresponding path program 1 times
[2020-05-30 22:22:51,105 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:51,119 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:51,290 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-30 22:22:51,290 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:51,290 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-05-30 22:22:51,290 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:51,291 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-05-30 22:22:51,291 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=627, Unknown=0, NotChecked=0, Total=702
[2020-05-30 22:22:51,291 INFO  L87              Difference]: Start difference. First operand 6188 states and 7159 transitions. cyclomatic complexity: 997 Second operand 27 states.
[2020-05-30 22:22:55,437 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:55,437 INFO  L93              Difference]: Finished difference Result 6269 states and 7252 transitions.
[2020-05-30 22:22:55,437 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 41 states. 
[2020-05-30 22:22:55,437 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6269 states and 7252 transitions.
[2020-05-30 22:22:55,450 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-05-30 22:22:55,462 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6269 states to 6269 states and 7252 transitions.
[2020-05-30 22:22:55,462 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 724
[2020-05-30 22:22:55,463 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 724
[2020-05-30 22:22:55,463 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6269 states and 7252 transitions.
[2020-05-30 22:22:55,466 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:55,466 INFO  L728         BuchiCegarLoop]: Abstraction has 6269 states and 7252 transitions.
[2020-05-30 22:22:55,468 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6269 states and 7252 transitions.
[2020-05-30 22:22:55,500 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6269 to 6031.
[2020-05-30 22:22:55,500 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6031 states.
[2020-05-30 22:22:55,506 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6031 states to 6031 states and 6961 transitions.
[2020-05-30 22:22:55,507 INFO  L751         BuchiCegarLoop]: Abstraction has 6031 states and 6961 transitions.
[2020-05-30 22:22:55,507 INFO  L631         BuchiCegarLoop]: Abstraction has 6031 states and 6961 transitions.
[2020-05-30 22:22:55,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-05-30 22:22:55,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6031 states and 6961 transitions.
[2020-05-30 22:22:55,512 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:55,512 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:55,512 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:55,514 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:55,514 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]              assume Balance[from] >= amount;
[L2036]              Balance[from] := Balance[from] - amount;
[L2037]              Balance[to] := Balance[to] + amount;
[L2038]  COND FALSE  !(choice == 0)
[L2044]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:55,517 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:55,517 INFO  L82        PathProgramCache]: Analyzing trace with hash 19235308, now seen corresponding path program 1 times
[2020-05-30 22:22:55,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:55,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:55,656 INFO  L134       CoverageAnalysis]: Checked inductivity of 38 backedges. 3 proven. 0 refuted. 0 times theorem prover too weak. 35 trivial. 0 not checked.
[2020-05-30 22:22:55,656 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-05-30 22:22:55,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-05-30 22:22:55,656 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:55,656 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-05-30 22:22:55,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=489, Unknown=0, NotChecked=0, Total=552
[2020-05-30 22:22:55,657 INFO  L87              Difference]: Start difference. First operand 6031 states and 6961 transitions. cyclomatic complexity: 954 Second operand 24 states.
[2020-05-30 22:22:59,651 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:22:59,651 INFO  L93              Difference]: Finished difference Result 6182 states and 7115 transitions.
[2020-05-30 22:22:59,651 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-05-30 22:22:59,651 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6182 states and 7115 transitions.
[2020-05-30 22:22:59,660 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:59,668 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6182 states to 6182 states and 7115 transitions.
[2020-05-30 22:22:59,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 703
[2020-05-30 22:22:59,669 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 703
[2020-05-30 22:22:59,669 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6182 states and 7115 transitions.
[2020-05-30 22:22:59,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:22:59,671 INFO  L728         BuchiCegarLoop]: Abstraction has 6182 states and 7115 transitions.
[2020-05-30 22:22:59,673 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6182 states and 7115 transitions.
[2020-05-30 22:22:59,698 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6182 to 5854.
[2020-05-30 22:22:59,698 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5854 states.
[2020-05-30 22:22:59,704 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5854 states to 5854 states and 6651 transitions.
[2020-05-30 22:22:59,705 INFO  L751         BuchiCegarLoop]: Abstraction has 5854 states and 6651 transitions.
[2020-05-30 22:22:59,705 INFO  L631         BuchiCegarLoop]: Abstraction has 5854 states and 6651 transitions.
[2020-05-30 22:22:59,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-05-30 22:22:59,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5854 states and 6651 transitions.
[2020-05-30 22:22:59,710 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:22:59,710 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:22:59,710 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:22:59,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:22:59,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:22:59,713 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:22:59,713 INFO  L82        PathProgramCache]: Analyzing trace with hash 98749945, now seen corresponding path program 1 times
[2020-05-30 22:22:59,714 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:22:59,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:22:59,788 INFO  L134       CoverageAnalysis]: Checked inductivity of 70 backedges. 1 proven. 23 refuted. 0 times theorem prover too weak. 46 trivial. 0 not checked.
[2020-05-30 22:22:59,788 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:22:59,789 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-05-30 22:22:59,789 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:22:59,789 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 22:22:59,789 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 22:22:59,789 INFO  L87              Difference]: Start difference. First operand 5854 states and 6651 transitions. cyclomatic complexity: 812 Second operand 11 states.
[2020-05-30 22:23:00,541 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:00,541 INFO  L93              Difference]: Finished difference Result 5923 states and 6738 transitions.
[2020-05-30 22:23:00,541 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-05-30 22:23:00,541 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5923 states and 6738 transitions.
[2020-05-30 22:23:00,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:23:00,561 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5923 states to 5923 states and 6738 transitions.
[2020-05-30 22:23:00,561 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 632
[2020-05-30 22:23:00,562 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-05-30 22:23:00,562 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5923 states and 6738 transitions.
[2020-05-30 22:23:00,564 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:00,564 INFO  L728         BuchiCegarLoop]: Abstraction has 5923 states and 6738 transitions.
[2020-05-30 22:23:00,567 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5923 states and 6738 transitions.
[2020-05-30 22:23:00,590 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5923 to 5863.
[2020-05-30 22:23:00,590 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5863 states.
[2020-05-30 22:23:00,596 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5863 states to 5863 states and 6663 transitions.
[2020-05-30 22:23:00,596 INFO  L751         BuchiCegarLoop]: Abstraction has 5863 states and 6663 transitions.
[2020-05-30 22:23:00,596 INFO  L631         BuchiCegarLoop]: Abstraction has 5863 states and 6663 transitions.
[2020-05-30 22:23:00,597 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-05-30 22:23:00,597 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5863 states and 6663 transitions.
[2020-05-30 22:23:00,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:23:00,602 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:00,602 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:00,603 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:00,603 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:00,606 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:00,606 INFO  L82        PathProgramCache]: Analyzing trace with hash -1092886653, now seen corresponding path program 1 times
[2020-05-30 22:23:00,606 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:00,625 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:23:00,887 INFO  L134       CoverageAnalysis]: Checked inductivity of 79 backedges. 5 proven. 37 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-05-30 22:23:00,888 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:23:00,888 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-05-30 22:23:00,888 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:23:00,888 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-05-30 22:23:00,888 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=92, Invalid=964, Unknown=0, NotChecked=0, Total=1056
[2020-05-30 22:23:00,889 INFO  L87              Difference]: Start difference. First operand 5863 states and 6663 transitions. cyclomatic complexity: 815 Second operand 33 states.
[2020-05-30 22:23:07,586 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:07,587 INFO  L93              Difference]: Finished difference Result 6522 states and 7563 transitions.
[2020-05-30 22:23:07,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 61 states. 
[2020-05-30 22:23:07,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6522 states and 7563 transitions.
[2020-05-30 22:23:07,601 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:23:07,619 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6522 states to 6510 states and 7547 transitions.
[2020-05-30 22:23:07,619 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 719
[2020-05-30 22:23:07,619 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 719
[2020-05-30 22:23:07,619 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6510 states and 7547 transitions.
[2020-05-30 22:23:07,623 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:07,623 INFO  L728         BuchiCegarLoop]: Abstraction has 6510 states and 7547 transitions.
[2020-05-30 22:23:07,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6510 states and 7547 transitions.
[2020-05-30 22:23:07,653 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6510 to 6241.
[2020-05-30 22:23:07,653 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6241 states.
[2020-05-30 22:23:07,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6241 states to 6241 states and 7203 transitions.
[2020-05-30 22:23:07,660 INFO  L751         BuchiCegarLoop]: Abstraction has 6241 states and 7203 transitions.
[2020-05-30 22:23:07,660 INFO  L631         BuchiCegarLoop]: Abstraction has 6241 states and 7203 transitions.
[2020-05-30 22:23:07,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-05-30 22:23:07,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6241 states and 7203 transitions.
[2020-05-30 22:23:07,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-05-30 22:23:07,666 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:07,666 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:07,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:07,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND TRUE   DType[to] == EscrowVault
[L1850]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND TRUE   DType[to] == EscrowVault
[L1850]              assume amount == 0;
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:07,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:07,671 INFO  L82        PathProgramCache]: Analyzing trace with hash -1235157314, now seen corresponding path program 1 times
[2020-05-30 22:23:07,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:07,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:23:07,787 INFO  L134       CoverageAnalysis]: Checked inductivity of 84 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-05-30 22:23:07,787 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:23:07,787 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 22:23:07,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:23:07,788 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 22:23:07,788 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-30 22:23:07,788 INFO  L87              Difference]: Start difference. First operand 6241 states and 7203 transitions. cyclomatic complexity: 981 Second operand 14 states.
[2020-05-30 22:23:08,140 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:08,140 INFO  L93              Difference]: Finished difference Result 8370 states and 10067 transitions.
[2020-05-30 22:23:08,140 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 22:23:08,140 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8370 states and 10067 transitions.
[2020-05-30 22:23:08,156 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 22:23:08,177 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8370 states to 8370 states and 10067 transitions.
[2020-05-30 22:23:08,177 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 825
[2020-05-30 22:23:08,177 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 825
[2020-05-30 22:23:08,177 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8370 states and 10067 transitions.
[2020-05-30 22:23:08,182 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:08,182 INFO  L728         BuchiCegarLoop]: Abstraction has 8370 states and 10067 transitions.
[2020-05-30 22:23:08,185 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8370 states and 10067 transitions.
[2020-05-30 22:23:08,225 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8370 to 8304.
[2020-05-30 22:23:08,225 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8304 states.
[2020-05-30 22:23:08,236 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8304 states to 8304 states and 9996 transitions.
[2020-05-30 22:23:08,236 INFO  L751         BuchiCegarLoop]: Abstraction has 8304 states and 9996 transitions.
[2020-05-30 22:23:08,236 INFO  L631         BuchiCegarLoop]: Abstraction has 8304 states and 9996 transitions.
[2020-05-30 22:23:08,236 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-05-30 22:23:08,236 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8304 states and 9996 transitions.
[2020-05-30 22:23:08,244 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 22:23:08,244 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:08,245 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:08,245 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:08,246 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND FALSE  !(gas > 2300)
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND FALSE  !(gas >= 0)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:08,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:08,249 INFO  L82        PathProgramCache]: Analyzing trace with hash -1511315006, now seen corresponding path program 1 times
[2020-05-30 22:23:08,249 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:08,265 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:23:08,328 INFO  L134       CoverageAnalysis]: Checked inductivity of 96 backedges. 4 proven. 12 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-05-30 22:23:08,328 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:23:08,328 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 22:23:08,329 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:23:08,329 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-05-30 22:23:08,329 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=62, Unknown=0, NotChecked=0, Total=90
[2020-05-30 22:23:08,329 INFO  L87              Difference]: Start difference. First operand 8304 states and 9996 transitions. cyclomatic complexity: 1722 Second operand 10 states.
[2020-05-30 22:23:09,052 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:09,052 INFO  L93              Difference]: Finished difference Result 9826 states and 12082 transitions.
[2020-05-30 22:23:09,052 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 22:23:09,052 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9826 states and 12082 transitions.
[2020-05-30 22:23:09,079 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-05-30 22:23:09,112 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9826 states to 9634 states and 11827 transitions.
[2020-05-30 22:23:09,112 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 961
[2020-05-30 22:23:09,113 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 961
[2020-05-30 22:23:09,113 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9634 states and 11827 transitions.
[2020-05-30 22:23:09,120 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:09,120 INFO  L728         BuchiCegarLoop]: Abstraction has 9634 states and 11827 transitions.
[2020-05-30 22:23:09,123 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9634 states and 11827 transitions.
[2020-05-30 22:23:09,171 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9634 to 8344.
[2020-05-30 22:23:09,171 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8344 states.
[2020-05-30 22:23:09,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8344 states to 8344 states and 9771 transitions.
[2020-05-30 22:23:09,182 INFO  L751         BuchiCegarLoop]: Abstraction has 8344 states and 9771 transitions.
[2020-05-30 22:23:09,182 INFO  L631         BuchiCegarLoop]: Abstraction has 8344 states and 9771 transitions.
[2020-05-30 22:23:09,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-05-30 22:23:09,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8344 states and 9771 transitions.
[2020-05-30 22:23:09,190 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-05-30 22:23:09,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:09,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:09,192 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:09,192 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND TRUE   choice == 3
[L2503]              gas := gas - 21000;
[L2504]  COND TRUE   gas >= 0
[L2506]              assume msgvalue_MSG == 0;
[L2507]  CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND TRUE   DType[to] == Ownable
[L1854]              assume amount == 0;
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:09,195 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:09,196 INFO  L82        PathProgramCache]: Analyzing trace with hash -932066747, now seen corresponding path program 1 times
[2020-05-30 22:23:09,196 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:09,215 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:09,235 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:09,323 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:09,323 INFO  L82        PathProgramCache]: Analyzing trace with hash 1964538796, now seen corresponding path program 1 times
[2020-05-30 22:23:09,324 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:09,329 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:09,335 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:09,345 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:09,345 INFO  L82        PathProgramCache]: Analyzing trace with hash 526551536, now seen corresponding path program 1 times
[2020-05-30 22:23:09,346 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:09,364 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:23:09,463 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 100 trivial. 0 not checked.
[2020-05-30 22:23:09,464 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:23:09,464 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-05-30 22:23:09,464 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-05-30 22:23:09,464 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=89, Unknown=0, NotChecked=0, Total=110
[2020-05-30 22:23:09,464 INFO  L87              Difference]: Start difference. First operand 8344 states and 9771 transitions. cyclomatic complexity: 1457 Second operand 11 states.
[2020-05-30 22:23:10,649 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:10,650 INFO  L93              Difference]: Finished difference Result 9865 states and 11798 transitions.
[2020-05-30 22:23:10,650 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-05-30 22:23:10,650 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9865 states and 11798 transitions.
[2020-05-30 22:23:10,677 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-05-30 22:23:10,709 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9865 states to 9823 states and 11750 transitions.
[2020-05-30 22:23:10,709 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 890
[2020-05-30 22:23:10,709 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 890
[2020-05-30 22:23:10,709 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9823 states and 11750 transitions.
[2020-05-30 22:23:10,716 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:10,717 INFO  L728         BuchiCegarLoop]: Abstraction has 9823 states and 11750 transitions.
[2020-05-30 22:23:10,721 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9823 states and 11750 transitions.
[2020-05-30 22:23:10,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9823 to 9808.
[2020-05-30 22:23:10,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9808 states.
[2020-05-30 22:23:10,789 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9808 states to 9808 states and 11732 transitions.
[2020-05-30 22:23:10,789 INFO  L751         BuchiCegarLoop]: Abstraction has 9808 states and 11732 transitions.
[2020-05-30 22:23:10,789 INFO  L631         BuchiCegarLoop]: Abstraction has 9808 states and 11732 transitions.
[2020-05-30 22:23:10,789 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-05-30 22:23:10,789 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9808 states and 11732 transitions.
[2020-05-30 22:23:10,802 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 12
[2020-05-30 22:23:10,802 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:10,802 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:10,803 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:10,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND TRUE   DType[to] == Ownable
[L1854]                    assume amount == 0;
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND TRUE   choice == 8
[L2458]              gas := gas - 21000;
[L2459]  COND TRUE   gas >= 0
[L2461]              assume msgvalue_MSG == 0;
[L2462]  CALL        call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L202]               havoc __exception;
[L203]               revert := false;
[L204]   COND FALSE  !(__exception)
[L224]   CALL        call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L1149]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1149]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1150]  COND FALSE  !(revert)
[L1155]              gas := gas - 88;
[L1156]              __var_1 := null;
[L1157]  COND FALSE  !(!(newOwner_s150 != null))
[L1163]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L1164]              gas := gas - 40534;
[L1165]              owner_Ownable[this] := newOwner_s150;
[L224]   RET         call transferOwnership_Ownable__success(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L225]               assume !revert && gas >= 0;
[L2462]  RET         call transferOwnership_Ownable(this, msgsender_MSG, msgvalue_MSG, newOwner_s150);
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:10,807 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:10,807 INFO  L82        PathProgramCache]: Analyzing trace with hash 602233252, now seen corresponding path program 1 times
[2020-05-30 22:23:10,807 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:10,824 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-05-30 22:23:10,901 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 4 proven. 11 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-05-30 22:23:10,902 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-05-30 22:23:10,902 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [13] total 13
[2020-05-30 22:23:10,902 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-05-30 22:23:10,902 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-05-30 22:23:10,902 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-05-30 22:23:10,903 INFO  L87              Difference]: Start difference. First operand 9808 states and 11732 transitions. cyclomatic complexity: 1954 Second operand 14 states.
[2020-05-30 22:23:11,351 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-05-30 22:23:11,351 INFO  L93              Difference]: Finished difference Result 12047 states and 14547 transitions.
[2020-05-30 22:23:11,351 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-05-30 22:23:11,351 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12047 states and 14547 transitions.
[2020-05-30 22:23:11,377 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 22:23:11,407 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12047 states to 12047 states and 14547 transitions.
[2020-05-30 22:23:11,407 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1130
[2020-05-30 22:23:11,408 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1130
[2020-05-30 22:23:11,408 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12047 states and 14547 transitions.
[2020-05-30 22:23:11,415 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-05-30 22:23:11,415 INFO  L728         BuchiCegarLoop]: Abstraction has 12047 states and 14547 transitions.
[2020-05-30 22:23:11,419 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12047 states and 14547 transitions.
[2020-05-30 22:23:11,479 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12047 to 11870.
[2020-05-30 22:23:11,479 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11870 states.
[2020-05-30 22:23:11,498 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11870 states to 11870 states and 14357 transitions.
[2020-05-30 22:23:11,498 INFO  L751         BuchiCegarLoop]: Abstraction has 11870 states and 14357 transitions.
[2020-05-30 22:23:11,499 INFO  L631         BuchiCegarLoop]: Abstraction has 11870 states and 14357 transitions.
[2020-05-30 22:23:11,499 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-05-30 22:23:11,499 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11870 states and 14357 transitions.
[2020-05-30 22:23:11,510 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 18
[2020-05-30 22:23:11,511 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-05-30 22:23:11,511 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-05-30 22:23:11,512 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-05-30 22:23:11,512 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L7]                       success_close_EscrowVault0 := false;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       fsum_deposit_EscrowVault_2_0 := 0;
[L7]                       success_send__success0 := false;
[L7]           CALL        call main();
[L7]                       havoc ben;
[L2540]                    assume null == 0;
[L2541]        CALL        call this := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L2541]        RET         call this := FreshRefGenerator__success();
[L2542]                    assume now >= 0;
[L2543]                    assume DType[this] == EscrowVault;
[L2544]                    gas := gas - 53000;
[L2545]        CALL        call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L265]                     havoc __exception;
[L266]                     revert := false;
[L267]         COND FALSE  !(__exception)
[L287]         CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]        CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]        CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]                    assume msgsender_MSG != null;
[L1092]                    Balance[this] := 0;
[L1093]                    owner_Ownable[this] := null;
[L1094]                    owner_Ownable[this] := msgsender_MSG;
[L1112]        RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]        COND FALSE  !(revert)
[L1293]        RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]        COND FALSE  !(revert)
[L1299]        CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]                    assume msgsender_MSG != null;
[L1225]                    Balance[this] := 0;
[L1226]        CALL        call __var_4 := FreshRefGenerator__success();
[L833]                     havoc newRef;
[L834]                     assume Alloc[newRef] == false;
[L835]                     Alloc[newRef] := true;
[L836]                     assume newRef != null;
[L1226]        RET         call __var_4 := FreshRefGenerator__success();
[L1227]        COND FALSE  !(revert)
[L1232]                    deposited_EscrowVault[this] := __var_4;
[L1233]                    M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]                    sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]                    beneficiary_EscrowVault[this] := null;
[L1236]                    superOwner_EscrowVault[this] := null;
[L1237]                    __var_2 := null;
[L1238]        COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]                    __var_3 := null;
[L1245]        COND FALSE  !(!(_superOwner_s224 != null))
[L1251]                    beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]                    superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]                    state_EscrowVault[this] := 0;
[L1299]        RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]        COND FALSE  !(revert)
[L287]         RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]                     assume !revert && gas >= 0;
[L2545]        RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L2546]                    assume !revert && gas >= 0;
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND TRUE   choice == 6
[L2476]                    gas := gas - 21000;
[L2477]        COND TRUE   gas >= 0
[L2479]                    assume msgvalue_MSG == 0;
[L2480]        CALL        call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L341]                     havoc __exception;
[L342]                     revert := false;
[L343]         COND FALSE  !(__exception)
[L363]         CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]        COND FALSE  !(revert)
[L1419]                    gas := gas - 367;
[L1420]        COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]                    gas := gas - 20337;
[L1427]                    state_EscrowVault[this] := 2;
[L1428]                    assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]         RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]                     assume !revert && gas >= 0;
[L2480]        RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND TRUE   choice == 7
[L2467]                    gas := gas - 21000;
[L2468]        COND TRUE   gas >= 0
[L2470]                    assume msgvalue_MSG >= 0;
[L2471]        CALL        call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND TRUE   choice == 5
[L2485]                    gas := gas - 21000;
[L2486]        COND TRUE   gas >= 0
[L2488]                    assume msgvalue_MSG == 0;
[L2489]        CALL        call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L379]                     havoc __exception;
[L380]                     revert := false;
[L381]         COND FALSE  !(__exception)
[L401]         CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]                    gas := gas - 276;
[L1492]        COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]                    gas := gas - 367;
[L1499]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]                    gas := gas - 468;
[L1506]                    assume _amount_s320 >= 0;
[L1507]                    __var_6 := this;
[L1508]                    assume Balance[this] >= 0;
[L1509]                    assume _amount_s320 >= 0;
[L1510]        COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]                    gas := gas - 36029;
[L1517]                    __var_7 := gas;
[L1518]        COND TRUE   gas > 2300
[L1520]                    gas := 2300;
[L1523]                    __var_7 := __var_7 - gas;
[L1524]                    assume _amount_s320 >= 0;
[L1525]        CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1525]        RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]        COND FALSE  !(!__var_8)
[L1532]                    gas := __var_7 + gas;
[L1533]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]         RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]                     assume !revert && gas >= 0;
[L2489]        RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L2549]        RET         call CorralChoice_EscrowVault(this);
[L2549]        CALL        call CorralChoice_EscrowVault(this);
[L2436]                    havoc msgsender_MSG;
[L2437]                    havoc msgvalue_MSG;
[L2438]                    havoc choice;
[L2439]                    havoc newOwner_s150;
[L2440]                    havoc _superOwner_s224;
[L2441]                    havoc _beneficiary_s224;
[L2442]                    havoc investor_s256;
[L2443]                    havoc _amount_s320;
[L2444]                    havoc investor_s431;
[L2445]                    havoc tmpNow;
[L2446]                    havoc gas;
[L2447]                    assume gas > 4000000 && gas <= 8000000;
[L2448]                    tmpNow := now;
[L2449]                    havoc now;
[L2450]                    assume now > tmpNow;
[L2451]                    assume msgsender_MSG != null;
[L2452]                    assume DType[msgsender_MSG] != SafeMath;
[L2453]                    assume DType[msgsender_MSG] != Ownable;
[L2454]                    assume DType[msgsender_MSG] != EscrowVault;
[L2455]                    Alloc[msgsender_MSG] := true;
[L2456]        COND FALSE  !(choice == 8)
[L2465]        COND FALSE  !(choice == 7)
[L2474]        COND FALSE  !(choice == 6)
[L2483]        COND FALSE  !(choice == 5)
[L2492]        COND FALSE  !(choice == 4)
[L2501]        COND TRUE   choice == 3
[L2503]                    gas := gas - 21000;
[L2504]        COND TRUE   gas >= 0
[L2506]                    assume msgvalue_MSG == 0;
[L2507]        CALL        call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L455]                     havoc __exception;
[L456]                     revert := false;
[L457]         COND FALSE  !(__exception)
[L477]         CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]        COND FALSE  !(revert)
[L1667]                    gas := gas - 367;
[L1668]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]                    gas := gas - 15;
[L1675]        CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]        COND FALSE  !(revert)
[L1597]                    gas := gas - 367;
[L1598]        COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]                    gas := gas - 416;
[L1605]                    assume balance_s349 >= 0;
[L1606]                    __var_9 := this;
[L1607]                    assume Balance[this] >= 0;
[L1608]                    balance_s349 := Balance[this];
[L1609]                    assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]                    gas := gas - 36020;
[L1611]                    __var_10 := gas;
[L1612]        COND TRUE   gas > 2300
[L1614]                    gas := 2300;
[L1617]                    __var_10 := __var_10 - gas;
[L1618]                    assume balance_s349 >= 0;
[L1619]        CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]                    havoc __exception;
[L2254]        COND FALSE  !(__exception)
[L2280]        COND TRUE   Balance[from] >= amount
[L2282]        CALL        call FallbackDispatch__success(from, to, amount);
[L1848]        COND FALSE  !(DType[to] == EscrowVault)
[L1852]        COND FALSE  !(DType[to] == Ownable)
[L1858]        CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]                    assume Balance[from] >= amount;
[L2036]                    Balance[from] := Balance[from] - amount;
[L2037]                    Balance[to] := Balance[to] + amount;
[L2038]        COND FALSE  !(choice == 0)
[L2044]        COND TRUE   gas < 21000
[L1858]        RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]        COND FALSE  !(revert)
[L2282]        RET         call FallbackDispatch__success(from, to, amount);
[L2283]                    success := true;
[L2290]                    assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                       revert := revert_hold;
[L1619]        RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]        COND FALSE  !(!__var_11)
[L1626]                    gas := __var_10 + gas;
[L1675]        RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]        COND FALSE  !(revert)
[L1681]                    gas := gas - 20337;
[L1682]                    state_EscrowVault[this] := 3;
[L1683]                    assert { :EventEmitted "Close_EscrowVault" } true;
[L477]         RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       assume ben == beneficiary_EscrowVault[this];
[L7]                       success_close_EscrowVault0 := true;
[L7]                       success_close_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L2507]        RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
[L2549]        RET         call CorralChoice_EscrowVault(this);

Loop:
[L2549]  CALL        call CorralChoice_EscrowVault(this);
[L2436]              havoc msgsender_MSG;
[L2437]              havoc msgvalue_MSG;
[L2438]              havoc choice;
[L2439]              havoc newOwner_s150;
[L2440]              havoc _superOwner_s224;
[L2441]              havoc _beneficiary_s224;
[L2442]              havoc investor_s256;
[L2443]              havoc _amount_s320;
[L2444]              havoc investor_s431;
[L2445]              havoc tmpNow;
[L2446]              havoc gas;
[L2447]              assume gas > 4000000 && gas <= 8000000;
[L2448]              tmpNow := now;
[L2449]              havoc now;
[L2450]              assume now > tmpNow;
[L2451]              assume msgsender_MSG != null;
[L2452]              assume DType[msgsender_MSG] != SafeMath;
[L2453]              assume DType[msgsender_MSG] != Ownable;
[L2454]              assume DType[msgsender_MSG] != EscrowVault;
[L2455]              Alloc[msgsender_MSG] := true;
[L2456]  COND FALSE  !(choice == 8)
[L2465]  COND FALSE  !(choice == 7)
[L2474]  COND FALSE  !(choice == 6)
[L2483]  COND FALSE  !(choice == 5)
[L2492]  COND FALSE  !(choice == 4)
[L2501]  COND FALSE  !(choice == 3)
[L2510]  COND FALSE  !(choice == 2)
[L2519]  COND FALSE  !(choice == 1)
[L2549]  RET         call CorralChoice_EscrowVault(this);

[2020-05-30 22:23:11,514 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:11,515 INFO  L82        PathProgramCache]: Analyzing trace with hash -932066747, now seen corresponding path program 2 times
[2020-05-30 22:23:11,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:11,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:11,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:11,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:11,598 INFO  L82        PathProgramCache]: Analyzing trace with hash 517852443, now seen corresponding path program 1 times
[2020-05-30 22:23:11,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:11,599 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:11,600 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:11,602 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-05-30 22:23:11,603 INFO  L82        PathProgramCache]: Analyzing trace with hash 901602135, now seen corresponding path program 1 times
[2020-05-30 22:23:11,603 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-05-30 22:23:11,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:11,640 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 79 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.003s total
Resizing node table from 2473 to 4943
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 2179 to 4357
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1759 to 3517
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-05-30 22:23:12,687 WARN  L188               SmtUtils]: Spent 179.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 161
[2020-05-30 22:23:12,879 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 196
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
[2020-05-30 22:23:13,086 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification that was a NOOP. DAG size: 248
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-05-30 22:23:13,308 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 201
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-30 22:23:13,806 WARN  L188               SmtUtils]: Spent 142.00 ms on a formula simplification. DAG size of input: 201 DAG size of output: 194
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-30 22:23:14,375 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 197
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-05-30 22:23:14,555 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 141
[2020-05-30 22:23:14,711 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification that was a NOOP. DAG size: 257
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-05-30 22:23:14,860 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification that was a NOOP. DAG size: 208
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-05-30 22:23:15,350 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 215 DAG size of output: 208
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #6: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-30 22:23:15,669 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 203
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
[2020-05-30 22:23:18,877 WARN  L188               SmtUtils]: Spent 2.82 s on a formula simplification. DAG size of input: 813 DAG size of output: 756
Garbage collection #1: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #2: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #3: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #4: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #5: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #6: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #7: 21023 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21023 to 42043
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-05-30 22:23:19,029 WARN  L188               SmtUtils]: Spent 123.00 ms on a formula simplification that was a NOOP. DAG size: 218
[2020-05-30 22:23:19,239 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification that was a NOOP. DAG size: 285
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-05-30 22:23:19,352 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 218
[2020-05-30 22:23:19,717 WARN  L188               SmtUtils]: Spent 364.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 286
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
[2020-05-30 22:23:19,888 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification that was a NOOP. DAG size: 278
[2020-05-30 22:23:19,911 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-05-30 22:23:19,919 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 30.05 10:23:19 BasicIcfg
[2020-05-30 22:23:19,919 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-05-30 22:23:19,920 INFO  L168              Benchmark]: Toolchain (without parser) took 49669.98 ms. Allocated memory was 514.9 MB in the beginning and 2.6 GB in the end (delta: 2.1 GB). Free memory was 460.2 MB in the beginning and 387.6 MB in the end (delta: 72.6 MB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,921 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,921 INFO  L168              Benchmark]: Boogie Preprocessor took 66.35 ms. Allocated memory is still 514.9 MB. Free memory was 460.2 MB in the beginning and 453.4 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,922 INFO  L168              Benchmark]: UtopiaSpecLang took 38.92 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.4 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,923 INFO  L168              Benchmark]: Boogie Printer took 11.12 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 448.1 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,923 INFO  L168              Benchmark]: RCFGBuilder took 430.24 ms. Allocated memory is still 514.9 MB. Free memory was 448.1 MB in the beginning and 391.4 MB in the end (delta: 56.6 MB). Peak memory consumption was 56.6 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,923 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 514.9 MB. Free memory was 391.4 MB in the beginning and 386.9 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,924 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1863.53 ms. Allocated memory was 514.9 MB in the beginning and 738.7 MB in the end (delta: 223.9 MB). Free memory was 386.9 MB in the beginning and 461.1 MB in the end (delta: -74.2 MB). Peak memory consumption was 164.7 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,924 INFO  L168              Benchmark]: BlockEncodingV2 took 151.22 ms. Allocated memory is still 738.7 MB. Free memory was 461.1 MB in the beginning and 377.0 MB in the end (delta: 84.1 MB). Peak memory consumption was 84.1 MB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,924 INFO  L168              Benchmark]: BuchiAutomizer took 47064.71 ms. Allocated memory was 738.7 MB in the beginning and 2.6 GB in the end (delta: 1.8 GB). Free memory was 377.0 MB in the beginning and 387.6 MB in the end (delta: -10.6 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-05-30 22:23:19,929 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4710 locations, 12314 edges
  - StatisticsResult: Encoded RCFG
    4646 locations, 12075 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.12 ms. Allocated memory is still 514.9 MB. Free memory is still 468.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 66.35 ms. Allocated memory is still 514.9 MB. Free memory was 460.2 MB in the beginning and 453.4 MB in the end (delta: 6.7 MB). Peak memory consumption was 6.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 38.92 ms. Allocated memory is still 514.9 MB. Free memory was 453.4 MB in the beginning and 449.4 MB in the end (delta: 4.0 MB). Peak memory consumption was 4.0 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 11.12 ms. Allocated memory is still 514.9 MB. Free memory was 449.4 MB in the beginning and 448.1 MB in the end (delta: 1.4 MB). Peak memory consumption was 1.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 430.24 ms. Allocated memory is still 514.9 MB. Free memory was 448.1 MB in the beginning and 391.4 MB in the end (delta: 56.6 MB). Peak memory consumption was 56.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 514.9 MB. Free memory was 391.4 MB in the beginning and 386.9 MB in the end (delta: 4.5 MB). Peak memory consumption was 4.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1863.53 ms. Allocated memory was 514.9 MB in the beginning and 738.7 MB in the end (delta: 223.9 MB). Free memory was 386.9 MB in the beginning and 461.1 MB in the end (delta: -74.2 MB). Peak memory consumption was 164.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 151.22 ms. Allocated memory is still 738.7 MB. Free memory was 461.1 MB in the beginning and 377.0 MB in the end (delta: 84.1 MB). Peak memory consumption was 84.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 47064.71 ms. Allocated memory was 738.7 MB in the beginning and 2.6 GB in the end (delta: 1.8 GB). Free memory was 377.0 MB in the beginning and 387.6 MB in the end (delta: -10.6 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    4 locations, 9 edges
  - StatisticsResult: Initial RCFG
    998 locations, 1301 edges
  - StatisticsResult: BuchiProgram size
    4710 locations, 12314 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.19 modules have a trivial ranking function, the largest among these consists of 34 locations. The remainder module has 11870 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 47.0s and 20 iterations.  TraceHistogramMax:3. Analysis of lassos took 10.8s. Construction of modules took 24.4s. BÃ¼chi inclusion checks took 9.5s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 19 MinimizatonAttempts, 6245 StatesRemovedByMinimization, 16 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 11870 states and ocurred in iteration 19.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 75279 SDtfs, 106211 SDslu, 226635 SDs, 0 SdLazy, 407894 SolverSat, 18714 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 24.4s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc1 concLT0 SILN0 SILU18 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(4000015) = (new EscrowVault).value(4000009)({from : 4000018, _superOwner : 4000018, _beneficiary : 4000020});
[L265]               havoc __exception;
[L266]               revert := false;
[L267]   COND FALSE  !(__exception)
[L287]   CALL        call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1293]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1112]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1091]              assume msgsender_MSG != null;
[L1092]              Balance[this] := 0;
[L1093]              owner_Ownable[this] := null;
[L1094]              owner_Ownable[this] := msgsender_MSG;
[L1112]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1113]  COND FALSE  !(revert)
[L1293]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L1294]  COND FALSE  !(revert)
[L1299]  CALL        call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1224]              assume msgsender_MSG != null;
[L1225]              Balance[this] := 0;
[L1226]  CALL        call __var_4 := FreshRefGenerator__success();
[L833]               havoc newRef;
[L834]               assume Alloc[newRef] == false;
[L835]               Alloc[newRef] := true;
[L836]               assume newRef != null;
[L1226]  RET         call __var_4 := FreshRefGenerator__success();
[L1227]  COND FALSE  !(revert)
[L1232]              deposited_EscrowVault[this] := __var_4;
[L1233]              M_Ref_int_deposited0[deposited_EscrowVault[this]] := zeroRefIntArr();
[L1234]              sum_deposited0[deposited_EscrowVault[this]] := 0;
[L1235]              beneficiary_EscrowVault[this] := null;
[L1236]              superOwner_EscrowVault[this] := null;
[L1237]              __var_2 := null;
[L1238]  COND FALSE  !(!(_beneficiary_s224 != null))
[L1244]              __var_3 := null;
[L1245]  COND FALSE  !(!(_superOwner_s224 != null))
[L1251]              beneficiary_EscrowVault[this] := _beneficiary_s224;
[L1252]              superOwner_EscrowVault[this] := _superOwner_s224;
[L1253]              state_EscrowVault[this] := 0;
[L1299]  RET         call EscrowVault_EscrowVault_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L1300]  COND FALSE  !(revert)
[L287]   RET         call EscrowVault_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
[L288]               assume !revert && gas >= 0;
[L2545]  RET         call EscrowVault_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _superOwner_s224, _beneficiary_s224);
EscrowVault(4000015).setGoalReached.gas(3979002)({from : 4000018});
[L341]               havoc __exception;
[L342]               revert := false;
[L343]   COND FALSE  !(__exception)
[L363]   CALL        call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1413]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1413]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1414]  COND FALSE  !(revert)
[L1419]              gas := gas - 367;
[L1420]  COND FALSE  !(!(state_EscrowVault[this] == 0))
[L1426]              gas := gas - 20337;
[L1427]              state_EscrowVault[this] := 2;
[L1428]              assert { :EventEmitted "GoalReached_EscrowVault" } true;
[L363]   RET         call setGoalReached_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L364]               assume !revert && gas >= 0;
[L2480]  RET         call setGoalReached_EscrowVault(this, msgsender_MSG, msgvalue_MSG);
EscrowVault(4000015).deposit.gas(3979003).value(7)({from : 4000018, investor : 4000004});
[L303]                     havoc __exception;
[L304]                     revert := false;
[L305]         COND FALSE  !(__exception)
[L325]         CALL        call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L1354]                    assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L1355]                    Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L1356]                    Balance[this] := Balance[this] + msgvalue_MSG;
[L1357]        CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]                    gas := gas - 1932;
[L2311]        COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1357]        RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1358]        COND FALSE  !(revert)
[L1363]                    gas := gas - 733;
[L1364]        COND FALSE  !(!(state_EscrowVault[this] == 0 || state_EscrowVault[this] == 2))
[L1370]                    gas := gas - 20438;
[L1371]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1372]                    assume M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] >= 0;
[L1373]                    assume msgvalue_MSG >= 0;
[L1374]        CALL        call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1055]                    gas := gas - 3;
[L1056]                    gas := gas - 17;
[L1057]                    assume c_s95 >= 0;
[L1058]                    assume a_s96 >= 0;
[L1059]                    assume b_s96 >= 0;
[L1060]                    assume a_s96 + b_s96 >= 0;
[L1061]                    c_s95 := a_s96 + b_s96;
[L1062]                    gas := gas - 32;
[L1063]                    assume c_s95 >= 0;
[L1064]                    assume a_s96 >= 0;
[L1065]        COND FALSE  !(!(c_s95 >= a_s96))
[L1071]                    gas := gas - 10;
[L1072]                    assume c_s95 >= 0;
[L1073]                    __ret_0_ := c_s95;
[L1374]        RET         call __var_5 := add_SafeMath__success(this, this, 0, M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256], msgvalue_MSG);
[L1375]        COND FALSE  !(revert)
[L1380-L1381]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] - M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1382]                    M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256] := __var_5;
[L1383-L1384]              sum_deposited0[deposited_EscrowVault[this]] := sum_deposited0[deposited_EscrowVault[this]] + M_Ref_int_deposited0[deposited_EscrowVault[this]][investor_s256];
[L1385]                    assume __var_5 >= 0;
[L325]         RET         call deposit_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, investor_s256);
[L326]                     assume !revert && gas >= 0;
[L7]                       revert_hold := revert;
[L7]                       revert := false;
[L7]                       success_deposit_EscrowVault0 := true;
[L7]                       success_deposit_EscrowVault0 := false;
[L7]                       revert := revert_hold;
[L7]                       fsum_deposit_EscrowVault_2_0 := fsum_deposit_EscrowVault_2_0 + msgvalue_MSG;
[L2471]        RET         call deposit_EscrowVault(this, msgsender_MSG, msgvalue_MSG, investor_s256);
EscrowVault(4000015).withdraw.gas(3979004)({from : 4000018, _amount : 6});
[L379]               havoc __exception;
[L380]               revert := false;
[L381]   COND FALSE  !(__exception)
[L401]   CALL        call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L1491]              gas := gas - 276;
[L1492]  COND FALSE  !(!(msgsender_MSG == superOwner_EscrowVault[this]))
[L1498]              gas := gas - 367;
[L1499]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1505]              gas := gas - 468;
[L1506]              assume _amount_s320 >= 0;
[L1507]              __var_6 := this;
[L1508]              assume Balance[this] >= 0;
[L1509]              assume _amount_s320 >= 0;
[L1510]  COND FALSE  !(!(_amount_s320 <= Balance[this] && _amount_s320 > 0))
[L1516]              gas := gas - 36029;
[L1517]              __var_7 := gas;
[L1518]  COND TRUE   gas > 2300
[L1520]              gas := 2300;
[L1523]              __var_7 := __var_7 - gas;
[L1524]              assume _amount_s320 >= 0;
[L1525]  CALL        call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]              assume Balance[from] >= amount;
[L2036]              Balance[from] := Balance[from] - amount;
[L2037]              Balance[to] := Balance[to] + amount;
[L2038]  COND FALSE  !(choice == 0)
[L2044]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1525]  RET         call __var_8 := send__success(this, beneficiary_EscrowVault[this], _amount_s320);
[L1526]  COND FALSE  !(!__var_8)
[L1532]              gas := __var_7 + gas;
[L1533]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L401]   RET         call withdraw_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
[L402]               assume !revert && gas >= 0;
[L2489]  RET         call withdraw_EscrowVault(this, msgsender_MSG, msgvalue_MSG, _amount_s320);
EscrowVault(4000015).close.gas(3979001)({from : 4000018});
[L455]               havoc __exception;
[L456]               revert := false;
[L457]   COND FALSE  !(__exception)
[L477]   CALL        call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1661]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1661]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1662]  COND FALSE  !(revert)
[L1667]              gas := gas - 367;
[L1668]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1674]              gas := gas - 15;
[L1675]  CALL        call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1591]  CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L2310]              gas := gas - 1932;
[L2311]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L1591]  RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L1592]  COND FALSE  !(revert)
[L1597]              gas := gas - 367;
[L1598]  COND FALSE  !(!(state_EscrowVault[this] == 2))
[L1604]              gas := gas - 416;
[L1605]              assume balance_s349 >= 0;
[L1606]              __var_9 := this;
[L1607]              assume Balance[this] >= 0;
[L1608]              balance_s349 := Balance[this];
[L1609]              assert { :EventEmitted "Withdrawal_EscrowVault" } true;
[L1610]              gas := gas - 36020;
[L1611]              __var_10 := gas;
[L1612]  COND TRUE   gas > 2300
[L1614]              gas := 2300;
[L1617]              __var_10 := __var_10 - gas;
[L1618]              assume balance_s349 >= 0;
[L1619]  CALL        call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L2253]              havoc __exception;
[L2254]  COND FALSE  !(__exception)
[L2280]  COND TRUE   Balance[from] >= amount
[L2282]  CALL        call FallbackDispatch__success(from, to, amount);
[L1848]  COND FALSE  !(DType[to] == EscrowVault)
[L1852]  COND FALSE  !(DType[to] == Ownable)
[L1858]  CALL        call Fallback_UnknownType__success(from, to, amount);
[L2035]              assume Balance[from] >= amount;
[L2036]              Balance[from] := Balance[from] - amount;
[L2037]              Balance[to] := Balance[to] + amount;
[L2038]  COND FALSE  !(choice == 0)
[L2044]  COND TRUE   gas < 21000
[L1858]  RET         call Fallback_UnknownType__success(from, to, amount);
[L1859]  COND FALSE  !(revert)
[L2282]  RET         call FallbackDispatch__success(from, to, amount);
[L2283]              success := true;
[L2290]              assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume !(to == ben && amount == fsum_deposit_EscrowVault_2_0);
[L7]                 revert := revert_hold;
[L1619]  RET         call __var_11 := send__success(this, beneficiary_EscrowVault[this], balance_s349);
[L1620]  COND FALSE  !(!__var_11)
[L1626]              gas := __var_10 + gas;
[L1675]  RET         call withdrawAll_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L1676]  COND FALSE  !(revert)
[L1681]              gas := gas - 20337;
[L1682]              state_EscrowVault[this] := 3;
[L1683]              assert { :EventEmitted "Close_EscrowVault" } true;
[L477]   RET         call close_EscrowVault__success(this, msgsender_MSG, msgvalue_MSG);
[L478]               assume !revert && gas >= 0;
[L7]                 revert_hold := revert;
[L7]                 revert := false;
[L7]                 assume ben == beneficiary_EscrowVault[this];
[L7]                 success_close_EscrowVault0 := true;
[L7]                 success_close_EscrowVault0 := false;
[L7]                 revert := revert_hold;
[L2507]  RET         call close_EscrowVault(this, msgsender_MSG, msgvalue_MSG);

Loop:

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
