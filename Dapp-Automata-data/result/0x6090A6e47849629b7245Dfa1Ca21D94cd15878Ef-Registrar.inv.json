[
    {
        "func": "releaseDeed(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "releaseDeed(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "invalidateName(unhashedName)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "invalidateName(unhashedName)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(ens) != 0",
            "msg.sender != 0",
            "ori(registryStarted) >= msg.value",
            "ori(registryStarted) > msg.value",
            "ori(registryStarted) != msg.value",
            "ori(ens) != msg.sender"
        ],
        "postconditions": [
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens == ori(ens)",
            "ens != msg.sender",
            "registryStarted >= msg.value",
            "registryStarted > msg.value",
            "registryStarted != msg.value"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "cancelBid(bidder,seal)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "cancelBid(bidder,seal)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "unsealBid(_hash,_value,_salt)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "unsealBid(_hash,_value,_salt)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferRegistrars(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferRegistrars(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transfer(_hash,newOwner)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transfer(_hash,newOwner)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "finalizeAuction(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "finalizeAuction(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "newBid(sealedBid)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "ori(sealedBids[msg.sender][sealedBid]) == 0",
            "msg.value > 0",
            "sealedBid != \"\"",
            "ori(ens) != 0",
            "msg.sender != 0",
            "ori(registryStarted) <= msg.value",
            "ori(registryStarted) < msg.value",
            "ori(registryStarted) != msg.value",
            "ori(sealedBids[msg.sender][sealedBid]) != ori(ens)",
            "ori(sealedBids[msg.sender][sealedBid]) != msg.sender",
            "ori(ens) != msg.sender"
        ],
        "postconditions": [
            "sealedBids[msg.sender][sealedBid] != 0",
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "sealedBids[msg.sender][sealedBid] != ens",
            "sealedBids[msg.sender][sealedBid] != ori(sealedBids[msg.sender][sealedBid])",
            "sealedBids[msg.sender][sealedBid] != ori(ens)",
            "sealedBids[msg.sender][sealedBid] != msg.sender",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens != ori(sealedBids[msg.sender][sealedBid])",
            "ens == ori(ens)",
            "ens != msg.sender",
            "registryStarted <= msg.value",
            "registryStarted < msg.value",
            "registryStarted != msg.value"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "newBid(sealedBid)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "msg.value one of [0,10000000000000,19000000000000000,1000000000000000,10000000000000000,4150000000000000,100000000000000]",
            "sealedBid != \"\"",
            "ori(ens) != 0",
            "msg.sender != 0",
            "ori(registryStarted) != msg.value",
            "ori(sealedBids[msg.sender][sealedBid]) != ori(ens)",
            "ori(sealedBids[msg.sender][sealedBid]) != msg.sender",
            "ori(ens) != msg.sender"
        ],
        "postconditions": [
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "sealedBids[msg.sender][sealedBid] != ens",
            "sealedBids[msg.sender][sealedBid] == ori(sealedBids[msg.sender][sealedBid])",
            "sealedBids[msg.sender][sealedBid] != ori(ens)",
            "sealedBids[msg.sender][sealedBid] != msg.sender",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens != ori(sealedBids[msg.sender][sealedBid])",
            "ens == ori(ens)",
            "ens != msg.sender",
            "registryStarted != msg.value"
        ],
        "falsified_preconditions": [
            "ori(sealedBids[msg.sender][sealedBid]) == 0",
            "msg.value == 0",
            "msg.value > 0",
            "ori(registryStarted) >= msg.value",
            "ori(registryStarted) > msg.value",
            "ori(registryStarted) <= msg.value",
            "ori(registryStarted) < msg.value"
        ],
        "falsified_postconditions": [
            "sealedBids[msg.sender][sealedBid] == 0",
            "registryStarted >= msg.value",
            "registryStarted > msg.value",
            "registryStarted <= msg.value",
            "registryStarted < msg.value"
        ]
    },
    {
        "func": "eraseNode(labels)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "eraseNode(labels)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "startAuctions(_hashes)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "_hashes != \"\"",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(ens) != 0",
            "msg.sender != 0",
            "ori(registryStarted) >= msg.value",
            "ori(registryStarted) > msg.value",
            "ori(registryStarted) != msg.value",
            "ori(ens) != msg.sender"
        ],
        "postconditions": [
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens == ori(ens)",
            "ens != msg.sender",
            "registryStarted >= msg.value",
            "registryStarted > msg.value",
            "registryStarted != msg.value"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "startAuctions(_hashes)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "_hashes != \"\"",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(ens) != 0",
            "msg.sender != 0",
            "ori(registryStarted) >= msg.value",
            "ori(registryStarted) > msg.value",
            "ori(registryStarted) != msg.value",
            "ori(ens) != msg.sender"
        ],
        "postconditions": [
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens == ori(ens)",
            "ens != msg.sender",
            "registryStarted >= msg.value",
            "registryStarted > msg.value",
            "registryStarted != msg.value"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "acceptRegistrarTransfer(hash,deed,registrationDate)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "acceptRegistrarTransfer(hash,deed,registrationDate)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "startAuction(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(_entries[_hash].deed) == 0",
            "ori(ens) != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "_hash != \"\"",
            "msg.sender != 0",
            "ori(rootNode) != \"\"",
            "ori(_entries[_hash].value) == 0",
            "ori(_entries[_hash].value) one of [0]",
            "ori(_entries[_hash].highestBid) == 0",
            "ori(_entries[_hash].highestBid) one of [0]",
            "ori(_entries[_hash].registrationDate) >= msg.value",
            "ori(_entries[_hash].registrationDate) != ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) >= ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) >= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].deed) != ori(ens)",
            "ori(_entries[_hash].deed) != msg.sender",
            "ori(ens) != msg.sender",
            "msg.value <= ori(registryStarted)",
            "msg.value < ori(registryStarted)",
            "msg.value != ori(registryStarted)",
            "msg.value == ori(_entries[_hash].value)",
            "msg.value >= ori(_entries[_hash].value)",
            "msg.value <= ori(_entries[_hash].value)",
            "msg.value == ori(_entries[_hash].highestBid)",
            "msg.value >= ori(_entries[_hash].highestBid)",
            "msg.value <= ori(_entries[_hash].highestBid)",
            "ori(registryStarted) >= ori(_entries[_hash].value)",
            "ori(registryStarted) > ori(_entries[_hash].value)",
            "ori(registryStarted) != ori(_entries[_hash].value)",
            "ori(registryStarted) >= ori(_entries[_hash].highestBid)",
            "ori(registryStarted) > ori(_entries[_hash].highestBid)",
            "ori(registryStarted) != ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) == ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) >= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) <= ori(_entries[_hash].highestBid)"
        ],
        "postconditions": [
            "_entries[_hash].value == 0",
            "_entries[_hash].value one of [0]",
            "_entries[_hash].highestBid == 0",
            "_entries[_hash].highestBid one of [0]",
            "rootNode != \"\"",
            "_entries[_hash].registrationDate > 0",
            "_entries[_hash].deed == 0",
            "ens != 0",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(_entries[_hash].registrationDate) >= _entries[_hash].value",
            "ori(_entries[_hash].registrationDate) >= _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) <= _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) != registryStarted",
            "_entries[_hash].value == _entries[_hash].highestBid",
            "_entries[_hash].value >= _entries[_hash].highestBid",
            "_entries[_hash].value <= _entries[_hash].highestBid",
            "_entries[_hash].value == msg.value",
            "_entries[_hash].value >= msg.value",
            "_entries[_hash].value <= msg.value",
            "_entries[_hash].value <= ori(registryStarted)",
            "_entries[_hash].value < ori(registryStarted)",
            "_entries[_hash].value != ori(registryStarted)",
            "_entries[_hash].value <= _entries[_hash].registrationDate",
            "_entries[_hash].value < _entries[_hash].registrationDate",
            "_entries[_hash].value != _entries[_hash].registrationDate",
            "_entries[_hash].value == ori(_entries[_hash].value)",
            "_entries[_hash].value >= ori(_entries[_hash].value)",
            "_entries[_hash].value <= ori(_entries[_hash].value)",
            "_entries[_hash].value <= registryStarted",
            "_entries[_hash].value < registryStarted",
            "_entries[_hash].value != registryStarted",
            "_entries[_hash].value == ori(_entries[_hash].highestBid)",
            "_entries[_hash].value >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].value <= ori(_entries[_hash].highestBid)",
            "_entries[_hash].highestBid == msg.value",
            "_entries[_hash].highestBid >= msg.value",
            "_entries[_hash].highestBid <= msg.value",
            "_entries[_hash].highestBid <= ori(registryStarted)",
            "_entries[_hash].highestBid < ori(registryStarted)",
            "_entries[_hash].highestBid != ori(registryStarted)",
            "_entries[_hash].highestBid <= _entries[_hash].registrationDate",
            "_entries[_hash].highestBid < _entries[_hash].registrationDate",
            "_entries[_hash].highestBid != _entries[_hash].registrationDate",
            "_entries[_hash].highestBid == ori(_entries[_hash].value)",
            "_entries[_hash].highestBid >= ori(_entries[_hash].value)",
            "_entries[_hash].highestBid <= ori(_entries[_hash].value)",
            "_entries[_hash].highestBid <= registryStarted",
            "_entries[_hash].highestBid < registryStarted",
            "_entries[_hash].highestBid != registryStarted",
            "_entries[_hash].highestBid == ori(_entries[_hash].highestBid)",
            "_entries[_hash].highestBid >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].highestBid <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].deed) == _entries[_hash].deed",
            "ori(_entries[_hash].deed) != ens",
            "ori(ens) != _entries[_hash].deed",
            "ori(ens) == ens",
            "msg.value <= _entries[_hash].registrationDate",
            "msg.value < _entries[_hash].registrationDate",
            "msg.value != _entries[_hash].registrationDate",
            "msg.value <= registryStarted",
            "msg.value < registryStarted",
            "msg.value != registryStarted",
            "ori(registryStarted) <= _entries[_hash].registrationDate",
            "ori(registryStarted) < _entries[_hash].registrationDate",
            "ori(registryStarted) != _entries[_hash].registrationDate",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "msg.sender != _entries[_hash].deed",
            "msg.sender != ens",
            "_entries[_hash].registrationDate >= ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate > ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate != ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate >= registryStarted",
            "_entries[_hash].registrationDate > registryStarted",
            "_entries[_hash].registrationDate != registryStarted",
            "_entries[_hash].registrationDate >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].registrationDate > ori(_entries[_hash].highestBid)",
            "_entries[_hash].registrationDate != ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) <= registryStarted",
            "ori(_entries[_hash].value) < registryStarted",
            "ori(_entries[_hash].value) != registryStarted",
            "_entries[_hash].deed != ens",
            "registryStarted >= ori(_entries[_hash].highestBid)",
            "registryStarted > ori(_entries[_hash].highestBid)",
            "registryStarted != ori(_entries[_hash].highestBid)"
        ],
        "falsified_preconditions": [
            "ori(_entries[_hash].registrationDate) == 0",
            "ori(_entries[_hash].registrationDate) > 0",
            "ori(_entries[_hash].registrationDate) == msg.value",
            "ori(_entries[_hash].registrationDate) > msg.value",
            "ori(_entries[_hash].registrationDate) <= msg.value",
            "ori(_entries[_hash].registrationDate) != msg.value",
            "ori(_entries[_hash].registrationDate) >= ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) > ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) <= ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) < ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) == ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) > ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) <= ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) != ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) == ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) > ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) != ori(_entries[_hash].highestBid)"
        ],
        "falsified_postconditions": [
            "ori(_entries[_hash].registrationDate) == _entries[_hash].value",
            "ori(_entries[_hash].registrationDate) > _entries[_hash].value",
            "ori(_entries[_hash].registrationDate) <= _entries[_hash].value",
            "ori(_entries[_hash].registrationDate) != _entries[_hash].value",
            "ori(_entries[_hash].registrationDate) == _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) > _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) <= _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) != _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) == _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) >= _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) < _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) != _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) >= registryStarted",
            "ori(_entries[_hash].registrationDate) > registryStarted",
            "ori(_entries[_hash].registrationDate) <= registryStarted",
            "ori(_entries[_hash].registrationDate) < registryStarted"
        ]
    },
    {
        "func": "startAuction(_hash)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "ori(_entries[_hash].registrationDate) == 0",
            "ori(_entries[_hash].registrationDate) one of [0]",
            "ori(_entries[_hash].deed) == 0",
            "ori(ens) != 0",
            "msg.value == 0",
            "msg.value one of [0]",
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "_hash != \"\"",
            "msg.sender != 0",
            "ori(rootNode) != \"\"",
            "ori(_entries[_hash].value) == 0",
            "ori(_entries[_hash].value) one of [0]",
            "ori(_entries[_hash].highestBid) == 0",
            "ori(_entries[_hash].highestBid) one of [0]",
            "ori(_entries[_hash].registrationDate) == msg.value",
            "ori(_entries[_hash].registrationDate) >= msg.value",
            "ori(_entries[_hash].registrationDate) <= msg.value",
            "ori(_entries[_hash].registrationDate) <= ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) < ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) != ori(registryStarted)",
            "ori(_entries[_hash].registrationDate) == ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) >= ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) <= ori(_entries[_hash].value)",
            "ori(_entries[_hash].registrationDate) == ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) >= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].deed) != ori(ens)",
            "ori(_entries[_hash].deed) != msg.sender",
            "ori(ens) != msg.sender",
            "msg.value <= ori(registryStarted)",
            "msg.value < ori(registryStarted)",
            "msg.value != ori(registryStarted)",
            "msg.value == ori(_entries[_hash].value)",
            "msg.value >= ori(_entries[_hash].value)",
            "msg.value <= ori(_entries[_hash].value)",
            "msg.value == ori(_entries[_hash].highestBid)",
            "msg.value >= ori(_entries[_hash].highestBid)",
            "msg.value <= ori(_entries[_hash].highestBid)",
            "ori(registryStarted) >= ori(_entries[_hash].value)",
            "ori(registryStarted) > ori(_entries[_hash].value)",
            "ori(registryStarted) != ori(_entries[_hash].value)",
            "ori(registryStarted) >= ori(_entries[_hash].highestBid)",
            "ori(registryStarted) > ori(_entries[_hash].highestBid)",
            "ori(registryStarted) != ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) == ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) >= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) <= ori(_entries[_hash].highestBid)"
        ],
        "postconditions": [
            "_entries[_hash].value == 0",
            "_entries[_hash].value one of [0]",
            "_entries[_hash].highestBid == 0",
            "_entries[_hash].highestBid one of [0]",
            "rootNode != \"\"",
            "_entries[_hash].registrationDate == 0",
            "_entries[_hash].registrationDate one of [0]",
            "_entries[_hash].deed == 0",
            "ens != 0",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "_entries[_hash].value == ori(_entries[_hash].registrationDate)",
            "_entries[_hash].value >= ori(_entries[_hash].registrationDate)",
            "_entries[_hash].value <= ori(_entries[_hash].registrationDate)",
            "_entries[_hash].value == _entries[_hash].highestBid",
            "_entries[_hash].value >= _entries[_hash].highestBid",
            "_entries[_hash].value <= _entries[_hash].highestBid",
            "_entries[_hash].value == msg.value",
            "_entries[_hash].value >= msg.value",
            "_entries[_hash].value <= msg.value",
            "_entries[_hash].value <= ori(registryStarted)",
            "_entries[_hash].value < ori(registryStarted)",
            "_entries[_hash].value != ori(registryStarted)",
            "_entries[_hash].value == _entries[_hash].registrationDate",
            "_entries[_hash].value >= _entries[_hash].registrationDate",
            "_entries[_hash].value <= _entries[_hash].registrationDate",
            "_entries[_hash].value == ori(_entries[_hash].value)",
            "_entries[_hash].value >= ori(_entries[_hash].value)",
            "_entries[_hash].value <= ori(_entries[_hash].value)",
            "_entries[_hash].value <= registryStarted",
            "_entries[_hash].value < registryStarted",
            "_entries[_hash].value != registryStarted",
            "_entries[_hash].value == ori(_entries[_hash].highestBid)",
            "_entries[_hash].value >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].value <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].registrationDate) == _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) >= _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) <= _entries[_hash].highestBid",
            "ori(_entries[_hash].registrationDate) == _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) >= _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) <= _entries[_hash].registrationDate",
            "ori(_entries[_hash].registrationDate) <= registryStarted",
            "ori(_entries[_hash].registrationDate) < registryStarted",
            "ori(_entries[_hash].registrationDate) != registryStarted",
            "_entries[_hash].highestBid == msg.value",
            "_entries[_hash].highestBid >= msg.value",
            "_entries[_hash].highestBid <= msg.value",
            "_entries[_hash].highestBid <= ori(registryStarted)",
            "_entries[_hash].highestBid < ori(registryStarted)",
            "_entries[_hash].highestBid != ori(registryStarted)",
            "_entries[_hash].highestBid == _entries[_hash].registrationDate",
            "_entries[_hash].highestBid >= _entries[_hash].registrationDate",
            "_entries[_hash].highestBid <= _entries[_hash].registrationDate",
            "_entries[_hash].highestBid == ori(_entries[_hash].value)",
            "_entries[_hash].highestBid >= ori(_entries[_hash].value)",
            "_entries[_hash].highestBid <= ori(_entries[_hash].value)",
            "_entries[_hash].highestBid <= registryStarted",
            "_entries[_hash].highestBid < registryStarted",
            "_entries[_hash].highestBid != registryStarted",
            "_entries[_hash].highestBid == ori(_entries[_hash].highestBid)",
            "_entries[_hash].highestBid >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].highestBid <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].deed) == _entries[_hash].deed",
            "ori(_entries[_hash].deed) != ens",
            "ori(ens) != _entries[_hash].deed",
            "ori(ens) == ens",
            "msg.value == _entries[_hash].registrationDate",
            "msg.value >= _entries[_hash].registrationDate",
            "msg.value <= _entries[_hash].registrationDate",
            "msg.value <= registryStarted",
            "msg.value < registryStarted",
            "msg.value != registryStarted",
            "ori(registryStarted) >= _entries[_hash].registrationDate",
            "ori(registryStarted) > _entries[_hash].registrationDate",
            "ori(registryStarted) != _entries[_hash].registrationDate",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "msg.sender != _entries[_hash].deed",
            "msg.sender != ens",
            "_entries[_hash].registrationDate == ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate >= ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate <= ori(_entries[_hash].value)",
            "_entries[_hash].registrationDate <= registryStarted",
            "_entries[_hash].registrationDate < registryStarted",
            "_entries[_hash].registrationDate != registryStarted",
            "_entries[_hash].registrationDate == ori(_entries[_hash].highestBid)",
            "_entries[_hash].registrationDate >= ori(_entries[_hash].highestBid)",
            "_entries[_hash].registrationDate <= ori(_entries[_hash].highestBid)",
            "ori(_entries[_hash].value) <= registryStarted",
            "ori(_entries[_hash].value) < registryStarted",
            "ori(_entries[_hash].value) != registryStarted",
            "_entries[_hash].deed != ens",
            "registryStarted >= ori(_entries[_hash].highestBid)",
            "registryStarted > ori(_entries[_hash].highestBid)",
            "registryStarted != ori(_entries[_hash].highestBid)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "startAuctionsAndBid(hashes,sealedBid)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "hashes != \"\"",
            "ori(ens) != 0",
            "msg.value > 0",
            "sealedBid != \"\"",
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "msg.sender != 0",
            "ori(rootNode) != \"\"",
            "ori(sealedBids[msg.sender][sealedBid]) == 0",
            "ori(ens) != msg.sender",
            "ori(ens) != ori(sealedBids[msg.sender][sealedBid])",
            "msg.value >= ori(registryStarted)",
            "msg.value > ori(registryStarted)",
            "msg.value != ori(registryStarted)",
            "msg.sender != ori(sealedBids[msg.sender][sealedBid])"
        ],
        "postconditions": [
            "rootNode != \"\"",
            "sealedBids[msg.sender][sealedBid] != 0",
            "ens != 0",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(ens) != sealedBids[msg.sender][sealedBid]",
            "ori(ens) == ens",
            "msg.value >= registryStarted",
            "msg.value > registryStarted",
            "msg.value != registryStarted",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "msg.sender != sealedBids[msg.sender][sealedBid]",
            "msg.sender != ens",
            "sealedBids[msg.sender][sealedBid] != ens",
            "sealedBids[msg.sender][sealedBid] != ori(sealedBids[msg.sender][sealedBid])",
            "ens != ori(sealedBids[msg.sender][sealedBid])"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "startAuctionsAndBid(hashes,sealedBid)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "hashes != \"\"",
            "ori(ens) != 0",
            "msg.value one of [0,10000000000000000,3141592653590000000,117000000000000000,20000000000000000,1234567000000000000,14000000000000000]",
            "sealedBid != \"\"",
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "msg.sender != 0",
            "ori(rootNode) != \"\"",
            "ori(sealedBids[msg.sender][sealedBid]) == 0",
            "ori(ens) != msg.sender",
            "ori(ens) != ori(sealedBids[msg.sender][sealedBid])",
            "msg.value != ori(registryStarted)",
            "msg.sender != ori(sealedBids[msg.sender][sealedBid])"
        ],
        "postconditions": [
            "rootNode != \"\"",
            "sealedBids[msg.sender][sealedBid] == 0",
            "ens != 0",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(ens) != sealedBids[msg.sender][sealedBid]",
            "ori(ens) == ens",
            "msg.value != registryStarted",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "msg.sender != sealedBids[msg.sender][sealedBid]",
            "msg.sender != ens",
            "sealedBids[msg.sender][sealedBid] != ens",
            "sealedBids[msg.sender][sealedBid] == ori(sealedBids[msg.sender][sealedBid])",
            "ens != ori(sealedBids[msg.sender][sealedBid])"
        ],
        "falsified_preconditions": [
            "msg.value == 0",
            "msg.value > 0",
            "msg.value >= ori(registryStarted)",
            "msg.value > ori(registryStarted)",
            "msg.value <= ori(registryStarted)",
            "msg.value < ori(registryStarted)"
        ],
        "falsified_postconditions": [
            "msg.value >= registryStarted",
            "msg.value > registryStarted",
            "msg.value <= registryStarted",
            "msg.value < registryStarted"
        ]
    },
    {
        "func": null,
        "type": "PptType.CONTRACT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "ori(registryStarted) > 0",
            "ori(registryStarted) == 1493895600",
            "ori(registryStarted) one of [1493895600]",
            "ori(rootNode) != \"\"",
            "ori(ens) != 0"
        ],
        "postconditions": [
            "ens != 0",
            "rootNode != \"\"",
            "registryStarted > 0",
            "registryStarted == 1493895600",
            "registryStarted one of [1493895600]",
            "ori(registryStarted) == registryStarted",
            "ori(registryStarted) >= registryStarted",
            "ori(registryStarted) <= registryStarted",
            "ens == ori(ens)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    }
]