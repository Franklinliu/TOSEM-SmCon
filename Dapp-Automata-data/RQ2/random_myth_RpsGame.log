./contracts/RpsGame.sol:22:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!assertion) throw;
                        ^---^
./contracts/RpsGame.sol:193:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function RpsGame() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:21:5: Warning: This declaration shadows a builtin symbol.
    function assert(bool assertion) internal {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:274:9: Warning: Invoking events without "emit" prefix is deprecated.
        Reveal(gameid, msg.sender, choice);
        ^--------------------------------^
./contracts/RpsGame.sol:308:16: Warning: "sha3" has been deprecated in favour of "keccak256"
        return sha3(sender, choice, randomSecret);
               ^--------------------------------^
./contracts/RpsGame.sol:308:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return sha3(sender, choice, randomSecret);
               ^--------------------------------^
./contracts/RpsGame.sol:193:5: Warning: No visibility specified. Defaulting to "public". 
    function RpsGame() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:260:48: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function reveal(uint gameid, uint8 choice, bytes32 randomSecret) public returns (bool) {
                                               ^------------------^
./contracts/RpsGame.sol:21:5: Warning: Function state mutability can be restricted to pure
    function assert(bool assertion) internal {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:307:5: Warning: Function state mutability can be restricted to pure
    function getProof(address sender, uint8 choice, bytes32 randomSecret) public view returns (bytes32){
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:315:5: Warning: Function state mutability can be restricted to pure
    function checkChoice(uint8 choice) public view returns (bool){
    ^ (Relevant source part starts here and spans across multiple lines).
{'mbt': False, 'random': True, 'contract_name': 'RpsGame', 'model_file': None, 'abi_file': None, 'contract_file': './contracts/RpsGame.sol'}
solc ./contracts/RpsGame.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
close(uint256) 0x0aebeb4e
setCEO(address) 0x27d7874c
setCOO(address) 0x2ba73c15
unpause() 0x3f4ba83a
withdrawTip(uint256) 0x4811647c
setCFO(address) 0x4e0a3379
setNewAddress(address) 0x71587988
pause() 0x8456cb59
reveal(uint256,uint8,bytes32) 0x9a42f3aa
joinGame(uint256,uint8) 0xca6649c5
createGame(bytes32,address) 0xfe1f6a0b
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['setCOO(address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988],[0x2ba73c15],[0xfe1f6a0b]]" --parallel-solving
Used 25.99524974822998 seconds
coverage file: ./myth_code_coverage/cb61a22c-ecf8-4bda-a86d-73484ad8597c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 29.121061086654663



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x9a42f3aa]]" --parallel-solving
Used 25.83897376060486 seconds
coverage file: ./myth_code_coverage/5506cb3a-a10b-4647-9dba-4b9ad3e55006.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 58.2212700843811



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa]]" --parallel-solving
Used 27.873080015182495 seconds
coverage file: ./myth_code_coverage/11ece5a3-abfb-4ecd-91dd-66f3a6cd6f08.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 89.38838911056519



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['reveal(uint256,uint8,bytes32)'], ['unpause()'], ['pause()'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x9a42f3aa],[0x3f4ba83a],[0x8456cb59],[0x2ba73c15]]" --parallel-solving
Used 28.201759815216064 seconds
coverage file: ./myth_code_coverage/d2066aeb-55a9-4bb4-b630-ab8c44a1dada.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 120.87474083900452



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['unpause()'], ['setCEO(address)'], ['close(uint256)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0x3f4ba83a],[0x27d7874c],[0x0aebeb4e],[0x4811647c]]" --parallel-solving
Used 27.189700603485107 seconds
coverage file: ./myth_code_coverage/fc5d4b77-652f-46d9-a69f-3b46fe895f24.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 151.36775159835815



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['withdrawTip(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x4811647c],[0x71587988]]" --parallel-solving
Used 34.50597882270813 seconds
coverage file: ./myth_code_coverage/5ef94b45-ed71-487c-bc7e-196373e0a787.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 189.40367245674133



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0x4811647c]]" --parallel-solving
Used 27.743698596954346 seconds
coverage file: ./myth_code_coverage/2ea59834-ed15-4650-879c-837383c2093a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 220.5237786769867



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()'], ['reveal(uint256,uint8,bytes32)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x3f4ba83a],[0x9a42f3aa],[0x8456cb59]]" --parallel-solving
Used 25.2303409576416 seconds
coverage file: ./myth_code_coverage/41421397-7979-4773-994e-44d5e394fdca.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 248.90818858146667



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['setCOO(address)'], ['pause()'], ['setCOO(address)'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x8456cb59],[0x2ba73c15],[0x8456cb59],[0x2ba73c15],[0x0aebeb4e]]" --parallel-solving
Used 30.51381206512451 seconds
coverage file: ./myth_code_coverage/c0d67f6a-861e-44c6-88fa-4224e45833c7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 282.7390058040619



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['joinGame(uint256,uint8)'], ['joinGame(uint256,uint8)'], ['setCFO(address)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xca6649c5],[0xca6649c5],[0x4e0a3379],[0x4811647c]]" --parallel-solving
Used 27.655394792556763 seconds
coverage file: ./myth_code_coverage/95b22443-0b23-453d-a2b8-ade75acc9dff.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 313.7157607078552



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['createGame(bytes32,address)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988],[0xfe1f6a0b],[0x4811647c]]" --parallel-solving
Used 25.745280742645264 seconds
coverage file: ./myth_code_coverage/adbbe695-1acb-4a13-a17e-34e02194e88b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 342.62114572525024



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()'], ['joinGame(uint256,uint8)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x3f4ba83a],[0xca6649c5],[0x8456cb59]]" --parallel-solving
Used 25.18844485282898 seconds
coverage file: ./myth_code_coverage/8fa77e02-0eb3-4b69-a27b-9de8406eb40d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 370.9532949924469



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x71587988]]" --parallel-solving
Used 51.86944031715393 seconds
coverage file: ./myth_code_coverage/3265e174-3619-44bc-b376-8fada264fc80.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 426.4554350376129



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa]]" --parallel-solving
Used 27.93919086456299 seconds
coverage file: ./myth_code_coverage/c9f54422-1f24-4609-843e-82f48c10ba6b.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 457.77899265289307



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['joinGame(uint256,uint8)'], ['setCOO(address)'], ['createGame(bytes32,address)'], ['pause()'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xca6649c5],[0x2ba73c15],[0xfe1f6a0b],[0x8456cb59],[0xfe1f6a0b]]" --parallel-solving
Used 27.93684148788452 seconds
coverage file: ./myth_code_coverage/28f284cf-0f5c-4a25-99eb-dd5935f6e4d0.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 489.16843581199646



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0x3f4ba83a]]" --parallel-solving
Used 27.235559940338135 seconds
coverage file: ./myth_code_coverage/6411c6c2-baf0-46c4-9b2a-efdcf54100a5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 519.7785625457764



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['unpause()'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0x3f4ba83a],[0x2ba73c15]]" --parallel-solving
Used 26.912084817886353 seconds
coverage file: ./myth_code_coverage/a44113e5-2ffc-44db-b515-edda9a43199e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 550.0012528896332



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x0aebeb4e]]" --parallel-solving
Used 28.004613399505615 seconds
coverage file: ./myth_code_coverage/1b2fbbbe-3bbb-4e2d-b63b-d212b406f38d.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 581.2828903198242



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['joinGame(uint256,uint8)'], ['createGame(bytes32,address)'], ['createGame(bytes32,address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xca6649c5],[0xfe1f6a0b],[0xfe1f6a0b],[0xfe1f6a0b]]" --parallel-solving
Used 27.56333088874817 seconds
coverage file: ./myth_code_coverage/3dba79a6-1841-4a98-852e-7e85bf262cf7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 612.1466066837311



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['close(uint256)'], ['pause()'], ['pause()'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0x0aebeb4e],[0x8456cb59],[0x8456cb59],[0x9a42f3aa]]" --parallel-solving
Used 100.55476188659668 seconds
coverage file: ./myth_code_coverage/c4c0b2bf-8d84-4a56-b043-e53bf143f810.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000008, decoded_data: ('0x0800000000000000000000000000000000000000',), value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000080, decoded_data: ('0x8000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000008, decoded_data: ('0x0800000000000000000000000000000000000000',), value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000080, decoded_data: ('0x8000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 716.7595322132111



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0xfe1f6a0b]]" --parallel-solving
Used 34.10629487037659 seconds
coverage file: ./myth_code_coverage/6fa6650a-f47f-4696-acd0-ec19ddca398b.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 754.3476610183716



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0x71587988]]" --parallel-solving
Used 27.961370706558228 seconds
coverage file: ./myth_code_coverage/f2418ce8-112c-4c0d-93a4-938cf2b7cb95.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 785.5855441093445



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x27d7874c]]" --parallel-solving
Used 25.803646326065063 seconds
coverage file: ./myth_code_coverage/fc0ba850-010c-46c5-a2af-97ddf52c2c13.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 814.6408956050873



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x8456cb59],[0x0aebeb4e]]" --parallel-solving
Used 60.72610831260681 seconds
coverage file: ./myth_code_coverage/b48511f6-0368-478b-bb90-3fa86900530a.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 879.0102393627167



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['setCFO(address)'], ['setCEO(address)'], ['unpause()'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0x4e0a3379],[0x27d7874c],[0x3f4ba83a],[0x8456cb59]]" --parallel-solving
Used 31.506925344467163 seconds
coverage file: ./myth_code_coverage/f8634f56-894f-4858-8b45-0988eb0a8dea.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 913.8245437145233



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c]]" --parallel-solving
Used 25.684601545333862 seconds
coverage file: ./myth_code_coverage/a9a11e25-d0b3-4c1a-a631-1f747995d12f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 942.7084202766418



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['unpause()'], ['withdrawTip(uint256)'], ['setCEO(address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x3f4ba83a],[0x4811647c],[0x27d7874c],[0xca6649c5]]" --parallel-solving
Used 33.04099154472351 seconds
coverage file: ./myth_code_coverage/1b8d73b0-aab9-4da2-a608-58ef5d9b22be.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 979.2554154396057



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['joinGame(uint256,uint8)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0xca6649c5],[0x8456cb59]]" --parallel-solving
Used 27.869678735733032 seconds
coverage file: ./myth_code_coverage/324c39eb-643e-4b07-bc44-8f3736c93e41.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 1010.3833205699921



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['close(uint256)'], ['setCEO(address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x0aebeb4e],[0x27d7874c],[0xca6649c5]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1130.4153094291687



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15]]" --parallel-solving
Used 25.86107087135315 seconds
coverage file: ./myth_code_coverage/c4c01d11-30f5-4d3c-a2bc-ffdeab567f5a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1159.5755214691162



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['joinGame(uint256,uint8)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0xca6649c5],[0x8456cb59]]" --parallel-solving
Used 29.444735050201416 seconds
coverage file: ./myth_code_coverage/dd5aab2f-de28-497d-90da-fa50e8ca9340.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1192.3659265041351



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['setNewAddress(address)'], ['setCFO(address)'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x71587988],[0x4e0a3379],[0x2ba73c15]]" --parallel-solving
Used 26.66864776611328 seconds
coverage file: ./myth_code_coverage/3d568515-b1fa-45c2-950a-1b51f2990649.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1222.3134622573853



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['setCOO(address)'], ['createGame(bytes32,address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x2ba73c15],[0xfe1f6a0b],[0xfe1f6a0b]]" --parallel-solving
Used 113.13731336593628 seconds
coverage file: ./myth_code_coverage/76699f57-b10d-4d6b-9aec-5343d8a733a3.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1339.717426776886



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['close(uint256)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x8456cb59],[0x0aebeb4e],[0x4811647c]]" --parallel-solving
Used 67.59639000892639 seconds
coverage file: ./myth_code_coverage/6ec50500-7dfe-42ac-8bb7-91ab09275161.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 1411.0230686664581



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988]]" --parallel-solving
Used 25.93875241279602 seconds
coverage file: ./myth_code_coverage/4b3928f0-af54-4fe0-8a1d-64905b06c019.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1440.0871198177338



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['setCOO(address)'], ['reveal(uint256,uint8,bytes32)'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0x2ba73c15],[0x9a42f3aa],[0x27d7874c]]" --parallel-solving
Used 35.52848696708679 seconds
coverage file: ./myth_code_coverage/728a6b3d-7e98-47bf-b20c-6b28b6f0caf3.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCFO(address), txdata: 0x4e0a337901010101010101010101010140, value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1501010101010101010101010101, value: 0x0
Caller: [CREATOR], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 1478.9865369796753



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0x2ba73c15]]" --parallel-solving
Used 27.633249044418335 seconds
coverage file: ./myth_code_coverage/b71f13be-0bc8-4181-8daf-1ae874fcb043.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1509.9100651741028



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['setCFO(address)'], ['setCFO(address)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x4e0a3379],[0x4e0a3379],[0x71587988]]" --parallel-solving
Used 63.822168827056885 seconds
coverage file: ./myth_code_coverage/421d6a10-5284-4bd1-a480-c546f01a50d9.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 1577.4308423995972



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['setNewAddress(address)'], ['setCFO(address)'], ['close(uint256)'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0x71587988],[0x4e0a3379],[0x0aebeb4e],[0x0aebeb4e]]" --parallel-solving
Used 27.926401138305664 seconds
coverage file: ./myth_code_coverage/4979e035-d52f-4041-adb4-7b0c2fc97ea1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1608.6344089508057



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c]]" --parallel-solving
Used 26.04409646987915 seconds
coverage file: ./myth_code_coverage/0251c93f-9340-4d64-862d-79764bdef2c3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1638.025096654892



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b]]" --parallel-solving
Used 30.95116138458252 seconds
coverage file: ./myth_code_coverage/8cc5b9e1-79d0-4bbc-be68-59170d22be65.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1672.3959505558014



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0xfe1f6a0b]]" --parallel-solving
Used 34.244093894958496 seconds
coverage file: ./myth_code_coverage/7405f170-b012-4cf4-9897-79a7928d4327.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1710.065170764923



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x71587988]]" --parallel-solving
Used 25.922871351242065 seconds
coverage file: ./myth_code_coverage/b9a067e6-4d4e-4531-a94c-722113e72fc4.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1739.2027173042297



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['unpause()'], ['setNewAddress(address)'], ['unpause()'], ['joinGame(uint256,uint8)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x3f4ba83a],[0x71587988],[0x3f4ba83a],[0xca6649c5]]" --parallel-solving
Used 25.832095861434937 seconds
coverage file: ./myth_code_coverage/14a758dc-f4c2-4f50-a4e2-4402f5d5b3e7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1768.2469837665558



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()'], ['setCOO(address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x3f4ba83a],[0x2ba73c15],[0xca6649c5]]" --parallel-solving
Used 25.14240288734436 seconds
coverage file: ./myth_code_coverage/2fcd7d9d-4245-4163-b3bb-b12dfec2a06b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1796.4730863571167



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['createGame(bytes32,address)'], ['setCFO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0xfe1f6a0b],[0x4e0a3379]]" --parallel-solving
Used 95.90479278564453 seconds
coverage file: ./myth_code_coverage/03cdf78f-274f-4a13-8c97-9cf1003424cb.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1896.3446695804596



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x71587988]]" --parallel-solving
Used 25.81122398376465 seconds
coverage file: ./myth_code_coverage/a24eb65c-cdc2-4a7c-b921-cc005a21e01d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1925.3881480693817



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['setCOO(address)'], ['reveal(uint256,uint8,bytes32)'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x2ba73c15],[0x9a42f3aa],[0x27d7874c]]" --parallel-solving
Used 27.860034227371216 seconds
coverage file: ./myth_code_coverage/6a4ae18d-38ac-497e-9d35-4c7abc57a565.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 1956.516102552414



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['close(uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x0aebeb4e],[0x3f4ba83a]]" --parallel-solving
Used 28.05106019973755 seconds
coverage file: ./myth_code_coverage/93e25c08-10d5-4388-978a-74dab614b8ea.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 1987.8327865600586



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15]]" --parallel-solving
Used 25.61595869064331 seconds
coverage file: ./myth_code_coverage/43b7bdff-596f-4fd1-9fb3-693ecbaef5e1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2016.7184569835663



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['setNewAddress(address)'], ['pause()'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x71587988],[0x8456cb59],[0xfe1f6a0b]]" --parallel-solving
Used 51.65082907676697 seconds
coverage file: ./myth_code_coverage/212093fd-3517-413a-aa2c-585d876748a4.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 2072.0172588825226



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['setCOO(address)'], ['setCFO(address)'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0xca6649c5],[0x2ba73c15],[0x4e0a3379],[0x27d7874c]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2192.049029827118



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['pause()'], ['setCOO(address)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x8456cb59],[0x2ba73c15],[0x8456cb59]]" --parallel-solving
Used 44.22285223007202 seconds
coverage file: ./myth_code_coverage/aa414548-6cb4-42ff-aa6f-398149fedd96.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 2239.871479988098



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['setCEO(address)'], ['unpause()'], ['withdrawTip(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0x27d7874c],[0x3f4ba83a],[0x4811647c],[0x71587988]]" --parallel-solving
Used 29.241609573364258 seconds
coverage file: ./myth_code_coverage/1297edc2-2b27-4050-892d-404d2005121c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2272.479258298874



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['setCOO(address)'], ['setNewAddress(address)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x2ba73c15],[0x71587988],[0x9a42f3aa]]" --parallel-solving
Used 37.78837203979492 seconds
coverage file: ./myth_code_coverage/8eb5cb2d-e01c-4a3b-bc5c-9e30be32b433.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 2313.7568542957306



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['setNewAddress(address)'], ['setNewAddress(address)'], ['pause()'], ['setCFO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988],[0x71587988],[0x71587988],[0x8456cb59],[0x4e0a3379]]" --parallel-solving
Used 26.029558658599854 seconds
coverage file: ./myth_code_coverage/8382fd08-be77-4eae-89f3-02a29e0c3e10.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2342.907529115677



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['reveal(uint256,uint8,bytes32)'], ['joinGame(uint256,uint8)'], ['createGame(bytes32,address)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0x9a42f3aa],[0xca6649c5],[0xfe1f6a0b],[0x9a42f3aa]]" --parallel-solving
Used 30.79633116722107 seconds
coverage file: ./myth_code_coverage/efb3c8e0-75e4-4c12-89b6-f01050bd607b.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1500000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 2377.0082404613495



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0x2ba73c15]]" --parallel-solving
Used 27.654218435287476 seconds
coverage file: ./myth_code_coverage/f523d6a4-7e6f-4c91-bcb2-4634bed0df65.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2407.915657043457



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()'], ['setCEO(address)'], ['setCOO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x3f4ba83a],[0x27d7874c],[0x2ba73c15]]" --parallel-solving
Used 25.228333711624146 seconds
coverage file: ./myth_code_coverage/e697f3d2-adb4-4d67-8990-8cc3972cc5ed.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2436.2532501220703



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e]]" --parallel-solving
Used 45.485177993774414 seconds
coverage file: ./myth_code_coverage/45ec6ab9-9590-44bf-a277-bd59d777a795.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 2485.2608008384705



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['close(uint256)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x0aebeb4e],[0x71587988]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2605.2908704280853



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['joinGame(uint256,uint8)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xca6649c5]]" --parallel-solving
Used 27.421510696411133 seconds
coverage file: ./myth_code_coverage/659e8411-6be0-4fb8-9df8-81a923b72f0d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2635.962399482727



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)'], ['setCEO(address)'], ['setCFO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e],[0x27d7874c],[0x4e0a3379]]" --parallel-solving
Used 57.06580328941345 seconds
coverage file: ./myth_code_coverage/8183e004-d038-4dab-b3f1-95009eeb046f.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 2696.6540689468384



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e]]" --parallel-solving
Used 44.32364225387573 seconds
coverage file: ./myth_code_coverage/26c72b8f-0f6c-43f1-acad-4ba3fade183e.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 2744.495802640915



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['joinGame(uint256,uint8)'], ['unpause()'], ['joinGame(uint256,uint8)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988],[0xca6649c5],[0x3f4ba83a],[0xca6649c5],[0xfe1f6a0b]]" --parallel-solving
Used 25.851397037506104 seconds
coverage file: ./myth_code_coverage/0795d602-9daa-44ca-9fcb-ff75f3b8bdf0.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2773.4848964214325



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['pause()'], ['createGame(bytes32,address)'], ['setCFO(address)'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x8456cb59],[0x8456cb59],[0xfe1f6a0b],[0x4e0a3379],[0x27d7874c]]" --parallel-solving
Used 27.9161479473114 seconds
coverage file: ./myth_code_coverage/4dcca944-726b-46d7-bb56-e9b75647c446.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2804.571396112442



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['withdrawTip(uint256)'], ['setNewAddress(address)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xfe1f6a0b],[0x4811647c],[0x71587988],[0x4811647c]]" --parallel-solving
Used 34.058557748794556 seconds
coverage file: ./myth_code_coverage/dab3ee99-4f07-48b7-b934-2c64f327bba1.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 2842.1171095371246



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x0aebeb4e]]" --parallel-solving
Used 45.04792857170105 seconds
coverage file: ./myth_code_coverage/b23f528a-4c40-4955-b20a-1b4b8efc80ef.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0



overall time used (seconds): 2890.7153697013855



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0x9a42f3aa]]" --parallel-solving
Used 30.867716789245605 seconds
coverage file: ./myth_code_coverage/3cda4146-734e-4d7d-8b12-b3faf2b09a0a.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 2924.960746526718



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c]]" --parallel-solving
Used 25.897615432739258 seconds
coverage file: ./myth_code_coverage/ccc56240-b426-44d3-8b14-107cbc33a6e5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2954.1512172222137



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['joinGame(uint256,uint8)'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0xca6649c5],[0x0aebeb4e]]" --parallel-solving
Used 27.521827936172485 seconds
coverage file: ./myth_code_coverage/34820862-cf43-4428-8777-6af1793aca9c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2984.971468925476



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['withdrawTip(uint256)'], ['withdrawTip(uint256)'], ['unpause()'], ['setCEO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x4811647c],[0x4811647c],[0x3f4ba83a],[0x27d7874c]]" --parallel-solving
Used 27.920217514038086 seconds
coverage file: ./myth_code_coverage/b49338b6-9da2-4f87-8527-c33109b1195f.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 3016.1284623146057



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['pause()'], ['setCOO(address)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c],[0x8456cb59],[0x2ba73c15],[0x71587988]]" --parallel-solving
Used 25.70973038673401 seconds
coverage file: ./myth_code_coverage/26aeec56-9576-499b-9afa-c4d322ae9750.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3045.129861354828



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()'], ['setNewAddress(address)'], ['setNewAddress(address)'], ['setCFO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x3f4ba83a],[0x71587988],[0x71587988],[0x4e0a3379]]" --parallel-solving
Used 25.21742844581604 seconds
coverage file: ./myth_code_coverage/136efca9-9641-42e1-b9bd-2fdaa65b8dcc.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3073.4451253414154



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x27d7874c],[0x4811647c]]" --parallel-solving
Used 27.65289068222046 seconds
coverage file: ./myth_code_coverage/dd2a80e6-f0d1-4662-8ef9-cabb6c8c4bfe.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3104.3479042053223



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x2ba73c15],[0xfe1f6a0b]]" --parallel-solving
Used 34.61063098907471 seconds
coverage file: ./myth_code_coverage/a5927c27-464a-4236-97af-3a259d0b9995.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1501010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 3142.4922211170197



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['setCOO(address)'], ['setCOO(address)'], ['setCEO(address)'], ['createGame(bytes32,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x8456cb59],[0x2ba73c15],[0x2ba73c15],[0x27d7874c],[0xfe1f6a0b]]" --parallel-solving
Used 36.39457607269287 seconds
coverage file: ./myth_code_coverage/6a1ec781-133b-4b51-ab7f-97c1b4a50f07.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3182.246693134308



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['reveal(uint256,uint8,bytes32)'], ['setCFO(address)'], ['joinGame(uint256,uint8)'], ['joinGame(uint256,uint8)'], ['setNewAddress(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x9a42f3aa],[0x4e0a3379],[0xca6649c5],[0xca6649c5],[0x71587988]]" --parallel-solving
Used 27.898113489151 seconds
coverage file: ./myth_code_coverage/60981e28-c7ae-4cfd-910b-fbc0ad79e1f2.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: reveal(uint256,uint8,bytes32)
PC address: 6079
Estimated Gas Usage: 2472 - 3087
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:265

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: reveal(uint256,uint8,bytes32), txdata: 0x9a42f3aa, value: 0x0



overall time used (seconds): 3213.382760286331



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)'], ['joinGame(uint256,uint8)'], ['setCOO(address)'], ['setNewAddress(address)'], ['setCFO(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4e0a3379],[0xca6649c5],[0x2ba73c15],[0x71587988],[0x4e0a3379]]" --parallel-solving
Used 29.85921025276184 seconds
coverage file: ./myth_code_coverage/b0b1b86e-65c7-4115-9b3e-2de95b660bc1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3246.5316033363342



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['setNewAddress(address)'], ['close(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x71587988],[0x71587988],[0x0aebeb4e]]" --parallel-solving
Used 25.831599235534668 seconds
coverage file: ./myth_code_coverage/099c89c7-3317-43cd-8bea-fb0c4c4b48f2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3275.4866914749146



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[[0x4811647c]]" --parallel-solving
Used 25.783591508865356 seconds
coverage file: ./myth_code_coverage/589090ca-de82-4f1b-b4d5-951e1cdea21d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3304.4675381183624



