/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2410.2142050266266 seconds
coverage file: ./myth_code_coverage/e36049b3-cc83-4301-8362-10dd19bd02ea.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b08, value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x4ffffffffffffffff, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0001010201010280010801801004008001010808028000204004082010004001000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0001010201010280010801801004008001010808028000204004082010004001', '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001101010101010101010101010101010101010101010101010101010101010101e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 3014.9699375629425 seconds
coverage file: ./myth_code_coverage/d7555dd2-5bf0-4cbb-b2bd-caef7836f3cc.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7064
Estimated Gas Usage: 9429 - 11694
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:246

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x142408ac000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7199
Estimated Gas Usage: 46672 - 171550
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:252

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0xb7f1a2c400000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44c10240400012a70, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000000100000000000000000000000000000000002080808080808080808080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0000000100000000000000000000000000000000002080808080808080808080', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e, decoded_data: (1, 30), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7827
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2329.7678422927856 seconds
coverage file: ./myth_code_coverage/e2f02b52-ee0c-447d-bc49-120b7ff7f602.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x20400cc040ac00010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4026968db0148000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000000000200000000000000001000040800080808040008004000480800004000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0000000000200000000000000001000040800080808040008004000480800004', '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001404040404040404040404040404040404040404040404040404040404040401e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 3591.203631401062 seconds
coverage file: ./myth_code_coverage/c003345a-594f-4933-b584-3ec4c0abac56.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7064
Estimated Gas Usage: 9429 - 11694
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:246

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [ATTACKER], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7199
Estimated Gas Usage: 46672 - 171550
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:252

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0001000000000000000000800000008080080001000001800480018080808080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0001000000000000000000800000008080080001000001800480018080808080', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001080808080808080808080808080808080808080808080808080808080808081e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7827
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2296.0864675045013 seconds
coverage file: ./myth_code_coverage/8c4c594f-70bb-4302-8e57-5206d6449b85.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b40, value: 0x0
Caller: [ATTACKER], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1600846010000100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x55f83400402c0ded1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000000200010101010008204001200140000008400004800400004002200000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0000000200010101010008204001200140000008400004800400004002200000', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001404040404040404040404040404040404040404040404040404040404040401e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 3384.209503173828 seconds
coverage file: ./myth_code_coverage/18e39818-724b-4c98-9345-60f41a0531d9.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7064
Estimated Gas Usage: 9429 - 11694
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:246

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [ATTACKER], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7199
Estimated Gas Usage: 46672 - 171550
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:252

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200058118060cc008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0100000000000000000000000000000000000002808001808080808080808080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0100000000000000000000000000000000000002808001808080808080808080', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001e, decoded_data: (1, 30), value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7827
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2257.76722407341 seconds
coverage file: ./myth_code_coverage/4a348886-0e05-4081-82de-d12a70fa1a10.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x50005480000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x519c62a629e825d90, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0204000108202040002080022004800480010100400880200008044001100108000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0204000108202040002080022004800480010100400880200008044001100108', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001101010101010101010101010101010101010101010101010101010101010101e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 3601.0757336616516 seconds
coverage file: ./myth_code_coverage/f05f3a9d-5d71-42d7-a9a2-d49215ef2956.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2834
Estimated Gas Usage: 3636 - 4251
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:295

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c500000000000000000000000000000000000000000000000000000000000000016a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a1e, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7064
Estimated Gas Usage: 9429 - 11694
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:246

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7199
Estimated Gas Usage: 46672 - 171550
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:252

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2200200000040000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b2000808004808080808001808080108080808080808080808080808080808080000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('2000808004808080808001808080108080808080808080808080808080808080', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001101010101010101010101010101010101010101010101010101010101010101e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7827
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2186.0956625938416 seconds
coverage file: ./myth_code_coverage/749ff833-4730-4bdc-aa4e-49a08bb0e121.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x45000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0200001000000800000000000001084000000100000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0200001000000800000000000001084000000100000000000000000000000000', '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001101010101010101010101010101010101010101010101010101010101010101e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 345 with name 'Yooldo Verse Mainnet' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
/home/ec2-user/.local/lib/python3.9/site-packages/eth_utils/network.py:44: UserWarning: Network 12611 with name 'Astar zkEVM' does not have a valid ChainId. eth-typing should be updated with the latest networks.
  warnings.warn(
Used 2823.9936838150024 seconds
coverage file: ./myth_code_coverage/99507f46-1c2d-419d-a6fd-784479048313.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7064
Estimated Gas Usage: 9429 - 11694
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:246

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7199
Estimated Gas Usage: 46672 - 171550
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:252

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000040000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000000000000000040000010008010040800001048080808080808080808080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0000000000000000040000010008010040800001048080808080808080808080', '0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef'), value: 0x0
Caller: [ATTACKER], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001404040404040404040404040404040404040404040404040404040404040401e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7827
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame_instrument_index.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


Used 2598.661412000656 seconds
coverage file: ./myth_code_coverage/1e88eae2-2eab-478a-b41a-0a60ddc082c4.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b20, value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a, decoded_data: (1, 10), value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10006000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4cb9edbfcbbefcf42, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [ATTACKER], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe0a, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x385a2400000018000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x300060002000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b10, value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x18c01800700920002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2ad5ed304a70041e9, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000040000000000800001000001400000000100000000002000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0000040000000000800001000001400000000100000000002000000000000000', '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001808080808080808080808080808080808080808080808080808080808080801e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0


