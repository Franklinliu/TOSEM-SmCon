./contracts/SaleClockAuction.sol:301:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:378:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ClockAuction(uint256 _cut) public {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:520:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SaleClockAuction(uint256 _cut) public
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:116:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionCreated(
        ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:129:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionCancelled(_nft, _tokenId);
        ^------------------------------^
./contracts/SaleClockAuction.sol:180:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionSuccessful(_nft, _tokenId, price, msg.sender);
        ^--------------------------------------------------^
./contracts/SaleClockAuction.sol:321:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
./contracts/SaleClockAuction.sol:359:5: Warning: Invoking events without "emit" prefix is deprecated.
    Pause();
    ^-----^
./contracts/SaleClockAuction.sol:367:5: Warning: Invoking events without "emit" prefix is deprecated.
    Unpause();
    ^-------^
./contracts/SaleClockAuction.sol:391:29: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        msg.sender.transfer(this.balance);
                            ^----------^
./contracts/SaleClockAuction.sol:561:9: Warning: Unused local variable.
        address seller = nftToTokenIdToAuction[_nftAddress][_tokenId].seller;
        ^------------^
./contracts/SaleClockAuction.sol:562:9: Warning: Unused local variable.
        uint256 price = _bid(_nftAddress, _tokenId, msg.value);
        ^-----------^
./contracts/SaleClockAuction.sol:277:5: Warning: Function state mutability can be restricted to pure
    function _getNft(address _nft) internal view returns (ERC721) {
    ^ (Relevant source part starts here and spans across multiple lines).
{'mbt': False, 'random': True, 'contract_name': 'SaleClockAuction', 'model_file': None, 'abi_file': None, 'contract_file': './contracts/SaleClockAuction.sol'}
solc ./contracts/SaleClockAuction.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
cancelAuctionWhenPaused(address,uint256) 0x1ae6b6ee
unpause() 0x3f4ba83a
bid(address,uint256) 0x59d667a5
withdrawBalance() 0x5fd8c710
pause() 0x8456cb59
cancelAuction(address,uint256) 0x859b97fe
createAuction(address,uint256,uint256,uint256,uint256) 0x961c9ae4
createAuction(address,uint256,uint256,uint256,uint256,address) 0xe6effbe9
transferOwnership(address) 0xf2fde38b
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x5fd8c710]]" --parallel-solving
Used 94.00356650352478 seconds
coverage file: ./myth_code_coverage/99a30033-bca3-482a-a605-08bfa0c548cc.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040004020020000000000000000000000000000000080800008004040100000040040800180000000000000000000000000000000000880400880028000000010400240044000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000008000088000800020008040000000002000082000802040000000108080804080008000000000000000088000808040020000000000000000000000000000000080004020004080000880800040208000000000000000000000000000000000000100100000800108028000044080021000000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000008000408400000000000000000000000000000000020008000001010100402200140800120000000000000000000000000000000008001042008008008400200010840800800000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040004020020000000000000000000000000000000080800008004040100000040040800180000000000000000000000000000000000880400880028000000010400240044000000000000000000000000000000000000000000000000080, value: 0x0



overall time used (seconds): 97.35253548622131



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0xe6effbe9]]" --parallel-solving
Used 14.629979372024536 seconds
coverage file: ./myth_code_coverage/3f8985bf-9c3d-4e3e-8279-55da723c445a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 115.14415764808655



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0xe6effbe9],[0x5fd8c710]]" --parallel-solving
Used 23.94993758201599 seconds
coverage file: ./myth_code_coverage/735fc23f-a650-48bf-b994-cea1fd88706e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 142.34954142570496



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710]]" --parallel-solving
Used 15.292545080184937 seconds
coverage file: ./myth_code_coverage/b67e4e02-29a0-4c58-af4c-d279df1564d4.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 160.82008743286133



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x961c9ae4]]" --parallel-solving
Used 15.974009037017822 seconds
coverage file: ./myth_code_coverage/04f4c8fc-df27-48a2-ac7d-97f6aa9b653a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 180.00989508628845



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x961c9ae4]]" --parallel-solving
Used 15.940307140350342 seconds
coverage file: ./myth_code_coverage/725246c6-fd58-4dd8-8a32-dac49ce308b5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 199.15538454055786



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['withdrawBalance()'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x5fd8c710],[0x5fd8c710]]" --parallel-solving
Used 108.23601007461548 seconds
coverage file: ./myth_code_coverage/b4d0cd41-1c2a-482e-82ad-9ca5d9090b47.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040004020020000000000000000000000000000000080800008004040100000040040800180000000000000000000000000000000000880400880028000000010404020102000000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000008000088000800020008040000000002000082000802040000000108080804080008000000000000000088000808040020000000000000000000000000000000080004020004080000880800040208000000000000000000000000000000000000100100000800108028000044080021000000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000010001001080000000000000000000000000000000080004000080010020040010080080200000000000000000000000000000000000104084040000010100010108008102000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040004020020000000000000000000000000000000080800008004040100000040040800180000000000000000000000000000000000880400880028000000010404020102000000000000000000000000000000000000000000000000080, value: 0x0



overall time used (seconds): 310.7912588119507



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x5fd8c710]]" --parallel-solving
Used 22.377110958099365 seconds
coverage file: ./myth_code_coverage/684de6a4-076f-4f6d-b235-9944581d61a4.json
==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bdededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38bdededededededededededededeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0



overall time used (seconds): 336.3799879550934



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe]]" --parallel-solving
Used 16.043543338775635 seconds
coverage file: ./myth_code_coverage/68090f6b-4ecc-40a6-96cd-a234e60285e7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 355.590966463089



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x961c9ae4]]" --parallel-solving
Used 15.481350898742676 seconds
coverage file: ./myth_code_coverage/819f555a-037f-465f-aef2-8d9cf019c308.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 374.2338926792145



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0xe6effbe9],[0x59d667a5]]" --parallel-solving
Used 15.871662855148315 seconds
coverage file: ./myth_code_coverage/665c154d-b436-482c-95ea-ee826a598aed.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 393.3157887458801



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0xe6effbe9],[0x8456cb59],[0x961c9ae4]]" --parallel-solving
Used 15.412837505340576 seconds
coverage file: ./myth_code_coverage/f4177dbf-23cd-4319-a30b-c7dd714ecea8.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 411.9024450778961



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['transferOwnership(address)'], ['pause()'], ['cancelAuctionWhenPaused(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0xf2fde38b],[0x8456cb59],[0x1ae6b6ee],[0xf2fde38b]]" --parallel-solving
Used 20.4370219707489 seconds
coverage file: ./myth_code_coverage/48d9f3b7-a857-4f8e-9c3f-d0eb03089d7b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 435.5795478820801



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['bid(address,uint256)'], ['bid(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x59d667a5],[0x59d667a5],[0x859b97fe]]" --parallel-solving
Used 17.8173406124115 seconds
coverage file: ./myth_code_coverage/3b6ff915-7ef8-4473-9d86-309dd0732cbd.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 456.6520688533783



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x8456cb59],[0xe6effbe9],[0x961c9ae4],[0x8456cb59]]" --parallel-solving
Used 20.184926509857178 seconds
coverage file: ./myth_code_coverage/375ced2d-c604-4d27-b626-8c508b628143.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 480.0439646244049



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b]]" --parallel-solving
Used 15.615795135498047 seconds
coverage file: ./myth_code_coverage/6d7e8596-d9c3-4d8e-bae0-8836251b0b39.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 498.87098002433777



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x8456cb59],[0xe6effbe9],[0xf2fde38b]]" --parallel-solving
Used 90.80992221832275 seconds
coverage file: ./myth_code_coverage/1fe6ed5c-fcff-4e00-9c3b-0f90928f7fc7.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000800020040000000000000000000000000000000004010200000800840000080021004408000000000000000000000000000000000000000000000000002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000800020040000000000000000000000000000000004010200000800840000080021004408000000000000000000000000000000000000000000000000002, value: 0x0



overall time used (seconds): 593.1038048267365



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5]]" --parallel-solving
Used 15.857410669326782 seconds
coverage file: ./myth_code_coverage/49ee4ec6-35d7-4878-aa8a-6a7687658b81.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 612.1682758331299



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xe6effbe9],[0x59d667a5],[0x961c9ae4],[0x59d667a5]]" --parallel-solving
Used 18.609856367111206 seconds
coverage file: ./myth_code_coverage/1a169eed-49f6-4a2a-a307-335b021752a5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 634.0174465179443



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee]]" --parallel-solving
Used 15.503790378570557 seconds
coverage file: ./myth_code_coverage/eb6c80c9-1697-4928-876a-c16bd9ce0c5b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 652.6677923202515



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['withdrawBalance()'], ['transferOwnership(address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x5fd8c710],[0xf2fde38b],[0xf2fde38b]]" --parallel-solving
Used 14.681049585342407 seconds
coverage file: ./myth_code_coverage/5e6cd225-0499-4402-9620-5e455428701d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 670.4999670982361



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x3f4ba83a]]" --parallel-solving
Used 15.38325834274292 seconds
coverage file: ./myth_code_coverage/44b4a40e-23aa-4d44-a868-074ed6eab243.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 689.028475522995



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['transferOwnership(address)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0xf2fde38b],[0x8456cb59]]" --parallel-solving
Used 14.733235120773315 seconds
coverage file: ./myth_code_coverage/e4a330c6-e509-4754-9704-5bdd1fda8c6a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 706.9165403842926



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a]]" --parallel-solving
Used 14.693631172180176 seconds
coverage file: ./myth_code_coverage/92df272a-d7f2-4e0f-8df5-876114f6702c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 724.759096622467



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x5fd8c710],[0x3f4ba83a]]" --parallel-solving
Used 15.881348609924316 seconds
coverage file: ./myth_code_coverage/97d501e6-b7f2-4f9b-b110-ed528a1bb3e9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 743.8201894760132



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59]]" --parallel-solving
Used 14.899702310562134 seconds
coverage file: ./myth_code_coverage/cb7188ed-729c-4561-a374-78b26765309c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 761.8850152492523



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0x1ae6b6ee],[0x1ae6b6ee]]" --parallel-solving
Used 14.784450054168701 seconds
coverage file: ./myth_code_coverage/ce58d1fa-a265-47e4-b2ca-5ae3f7e8a701.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 779.8509366512299



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x859b97fe]]" --parallel-solving
Used 96.25790286064148 seconds
coverage file: ./myth_code_coverage/3caee836-84a6-49cd-857b-1a6f329f7f56.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000801800000020240201000400102000000000000000000000000000000001080000801408080400008040402020400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 162378119073021815550955426414850, 21932262564663875108008942160060744196, 9223372036854775808), value: 0x0
Caller: [SOMEGUY], function: cancelAuction(address,uint256), txdata: 0x859b97fe101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010102002001100000000000000000000000000000000001108004800200010180020408800808000000000000000000000000000000000000000000000000a0, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282583080370448, 1414901250479889713158141360121841672, 11529215046068469760), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 9223372036854775808), value: 0x0



overall time used (seconds): 879.6124038696289



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0xe6effbe9]]" --parallel-solving
Used 16.10008978843689 seconds
coverage file: ./myth_code_coverage/8f3a501c-3219-4068-b4e0-7550c0e568ca.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 899.046356678009



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710]]" --parallel-solving
Used 15.4622802734375 seconds
coverage file: ./myth_code_coverage/016b3c70-ffde-4043-b1f5-dac74d63eb05.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 917.7285029888153



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['pause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x5fd8c710],[0x1ae6b6ee],[0x8456cb59],[0x859b97fe]]" --parallel-solving
Used 78.71324944496155 seconds
coverage file: ./myth_code_coverage/5b8ec315-98f7-4952-a414-122a43b422ea.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000004000100100000000000000000000000000000000020400240081004080102010402008002000000000000000000000000000000000204108004408001401002200100800800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 17179934736, 42867648501980387046203331920923754498, 2679559840078347086597191120434790408, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0



overall time used (seconds): 999.9136700630188



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x961c9ae4],[0x59d667a5],[0x961c9ae4],[0x961c9ae4]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1119.9519464969635



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['unpause()'], ['transferOwnership(address)'], ['withdrawBalance()'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x3f4ba83a],[0xf2fde38b],[0x5fd8c710],[0x5fd8c710]]" --parallel-solving
Used 15.809629440307617 seconds
coverage file: ./myth_code_coverage/80ab358c-0235-4a03-a2c5-14b475151177.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1138.987024307251



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x961c9ae4],[0x3f4ba83a]]" --parallel-solving
Used 16.012815713882446 seconds
coverage file: ./myth_code_coverage/2ea04c75-e67d-4c27-bae3-02e763b1b810.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1158.1962037086487



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x961c9ae4],[0x5fd8c710]]" --parallel-solving
Used 15.46177625656128 seconds
coverage file: ./myth_code_coverage/4df3c1a3-fe86-4722-9556-472ad8dce1c2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1176.8338100910187



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['pause()'], ['cancelAuctionWhenPaused(address,uint256)'], ['pause()'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x8456cb59],[0x1ae6b6ee],[0x8456cb59],[0xf2fde38b]]" --parallel-solving
Used 18.876966953277588 seconds
coverage file: ./myth_code_coverage/2fcf996b-a879-495b-8573-145b0f567948.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1198.9996962547302



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4]]" --parallel-solving
Used 63.14417791366577 seconds
coverage file: ./myth_code_coverage/92ff6bf4-ab2b-42f8-a260-56ef3d9e325c.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000004000100100000000000000000000000000000000020400240081004080102010402008002000000000000000000000000000000000204108004408001401002200100800800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 17179934736, 42867648501980387046203331920923754498, 2679559840078347086597191120434790408, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000100080020000000000000000000000000000000040104000801000104000010002080400000000000000000000000000000000000200028010014001010102402020022000000000000000000000000000000000000000000000000020, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 268468226, 85154966593819231184812867584185074688, 2658506702547112207918798991918105120, 2305843009213693952), value: 0x0



overall time used (seconds): 1265.4783720970154



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['unpause()'], ['cancelAuctionWhenPaused(address,uint256)'], ['transferOwnership(address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x3f4ba83a],[0x1ae6b6ee],[0xf2fde38b],[0xf2fde38b]]" --parallel-solving
Used 16.017979621887207 seconds
coverage file: ./myth_code_coverage/25133701-9bf9-4668-816a-327f58aaee32.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1284.6910507678986



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee]]" --parallel-solving
Used 15.59463357925415 seconds
coverage file: ./myth_code_coverage/7ecc3873-d843-4e6b-a461-e1a45578b4a0.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1303.4512774944305



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x59d667a5]]" --parallel-solving
Used 17.699851274490356 seconds
coverage file: ./myth_code_coverage/ae93bca1-79c6-42c9-a854-e857abf9591e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1324.3600533008575



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0xe6effbe9]]" --parallel-solving
Used 14.754033327102661 seconds
coverage file: ./myth_code_coverage/d2eacf59-05a6-4a55-a232-209e23fe68c5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1342.2769446372986



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['bid(address,uint256)'], ['transferOwnership(address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x59d667a5],[0xf2fde38b],[0x59d667a5]]" --parallel-solving
Used 16.070170402526855 seconds
coverage file: ./myth_code_coverage/5d4858f8-9214-415e-ba04-e947d6220355.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1361.5642638206482



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x1ae6b6ee],[0x961c9ae4],[0x59d667a5]]" --parallel-solving
Used 85.19610953330994 seconds
coverage file: ./myth_code_coverage/4e0d6014-97fc-41b6-83d4-aa8ca0ce4783.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000410402020000000000000000000000000000000000100808040088001404040022020080800000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000410402020000000000000000000000000000000000100808040088001404040022020080800000000000000000000000000000000000000000000000080, value: 0x0



overall time used (seconds): 1450.153226852417



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)'], ['bid(address,uint256)'], ['withdrawBalance()'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x59d667a5],[0x59d667a5],[0x5fd8c710],[0x3f4ba83a]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1570.189837217331



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x961c9ae4],[0xe6effbe9],[0x59d667a5]]" --parallel-solving
Used 85.9651517868042 seconds
coverage file: ./myth_code_coverage/fdbbd2c4-6f71-4c4d-bece-3ab04d15d6a6.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000080040000000000000000000000000000000004808020000040800408008000808080000000000000000000000000000000008000808080000040800120000820102000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 32772, 5984124664762893891268827830678487168, 170143789789717383418284259148197531680, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000020800000000210000000000080801000000002000000401002002080080000000000000000000000000000000010000080208020200480022000044010000000000000000000000000000000004080008080808080208002402040808000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 876198266682446365679526564704190189571193485465765374831080511668232, 21267658083821870317837363368652193808, 85735215909101306216608531722927112320, 9223372036854775808), value: 0x0



overall time used (seconds): 1659.609527349472



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x8456cb59]]" --parallel-solving
Used 14.727503061294556 seconds
coverage file: ./myth_code_coverage/c0f497bf-e137-4ab0-a2b9-137fdf588fd3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1677.5007247924805



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xe6effbe9]]" --parallel-solving
Used 18.675288915634155 seconds
coverage file: ./myth_code_coverage/a44c7603-1df1-4c9f-b5a3-afeac44dc5ed.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1699.3643636703491



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 17.42969560623169 seconds
coverage file: ./myth_code_coverage/499ba137-54ee-4e57-9ac7-dc1580fdf6ab.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1720.004943370819



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x5fd8c710],[0x1ae6b6ee]]" --parallel-solving
Used 15.908039808273315 seconds
coverage file: ./myth_code_coverage/ff67edbe-e6d6-4197-ab16-54d38dfdc515.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1739.1333358287811



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4]]" --parallel-solving
Used 60.33176517486572 seconds
coverage file: ./myth_code_coverage/db221986-a03f-40f0-a57d-dbc2d551d0fc.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000002000800800000000000000000000000000000000000000001800002804002040104004080000000000000000000000000000000008020020100088008088002800220022000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 8590459008, 118842255581924966935218372736, 170307377603999992051058634322264195616, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000080004010080000000000000000000000000000000080400080022010084001011040022010000000000000000000000000000000000220804010400840804080800880104000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 549760012296, 170473500601277993881668472892328910864, 2827210715103784935014330002174906432, 9223372036854775808), value: 0x0



overall time used (seconds): 1802.7535316944122



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['pause()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x961c9ae4],[0x8456cb59],[0x59d667a5]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1922.785766363144



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0xf2fde38b]]" --parallel-solving
Used 15.922194004058838 seconds
coverage file: ./myth_code_coverage/12d998c2-9204-40fe-988f-686cdea1f1f9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1941.9357702732086



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x859b97fe],[0x1ae6b6ee],[0xe6effbe9],[0x3f4ba83a]]" --parallel-solving
Used 112.26524829864502 seconds
coverage file: ./myth_code_coverage/99fee4bc-1b6f-42ae-9a7c-7b451b88910b.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008080020480800040088000002080048000000000000000000000000000000000100820000020200002000880081000010000000000000000000000000000000000000000000000000840000000000010000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 170805838379862371971784357113115968640, 21309835344573086183041967743457820673, 594475150812905488, '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: cancelAuction(address,uint256), txdata: 0x859b97fe404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000020010000800000000000000000000000000000000040008080800120084008402004800440000000000000000000000000000000000010801040801000012080010880400200000000000000000000000000000000000000000000000080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040001080000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000020010000800000000000000000000000000000000040008080800120084008402004800440000000000000000000000000000000000010801040801000012080010880400200000000000000000000000000000000000000000000000080, value: 0x0



overall time used (seconds): 2057.836770296097



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x859b97fe],[0x859b97fe],[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 100.50120639801025 seconds
coverage file: ./myth_code_coverage/5a6344c9-c74e-48b4-b1d2-bcaaab60a382.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020100001402002000401101000010120000000000000000000000000000000000240200840400102801040200800000400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 42618372713927763389057899247083520288, 2991412681333094331111170771454525444, 9223372036854775808), value: 0x0
Caller: [ATTACKER], function: cancelAuction(address,uint256), txdata: 0x859b97fe101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010200200110000000000000000000000000000000000110800480020001018002040880080800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282583080370448, 1414901250479889713158141360121841672, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0



overall time used (seconds): 2161.897537946701



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5]]" --parallel-solving
Used 15.914249420166016 seconds
coverage file: ./myth_code_coverage/95f08b2b-eb87-4501-98a7-c45d043c64f9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2181.0251834392548



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['pause()'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x8456cb59],[0x8456cb59],[0xe6effbe9],[0xe6effbe9]]" --parallel-solving
Used 65.65304970741272 seconds
coverage file: ./myth_code_coverage/026aefb8-8454-445a-a6e6-34c8ccc830a1.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000004000100100000000000000000000000000000000020400240081004080102010402008002000000000000000000000000000000000204108004408001401002200100800800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 17179934736, 42867648501980387046203331920923754498, 2679559840078347086597191120434790408, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000010010810040000000000000000000000000000000040048000408020048001012080100820000000000000000000000000000000000408208008100401084002800000201000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 68736782340, 85093957086059956922386878898587568160, 5359109538815302592123998565897871376, 9223372036854775808), value: 0x0



overall time used (seconds): 2250.0448875427246



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x859b97fe],[0xe6effbe9],[0x3f4ba83a],[0xf2fde38b]]" --parallel-solving
Used 15.561141014099121 seconds
coverage file: ./myth_code_coverage/a8f60cb1-dc62-4993-a728-d78ed8012b38.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2268.833384990692



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['transferOwnership(address)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0xf2fde38b],[0x5fd8c710],[0x1ae6b6ee],[0x1ae6b6ee]]" --parallel-solving
Used 14.702126502990723 seconds
coverage file: ./myth_code_coverage/cfce40cb-6bd5-44b0-bdbe-ee5f6522e708.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2286.7090361118317



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59]]" --parallel-solving
Used 14.867722511291504 seconds
coverage file: ./myth_code_coverage/28c4b82d-bf71-4bcf-9c10-b6b157bee8c3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2304.7651329040527



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)'], ['transferOwnership(address)'], ['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0xf2fde38b],[0xf2fde38b],[0x3f4ba83a],[0xe6effbe9]]" --parallel-solving
Used 89.486647605896 seconds
coverage file: ./myth_code_coverage/dd3ba1d5-9570-4fb6-836d-4c5a46f54564.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000180200840000000000000000000000000000000004000402080100808202010020101040100000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000040001001080000000000000000000000000000000002408040018080084080020000028010000000000000000000000000000000000120010000401080402040040401800200000000000000000000000000000000000000000000000010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000180200840000000000000000000000000000000004000402080100808202010020101040100000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 2397.678619861603



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x859b97fe]]" --parallel-solving
Used 16.780218362808228 seconds
coverage file: ./myth_code_coverage/7a9a8990-db99-483e-bd16-d980a75d172f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2417.7018423080444



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x8456cb59],[0xe6effbe9]]" --parallel-solving
Used 15.751270055770874 seconds
coverage file: ./myth_code_coverage/3ef81e6d-f8b3-4815-b5ff-9dd294d183bb.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2436.6540417671204



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x8456cb59],[0x961c9ae4]]" --parallel-solving
Used 90.86914396286011 seconds
coverage file: ./myth_code_coverage/b5445951-ff48-4d3e-813e-35e050d67ed4.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000004010400000000000000000000000000000000000000200800400101010001011010010020000000000000000000000000000000001004088001080101000204408008040800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 17196908544, 166315778558197992675576074937106464, 21288589520793585473365695171941368840, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101011001011080000000000000000000000000000000000080808008000120024000808000010800000000000000000000000000000000000000000000000011, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 20361948464842461288419312078976, 667220290002412567496564668568174856, 1224979098644774912), value: 0x0



overall time used (seconds): 2530.8717153072357



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 17.272830486297607 seconds
coverage file: ./myth_code_coverage/d04f92af-608b-4e9f-833d-acc215c0ff9a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2551.3062224388123



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59]]" --parallel-solving
Used 14.841572284698486 seconds
coverage file: ./myth_code_coverage/4989203d-1646-49b8-9c2c-d9cdba0ddbfe.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2569.3001701831818



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0xe6effbe9],[0x961c9ae4]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2689.3318989276886



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0xe6effbe9],[0x961c9ae4]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2809.363401412964



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['transferOwnership(address)'], ['cancelAuction(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0xf2fde38b],[0x859b97fe],[0x8456cb59]]" --parallel-solving
Used 19.41246223449707 seconds
coverage file: ./myth_code_coverage/57d9a895-9a7e-41ae-8e43-a8c859c4f207.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2831.9577872753143



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x5fd8c710],[0x1ae6b6ee]]" --parallel-solving
Used 15.941964387893677 seconds
coverage file: ./myth_code_coverage/686c49a1-f0db-4a3e-8ca8-dd43f4860987.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2851.104956150055



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0x961c9ae4]]" --parallel-solving
Used 14.71742558479309 seconds
coverage file: ./myth_code_coverage/7132a753-6d38-41b4-97ba-38b0a8539b25.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2869.033965587616



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5]]" --parallel-solving
Used 15.919304370880127 seconds
coverage file: ./myth_code_coverage/b5aea445-ef78-44d6-a321-8e73e96017b3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2888.1327831745148



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe]]" --parallel-solving
Used 15.858059644699097 seconds
coverage file: ./myth_code_coverage/c9a9109f-4a47-4143-ba84-af5d2aa19c99.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2907.1729485988617



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['pause()'], ['pause()'], ['unpause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x8456cb59],[0x8456cb59],[0x3f4ba83a],[0x859b97fe]]" --parallel-solving
Used 15.810166358947754 seconds
coverage file: ./myth_code_coverage/edea84c0-6d58-4592-bdf2-77467835ee8a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2926.151261329651



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9]]" --parallel-solving
Used 80.67482137680054 seconds
coverage file: ./myth_code_coverage/8ed2ecfc-2581-41ed-804f-f6ed65a2820b.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000880200800000000000000000000000000000000000404100208021000400008020480010400000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080042002001000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000000880200800000000000000000000000000000000000404100208021000400008020480010400000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 3010.1191685199738



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['transferOwnership(address)'], ['bid(address,uint256)'], ['pause()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xf2fde38b],[0x59d667a5],[0x8456cb59],[0x59d667a5]]" --parallel-solving
Used 18.924434661865234 seconds
coverage file: ./myth_code_coverage/57e708ed-f0e5-4ac0-a7ff-4b17883750c3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3032.2281396389008



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x3f4ba83a]]" --parallel-solving
Used 63.45850491523743 seconds
coverage file: ./myth_code_coverage/57fe42c6-8cde-43b0-ae17-3999403cb1bc.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010200200110000000000000000000000000000000000110800480020001018002040880080800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282583080370448, 1414901250479889713158141360121841672, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0



overall time used (seconds): 3099.138953447342



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['pause()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x8456cb59],[0x59d667a5]]" --parallel-solving
Used 15.993000745773315 seconds
coverage file: ./myth_code_coverage/c0cb1f5f-dde6-4712-b342-1406519bb38e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3118.295005083084



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['transferOwnership(address)'], ['withdrawBalance()'], ['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0xf2fde38b],[0x5fd8c710],[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 3238.324175596237



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe]]" --parallel-solving
Used 15.951969385147095 seconds
coverage file: ./myth_code_coverage/4f26d0fa-7a19-474c-89ff-e99dc5f7fe72.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3257.6772980690002



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0xe6effbe9],[0x8456cb59],[0x961c9ae4],[0x59d667a5]]" --parallel-solving
Used 15.81830382347107 seconds
coverage file: ./myth_code_coverage/8ae78087-e722-4f8f-986b-199c27938be0.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3276.7530167102814



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['withdrawBalance()'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x5fd8c710],[0x8456cb59]]" --parallel-solving
Used 15.970325708389282 seconds
coverage file: ./myth_code_coverage/4ad34573-2394-4c48-8eb8-5712f2a30f8b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3295.9101498126984



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x859b97fe],[0x961c9ae4]]" --parallel-solving
Used 15.998230695724487 seconds
coverage file: ./myth_code_coverage/81dd341f-ce48-4ec1-82d9-acb05cf3c853.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3315.121826171875



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x859b97fe]]" --parallel-solving
Used 17.621269702911377 seconds
coverage file: ./myth_code_coverage/043be7a8-1761-4c07-b31e-bce0fcddb523.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3335.9708003997803



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710]]" --parallel-solving
Used 15.245671510696411 seconds
coverage file: ./myth_code_coverage/222a7c0a-4cd8-4278-86a5-5928b301249f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3354.431563138962



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x859b97fe]]" --parallel-solving
Used 111.43387031555176 seconds
coverage file: ./myth_code_coverage/bce68d7a-0aad-4408-ac70-84aa0b246a14.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000204000880040080081080028002400800000000000000000000000000000000084080080020000010800220014001080000000000000000000000000000000000000000000000000080000000000002000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 2679225852448190492611410702679293960, 10968727747518809106801995015528644872, 36028797018963970, '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: cancelAuction(address,uint256), txdata: 0x859b97fee6e6e6e6e6e6e6e6e6e6e6e6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000008040100401000000000000000000000000000000000180800440404010080000100102010100000000000000000000000000000000000000000000000020, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000480401004004080200020200220080080804001002001800804008040082040100001002000800000001000084080000000000000000000000000000000000040802020108040048008200420000020000000000000000000000000000000000140408008000402804080200240800800000000000000000000000000000000000000000000000020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000802040800000000000000000000000000000000020808001084080800000200140004000000000000000000000000000000000000880001080202040402080040802100000000000000000000000000000000000000000000000000080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000de000000000000000000000000000000000000000000000000000000000000000000008040100401000000000000000000000000000000000180800440404010080000100102010100000000000000000000000000000000000000000000000020, value: 0x0



overall time used (seconds): 3469.352424621582



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['transferOwnership(address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xf2fde38b],[0x59d667a5]]" --parallel-solving
Used 18.712806701660156 seconds
coverage file: ./myth_code_coverage/a7462c6e-a9f2-4fec-802c-ca2a8a7ee0fd.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3491.2803354263306



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x859b97fe],[0x859b97fe],[0x59d667a5]]" --parallel-solving
Used 97.5879430770874 seconds
coverage file: ./myth_code_coverage/a56ec5b2-fc0e-4a49-9c6e-022e12314ed3.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001010100002100001010008014010000000000000000000000000000000000040008010024010800210104000040000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 21267973723714682518439772210071683088, 332317145105511338668675582075601920, 9223372036854775808), value: 0x0
Caller: [ATTACKER], function: cancelAuction(address,uint256), txdata: 0x859b97fe404040404040404040404040deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010200200110000000000000000000000000000000000110800480020001018002040880080800000000000000000000000000000000000000000000000001, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282583080370448, 1414901250479889713158141360121841672, 72057594037927936), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010004004040000000000000000000000000000000000480000000800201012000801001012000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574555463744, 5981525981186873396238579461940904224, 4611686018427387904), value: 0x0


