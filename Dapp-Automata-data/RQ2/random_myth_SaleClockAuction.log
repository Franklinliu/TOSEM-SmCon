./contracts/SaleClockAuction.sol:301:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:378:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ClockAuction(uint256 _cut) public {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:520:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SaleClockAuction(uint256 _cut) public
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:116:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionCreated(
        ^ (Relevant source part starts here and spans across multiple lines).
./contracts/SaleClockAuction.sol:129:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionCancelled(_nft, _tokenId);
        ^------------------------------^
./contracts/SaleClockAuction.sol:180:9: Warning: Invoking events without "emit" prefix is deprecated.
        AuctionSuccessful(_nft, _tokenId, price, msg.sender);
        ^--------------------------------------------------^
./contracts/SaleClockAuction.sol:321:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
./contracts/SaleClockAuction.sol:359:5: Warning: Invoking events without "emit" prefix is deprecated.
    Pause();
    ^-----^
./contracts/SaleClockAuction.sol:367:5: Warning: Invoking events without "emit" prefix is deprecated.
    Unpause();
    ^-------^
./contracts/SaleClockAuction.sol:391:29: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        msg.sender.transfer(this.balance);
                            ^----------^
./contracts/SaleClockAuction.sol:561:9: Warning: Unused local variable.
        address seller = nftToTokenIdToAuction[_nftAddress][_tokenId].seller;
        ^------------^
./contracts/SaleClockAuction.sol:562:9: Warning: Unused local variable.
        uint256 price = _bid(_nftAddress, _tokenId, msg.value);
        ^-----------^
./contracts/SaleClockAuction.sol:277:5: Warning: Function state mutability can be restricted to pure
    function _getNft(address _nft) internal view returns (ERC721) {
    ^ (Relevant source part starts here and spans across multiple lines).
{'mbt': False, 'random': True, 'contract_name': 'SaleClockAuction', 'model_file': None, 'abi_file': None, 'contract_file': './contracts/SaleClockAuction.sol'}
solc ./contracts/SaleClockAuction.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
cancelAuctionWhenPaused(address,uint256) 0x1ae6b6ee
unpause() 0x3f4ba83a
bid(address,uint256) 0x59d667a5
withdrawBalance() 0x5fd8c710
pause() 0x8456cb59
cancelAuction(address,uint256) 0x859b97fe
createAuction(address,uint256,uint256,uint256,uint256) 0x961c9ae4
createAuction(address,uint256,uint256,uint256,uint256,address) 0xe6effbe9
transferOwnership(address) 0xf2fde38b
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0xe6effbe9],[0xe6effbe9]]" --parallel-solving
Used 10.608415842056274 seconds
coverage file: ./myth_code_coverage/d2288dd7-d298-44c4-8095-0245f57dda52.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 25.3425509929657



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['bid(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x59d667a5],[0x1ae6b6ee]]" --parallel-solving
Used 11.73418402671814 seconds
coverage file: ./myth_code_coverage/bedf8301-d1b0-4aba-bf46-87eb2d3b90c3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 39.975182056427



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['bid(address,uint256)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x59d667a5],[0x5fd8c710],[0x1ae6b6ee],[0x5fd8c710]]" --parallel-solving
Used 10.761179208755493 seconds
coverage file: ./myth_code_coverage/ef799039-becf-462b-b548-be9f3af25417.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 53.55325722694397



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b]]" --parallel-solving
Used 10.317877054214478 seconds
coverage file: ./myth_code_coverage/8d1ffdfc-502f-47d4-a3c3-07e38d246551.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 66.69166827201843



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xe6effbe9],[0xe6effbe9],[0x1ae6b6ee],[0x5fd8c710]]" --parallel-solving
Used 12.768526077270508 seconds
coverage file: ./myth_code_coverage/9be922af-f015-4323-8ef9-00b31fb1bac1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 82.27484798431396



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['unpause()'], ['bid(address,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x3f4ba83a],[0x59d667a5],[0x59d667a5]]" --parallel-solving
Used 10.902743101119995 seconds
coverage file: ./myth_code_coverage/702de798-df52-4ae0-8bf3-6215bcbe1089.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 96.00820016860962



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()'], ['bid(address,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x1ae6b6ee],[0x5fd8c710],[0x59d667a5],[0x59d667a5]]" --parallel-solving
Used 10.945377111434937 seconds
coverage file: ./myth_code_coverage/9978280d-7f9f-4030-8251-083746c0a0bd.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 109.81230306625366



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x961c9ae4],[0x961c9ae4],[0x8456cb59],[0xe6effbe9]]" --parallel-solving
Used 10.474621772766113 seconds
coverage file: ./myth_code_coverage/674b13f7-cf76-4fc5-8301-3604eae3339a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 123.12045001983643



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x8456cb59]]" --parallel-solving
Used 10.218318700790405 seconds
coverage file: ./myth_code_coverage/7f2bf509-7a59-4e89-ad90-c3d2e0393f12.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 136.20344805717468



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['pause()'], ['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x8456cb59],[0x1ae6b6ee],[0xe6effbe9],[0x3f4ba83a]]" --parallel-solving
Used 12.439420938491821 seconds
coverage file: ./myth_code_coverage/bf941e6f-2be3-4f08-ad46-1e67362f2462.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 151.51378917694092



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x961c9ae4],[0x859b97fe]]" --parallel-solving
Used 34.222553968429565 seconds
coverage file: ./myth_code_coverage/b9ef9640-8383-4c77-8088-e788ffcbfd91.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbee600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201000000010000000000000104000000000000000000000000000000000000200020002020200000402080028000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbee6', 0, 40644047369836051929561756074244, 649047010988876065713983223497344, 4611686018427387904), value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010001000000000000000000000000000000000000000000000040000000000040000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: cancelAuction(address,uint256), txdata: 0x859b97fe101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 188.86802911758423



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x8456cb59]]" --parallel-solving
Used 10.57358694076538 seconds
coverage file: ./myth_code_coverage/a8f3c1e1-00ca-4087-b61a-f11f025b324e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 202.35498428344727



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a]]" --parallel-solving
Used 9.543310165405273 seconds
coverage file: ./myth_code_coverage/40eb9eae-e015-4f98-9b9c-f6a1bd5486f8.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 214.71771121025085



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['unpause()'], ['bid(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x3f4ba83a],[0x59d667a5],[0xf2fde38b]]" --parallel-solving
Used 10.366888999938965 seconds
coverage file: ./myth_code_coverage/fdbf2719-d0c5-47f7-9380-2cc481dcb7ac.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 227.89895009994507



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0xf2fde38b],[0x961c9ae4],[0x5fd8c710]]" --parallel-solving
Used 10.533080101013184 seconds
coverage file: ./myth_code_coverage/de9f528a-fd9d-4656-ad83-9a273ea4d426.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 241.27483916282654



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x961c9ae4]]" --parallel-solving
Used 17.09855580329895 seconds
coverage file: ./myth_code_coverage/4bfb4101-44c4-46ae-80ac-592ca12b337d.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000200000804000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 137438986304, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0



overall time used (seconds): 261.302481174469



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['withdrawBalance()'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x5fd8c710],[0x5fd8c710]]" --parallel-solving
Used 10.657290935516357 seconds
coverage file: ./myth_code_coverage/35157037-9f9d-486c-937f-581eb6122757.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 274.7837612628937



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xf2fde38b],[0x961c9ae4]]" --parallel-solving
Used 19.769709825515747 seconds
coverage file: ./myth_code_coverage/89dc3ab0-b4b1-4ba0-bc77-9e3a52b78731.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 18446744073709551616, 0, 4611686018427387904), value: 0x0



overall time used (seconds): 297.474240064621



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x961c9ae4],[0x961c9ae4]]" --parallel-solving
Used 24.38287115097046 seconds
coverage file: ./myth_code_coverage/3837a4b6-dc94-45e8-ad65-6bdfcb75cf4d.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000200000804000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 137438986304, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000808080801000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 1213648186097498819919872, 551911718928, 4611686018427387904), value: 0x0



overall time used (seconds): 324.8145241737366



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['bid(address,uint256)'], ['unpause()'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x59d667a5],[0x3f4ba83a],[0x3f4ba83a]]" --parallel-solving
Used 10.493226051330566 seconds
coverage file: ./myth_code_coverage/981f8874-a624-4547-9e3a-db9653d6df74.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 338.14719319343567



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x961c9ae4],[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 52.52831292152405 seconds
coverage file: ./myth_code_coverage/3d484836-ba93-41a1-aaa7-686cc373d52e.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000201000000010001000000000100000000000000000000000000000000000000000000000000000000022002800000000000000000000000000000000000000000000000000010, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 40644047369836052211036732784896, 9126969344, 1152921504606846976), value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: cancelAuction(address,uint256), txdata: 0x859b97fe101010101010101010101010deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204002802000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806260338720, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000204080800000000000000000000000000000000000000000000000000040, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801806268596224, 4611686018427387904), value: 0x0



overall time used (seconds): 393.8979082107544



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['pause()'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x8456cb59],[0xf2fde38b]]" --parallel-solving
Used 10.580687761306763 seconds
coverage file: ./myth_code_coverage/f00038f2-d537-490b-b0d1-c4d19be24ce3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 407.3248782157898



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['transferOwnership(address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x5fd8c710],[0xf2fde38b],[0x859b97fe]]" --parallel-solving
Used 10.573622226715088 seconds
coverage file: ./myth_code_coverage/6d9a1645-ca29-4ba0-ba49-415a8198daae.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 420.7429120540619



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x3f4ba83a]]" --parallel-solving
Used 10.343015909194946 seconds
coverage file: ./myth_code_coverage/305eac14-8b0a-47f1-bcbd-9a01d8cdd803.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 433.9203062057495



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 10.448559999465942 seconds
coverage file: ./myth_code_coverage/5f30201b-0dc8-49c5-a922-3c8977bae44d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 447.18497037887573



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xe6effbe9],[0x859b97fe]]" --parallel-solving
Used 12.687358856201172 seconds
coverage file: ./myth_code_coverage/20bf0093-5cd8-4510-af43-f12554e87082.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 462.6959080696106



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710]]" --parallel-solving
Used 9.759774923324585 seconds
coverage file: ./myth_code_coverage/d68d4d4d-e21e-4d79-a29c-2597ef623e30.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 475.2908911705017



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x961c9ae4]]" --parallel-solving
Used 17.127827167510986 seconds
coverage file: ./myth_code_coverage/75e7dac4-f5aa-4563-a2ae-f5e90692b817.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 128, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000008000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 0, 2147483776, 9223372036854775808), value: 0x0



overall time used (seconds): 495.3486042022705



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4]]" --parallel-solving
Used 15.946186065673828 seconds
coverage file: ./myth_code_coverage/cebc35db-241e-4231-a122-052572569ce2.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 514.1746621131897



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59]]" --parallel-solving
Used 9.586896896362305 seconds
coverage file: ./myth_code_coverage/e4adc8e3-e039-49af-bbf6-0ce9348da578.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 526.5545179843903



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()'], ['bid(address,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x1ae6b6ee],[0x5fd8c710],[0x59d667a5],[0x59d667a5]]" --parallel-solving
Used 10.378039121627808 seconds
coverage file: ./myth_code_coverage/a8967969-e671-4cf3-864a-e90f495e88c4.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 539.7342772483826



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['bid(address,uint256)'], ['pause()'], ['cancelAuction(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x59d667a5],[0x8456cb59],[0x859b97fe],[0x1ae6b6ee]]" --parallel-solving
Used 12.237832069396973 seconds
coverage file: ./myth_code_coverage/78fff5d6-90e6-48fc-aba9-564abd109b87.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 554.7996363639832



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0xe6effbe9],[0xe6effbe9]]" --parallel-solving
Used 9.540071249008179 seconds
coverage file: ./myth_code_coverage/bf51d785-87f9-47b2-aabd-4f1a923ea1d9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 567.1847121715546



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['transferOwnership(address)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0xf2fde38b],[0x1ae6b6ee]]" --parallel-solving
Used 10.992869138717651 seconds
coverage file: ./myth_code_coverage/f99e24cd-0b0c-45e1-ba5d-c5e029200d72.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 581.0103092193604



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0xe6effbe9],[0x1ae6b6ee],[0x1ae6b6ee],[0xe6effbe9]]" --parallel-solving
Used 13.65573501586914 seconds
coverage file: ./myth_code_coverage/a7a20f9e-e831-46c4-8fca-40054e1f8abf.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 597.5059702396393



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['bid(address,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x59d667a5],[0x3f4ba83a]]" --parallel-solving
Used 10.503445148468018 seconds
coverage file: ./myth_code_coverage/3e7c1032-6e3e-4ba2-8a6d-99bec911bec6.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 610.8239190578461



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 10.574559926986694 seconds
coverage file: ./myth_code_coverage/6269047e-c2bc-457d-93cb-6dedd5fa64fc.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 624.2108919620514



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0xe6effbe9],[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 10.496046781539917 seconds
coverage file: ./myth_code_coverage/8b67d94c-032e-4907-875c-c0a84186d458.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 637.5417802333832



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 11.287578821182251 seconds
coverage file: ./myth_code_coverage/bd77f3af-27cf-4849-b4e7-75a85ff00fe5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 651.6368050575256



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9]]" --parallel-solving
Used 20.210145711898804 seconds
coverage file: ./myth_code_coverage/925a03ae-1f0d-48be-821f-bcff964dbcc0.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000008000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 674.9068872928619



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x961c9ae4],[0xe6effbe9],[0xf2fde38b],[0x1ae6b6ee]]" --parallel-solving
Used 59.69861626625061 seconds
coverage file: ./myth_code_coverage/12c5c83d-7ca6-477d-822d-a96f29739062.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 738.0601651668549



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['pause()'], ['cancelAuction(address,uint256)'], ['pause()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x8456cb59],[0x859b97fe],[0x8456cb59],[0x1ae6b6ee]]" --parallel-solving
Used 10.515522956848145 seconds
coverage file: ./myth_code_coverage/dd68e287-4d64-49fa-b1de-942c9ec7757b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 751.8257279396057



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x961c9ae4]]" --parallel-solving
Used 26.847511053085327 seconds
coverage file: ./myth_code_coverage/87b7c627-16aa-4de2-937c-e8ecd6409eac.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000008000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 781.65904712677



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuction(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x859b97fe],[0x8456cb59]]" --parallel-solving
Used 23.935603857040405 seconds
coverage file: ./myth_code_coverage/4af14c87-8d05-4fb2-83c7-93048f8539cf.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000001010001000000000000000000000000000000000000000000000000000000000000108040800100000000000000000000000000000000000000000000000008, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 79228162514264620168049065984, 70871187457, 576460752303423488), value: 0x0
Caller: [ATTACKER], function: cancelAuction(address,uint256), txdata: 0x859b97fe1c1c1c1c1c1c1c1c1c1c1c1cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 808.5837333202362



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['transferOwnership(address)'], ['withdrawBalance()'], ['transferOwnership(address)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xf2fde38b],[0x5fd8c710],[0xf2fde38b],[0x3f4ba83a]]" --parallel-solving
Used 13.205429792404175 seconds
coverage file: ./myth_code_coverage/3e0c5177-3771-421f-bdc7-dfcfc0486ca6.json
==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0



overall time used (seconds): 824.6013660430908



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0xe6effbe9],[0xf2fde38b]]" --parallel-solving
Used 14.130154132843018 seconds
coverage file: ./myth_code_coverage/84e4e93a-75bd-41c8-ad18-f2a08fdbfcba.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 841.6802651882172



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x1ae6b6ee],[0x5fd8c710]]" --parallel-solving
Used 11.431754112243652 seconds
coverage file: ./myth_code_coverage/77220783-db5f-462e-b555-07ff57614b92.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 855.9568161964417



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 10.187048196792603 seconds
coverage file: ./myth_code_coverage/d75b8203-6eb5-47ba-8f28-47f0d1c6b460.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 868.933785200119



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['unpause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0x3f4ba83a],[0x859b97fe]]" --parallel-solving
Used 9.547852039337158 seconds
coverage file: ./myth_code_coverage/6bbf5da6-3664-4fc5-8b78-396438e8274f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 881.287709236145



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x1ae6b6ee],[0x859b97fe],[0x859b97fe],[0xf2fde38b]]" --parallel-solving
Used 9.544165849685669 seconds
coverage file: ./myth_code_coverage/b227d2b1-1c7f-43fe-85e3-cd0f7d3554c2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 893.6477301120758



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['pause()'], ['cancelAuction(address,uint256)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x1ae6b6ee],[0x8456cb59],[0x859b97fe],[0x859b97fe]]" --parallel-solving
Used 10.935462236404419 seconds
coverage file: ./myth_code_coverage/18ff27a6-ad56-444b-ac0e-439a3096014f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 907.4096660614014



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x1ae6b6ee],[0x5fd8c710],[0x5fd8c710]]" --parallel-solving
Used 21.4663348197937 seconds
coverage file: ./myth_code_coverage/78a472a4-f066-415f-aaef-b2040f45bf19.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 931.8884372711182



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0xf2fde38b],[0xe6effbe9],[0xf2fde38b]]" --parallel-solving
Used 10.21774697303772 seconds
coverage file: ./myth_code_coverage/2fa121e0-7e3c-4acb-87e9-2d2596ba28b4.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 944.9037511348724



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0xe6effbe9]]" --parallel-solving
Used 10.284468173980713 seconds
coverage file: ./myth_code_coverage/f0814d9c-038f-4c86-87f4-f2eee9cd9488.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 958.0080301761627



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['bid(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x59d667a5],[0x8456cb59]]" --parallel-solving
Used 10.546650171279907 seconds
coverage file: ./myth_code_coverage/a2cbe69a-9d4c-4c04-a877-0626e3e37273.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 971.3641061782837



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0xf2fde38b],[0x1ae6b6ee]]" --parallel-solving
Used 24.043052911758423 seconds
coverage file: ./myth_code_coverage/1b343dff-32d2-48be-9a7b-2503300cac8c.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 998.3233351707458



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x8456cb59],[0x961c9ae4],[0x961c9ae4]]" --parallel-solving
Used 36.54082632064819 seconds
coverage file: ./myth_code_coverage/37d7d632-0f75-4aad-ad34-c33a683f1473.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 1038.0633862018585



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9]]" --parallel-solving
Used 19.748919010162354 seconds
coverage file: ./myth_code_coverage/2f222f91-5078-42ec-bc33-e9e1061f3843.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000801000010400000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 1060.7322471141815



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x859b97fe]]" --parallel-solving
Used 11.687196969985962 seconds
coverage file: ./myth_code_coverage/7c482fb2-3b1a-49c4-8271-1d3131f7f389.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1075.2758481502533



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 10.48702597618103 seconds
coverage file: ./myth_code_coverage/9c2208cd-9b90-4fb6-8968-b6d8bbec4180.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1088.5471861362457



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['bid(address,uint256)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x59d667a5],[0x59d667a5]]" --parallel-solving
Used 9.475666999816895 seconds
coverage file: ./myth_code_coverage/03bb1963-c664-43c6-8a1f-80fc75290ad1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1100.8126792907715



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe]]" --parallel-solving
Used 10.51745891571045 seconds
coverage file: ./myth_code_coverage/f87219f4-fe75-4507-80b8-1eb6a174e223.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1114.129114151001



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)'], ['cancelAuction(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x59d667a5],[0x859b97fe],[0xf2fde38b]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1234.2045030593872



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4]]" --parallel-solving
Used 15.68585205078125 seconds
coverage file: ./myth_code_coverage/911a2442-3977-4485-9493-22f466b8c3e7.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 1253.0351972579956



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['withdrawBalance()'], ['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x5fd8c710],[0x3f4ba83a],[0xe6effbe9],[0x59d667a5]]" --parallel-solving
Used 12.183561086654663 seconds
coverage file: ./myth_code_coverage/239a788a-1d3b-4a9e-997b-bfe5f232c36f.json
==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0



overall time used (seconds): 1268.0522351264954



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x59d667a5]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1388.1185410022736



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['cancelAuction(address,uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x961c9ae4],[0x1ae6b6ee],[0x859b97fe],[0x8456cb59]]" --parallel-solving
Used 10.256330966949463 seconds
coverage file: ./myth_code_coverage/d4dce9cd-973f-434f-9f52-1c607ac783be.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1401.242527961731



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['cancelAuction(address,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x859b97fe],[0x3f4ba83a]]" --parallel-solving
Used 9.526901245117188 seconds
coverage file: ./myth_code_coverage/060779ae-5526-41c6-9e82-ae446cf10457.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1413.585919380188



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x59d667a5],[0xe6effbe9]]" --parallel-solving
Used 10.531150102615356 seconds
coverage file: ./myth_code_coverage/a2e49a16-d0b3-4f8a-aa67-e8a44315d071.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1426.9379062652588



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x961c9ae4]]" --parallel-solving
Used 10.394574165344238 seconds
coverage file: ./myth_code_coverage/4acce90f-6743-4881-b21a-29fb094777c2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1440.1456842422485



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0x1ae6b6ee]]" --parallel-solving
Used 10.931223154067993 seconds
coverage file: ./myth_code_coverage/9418c767-e3d3-47ff-a593-0b84d70965e9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1453.868016242981



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0xf2fde38b],[0xe6effbe9]]" --parallel-solving
Used 14.878346920013428 seconds
coverage file: ./myth_code_coverage/8adfbcd2-4f77-4351-9eb3-7c17676f6205.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1471.5900042057037



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['bid(address,uint256)'], ['pause()'], ['withdrawBalance()'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x59d667a5],[0x8456cb59],[0x5fd8c710],[0x8456cb59]]" --parallel-solving
Used 9.664753913879395 seconds
coverage file: ./myth_code_coverage/08fb79c0-8c53-4207-9b0c-3a07c5204deb.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1484.0960881710052



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a]]" --parallel-solving
Used 9.688119173049927 seconds
coverage file: ./myth_code_coverage/e5cde605-5d2e-46f9-b4d3-6771e45f0e99.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1496.6035623550415



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['transferOwnership(address)'], ['unpause()'], ['pause()'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0xf2fde38b],[0x3f4ba83a],[0x8456cb59],[0xf2fde38b]]" --parallel-solving
Used 11.862112045288086 seconds
coverage file: ./myth_code_coverage/9e72b74a-df64-4a43-80b2-25bec3099c6f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1511.2796993255615



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x59d667a5]]" --parallel-solving
Used 9.543246984481812 seconds
coverage file: ./myth_code_coverage/2010f432-ab15-4a35-9393-c3bf05a82fb3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1523.6552240848541



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['transferOwnership(address)'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0xf2fde38b],[0x1ae6b6ee],[0x5fd8c710],[0x8456cb59]]" --parallel-solving
Used 10.509289979934692 seconds
coverage file: ./myth_code_coverage/ff52de51-94a9-472a-b6f1-fd7b3fa8717d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1536.9902393817902



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()'], ['pause()'], ['bid(address,uint256)'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x3f4ba83a],[0x8456cb59],[0x59d667a5],[0x3f4ba83a]]" --parallel-solving
Used 20.986233234405518 seconds
coverage file: ./myth_code_coverage/5119a2fb-5285-4321-a759-ddf97fb4e543.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 1560.8667821884155



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x961c9ae4],[0x5fd8c710],[0x961c9ae4]]" --parallel-solving
Used 11.15845012664795 seconds
coverage file: ./myth_code_coverage/d759905b-2127-484e-be75-325e9baccaaa.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1574.862565279007



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['pause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x8456cb59],[0x859b97fe]]" --parallel-solving
Used 12.653997659683228 seconds
coverage file: ./myth_code_coverage/9e1a6e13-6a4f-44bf-b685-13a306551e55.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1590.3430371284485



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x961c9ae4],[0xe6effbe9],[0x3f4ba83a],[0x1ae6b6ee]]" --parallel-solving
Used 9.472842931747437 seconds
coverage file: ./myth_code_coverage/4e343ff7-ef69-4f27-9cb2-eaad56a35001.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1602.6134130954742



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['withdrawBalance()'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x5fd8c710],[0x59d667a5]]" --parallel-solving
Used 10.705941915512085 seconds
coverage file: ./myth_code_coverage/937219a7-57f5-4348-b7d0-a02d22fe152f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1616.1534371376038



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['bid(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x59d667a5],[0x961c9ae4],[0xe6effbe9],[0x859b97fe],[0xf2fde38b]]" --parallel-solving
Used 10.54659104347229 seconds
coverage file: ./myth_code_coverage/58b582cf-aee7-46ec-978a-85fd5cb569d5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1629.5213832855225



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['unpause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0xe6effbe9],[0x3f4ba83a],[0x859b97fe]]" --parallel-solving
Used 13.451790809631348 seconds
coverage file: ./myth_code_coverage/bb8082fe-2d45-4fd3-9c72-6e776d676954.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1645.8231873512268



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['unpause()'], ['unpause()'], ['bid(address,uint256)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x3f4ba83a],[0x3f4ba83a],[0x59d667a5],[0xf2fde38b]]" --parallel-solving
Used 9.503931999206543 seconds
coverage file: ./myth_code_coverage/a15508f4-be03-4302-acac-82d9f5f6f02c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1658.14004611969



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x5fd8c710],[0xe6effbe9],[0xf2fde38b],[0xe6effbe9]]" --parallel-solving
Used 13.84813404083252 seconds
coverage file: ./myth_code_coverage/651151c6-960c-4c90-a78c-7e56b52b4c5c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1674.815968990326



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['pause()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0x8456cb59],[0x859b97fe]]" --parallel-solving
Used 10.326604127883911 seconds
coverage file: ./myth_code_coverage/ef61226f-b60d-474b-a384-f33e3e35dc25.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1687.973274230957



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['pause()'], ['transferOwnership(address)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)'], ['withdrawBalance()']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x8456cb59],[0xf2fde38b],[0x5fd8c710],[0x1ae6b6ee],[0x5fd8c710]]" --parallel-solving
Used 14.246553182601929 seconds
coverage file: ./myth_code_coverage/dec6874e-ed90-4c9c-8b1c-f5c22ee9ba0a.json
==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SaleClockAuction
Function name: withdrawBalance()
PC address: 1955
Estimated Gas Usage: 2595 - 37206
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/SaleClockAuction.sol:391

msg.sender.transfer(this.balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: pause(), txdata: 0x8456cb59, value: 0x0
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38befefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawBalance(), txdata: 0x5fd8c710, value: 0x0



overall time used (seconds): 1705.0500512123108



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4]]" --parallel-solving
Used 15.702690839767456 seconds
coverage file: ./myth_code_coverage/a174ae10-ed0c-48d3-81b7-453f89098327.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 1723.6179521083832



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee]]" --parallel-solving
Used 10.24480390548706 seconds
coverage file: ./myth_code_coverage/3a243f40-bdc1-43d7-ba53-b4178cb15167.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1736.7054481506348



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['bid(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0x59d667a5]]" --parallel-solving
Used 11.660144805908203 seconds
coverage file: ./myth_code_coverage/fc387d2c-2ca4-4a89-8ea4-cc0a23554586.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1751.1878650188446



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['pause()'], ['pause()'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x8456cb59],[0x8456cb59],[0x961c9ae4]]" --parallel-solving
Used 10.461062908172607 seconds
coverage file: ./myth_code_coverage/761da5af-8902-422a-b0ec-8446f20ed0f9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1764.4767689704895



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x1ae6b6ee],[0x961c9ae4]]" --parallel-solving
Used 10.298657894134521 seconds
coverage file: ./myth_code_coverage/9e2247b4-606d-4ea5-b4b1-6f95816105be.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1777.6155309677124



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['cancelAuctionWhenPaused(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x1ae6b6ee],[0xe6effbe9],[0xe6effbe9],[0x859b97fe]]" --parallel-solving
Used 17.476577043533325 seconds
coverage file: ./myth_code_coverage/caafb62b-1e22-400f-9f79-7410e9c34484.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5165
Estimated Gas Usage: 39246 - 199630
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000000080400400000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801667755884548, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5313
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5366
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5384
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5437
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5455
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5500
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5518
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5563
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5581
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5610
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5628
Estimated Gas Usage: 39246 - 199630
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256)
PC address: 5657
Estimated Gas Usage: 39246 - 199630
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createAuction(address,uint256,uint256,uint256,uint256), txdata: 0x961c9ae4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010000000000000000000000000000000000000000000000000000000001010000040440800000000000000000000000000000000000000000000000000080, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 282574488338432, 18518801684998684672, 9223372036854775808), value: 0x0



overall time used (seconds): 1797.9959280490875



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['transferOwnership(address)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['withdrawBalance()'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xf2fde38b],[0xe6effbe9],[0x5fd8c710],[0x859b97fe]]" --parallel-solving
Used 14.07507610321045 seconds
coverage file: ./myth_code_coverage/17951f68-db27-4bad-8b84-b9af31983513.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1814.9372322559357



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x859b97fe]]" --parallel-solving
Used 26.020891189575195 seconds
coverage file: ./myth_code_coverage/9751dec3-6cc4-4437-a192-a1ace3a5e579.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001000000000000000000000000000000000000000000000000010000000000000000000020408004100000000000000000000000000000000000000000000000001040000000000008000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 79228162532711081667253501952, 1329227995784915872903807198801429520, 1170935903116328968, '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: cancelAuction(address,uint256), txdata: 0x859b97fee9e9e9e9e9e9e9e9e9e9e9e9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000808010801000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 1843.941578388214



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0xe6effbe9],[0xf2fde38b]]" --parallel-solving
Used 10.554941892623901 seconds
coverage file: ./myth_code_coverage/830b8f1c-5668-4cc2-9dc8-3c2ce86b2a2c.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1857.3231801986694



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['cancelAuction(address,uint256)'], ['unpause()'], ['createAuction(address,uint256,uint256,uint256,uint256)'], ['createAuction(address,uint256,uint256,uint256,uint256,address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0xe6effbe9],[0x859b97fe],[0x3f4ba83a],[0x961c9ae4],[0xe6effbe9]]" --parallel-solving
Used 28.328752040863037 seconds
coverage file: ./myth_code_coverage/b21d2c92-1b2d-43b6-b7c5-937fa46a28ae.json
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: cancelAuction(address,uint256)
PC address: 4669
Estimated Gas Usage: 40274 - 198872
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:102

nonFungibleContract.transfer(_receiver, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001000000000000020100000000000000000000000000000000010000000000000000000001040808000000000000000000000000000000000000000000000000008000000000000002000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', 0, 79228162532711081667253502465, 1329227995784915872903807064642947072, 9223372036854775810, '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: cancelAuction(address,uint256), txdata: 0x859b97fe020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5165
Estimated Gas Usage: 41902 - 237366
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/SaleClockAuction.sol:90

nonFungibleContract.transferFrom(_owner, this, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000008000000000000000000000000000000000000000000000000000000080, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5313
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5366
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5384
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5437
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5455
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5500
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5518
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5563
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5581
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5610
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5628
Estimated Gas Usage: 41902 - 237366
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 5657
Estimated Gas Usage: 41902 - 237366
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/SaleClockAuction.sol:114

nftToTokenIdToAuction[_nft][_tokenId] = _auction

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SaleClockAuction
Function name: createAuction(address,uint256,uint256,uint256,uint256,address)
PC address: 6017
Estimated Gas Usage: 41902 - 237366
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/SaleClockAuction.sol:78

nonFungibleContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createAuction(address,uint256,uint256,uint256,uint256,address), txdata: 0xe6effbe9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000de000000de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000018020800000000000000000000000000000000000000000000000000040, value: 0x0



overall time used (seconds): 1888.6333820819855



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['createAuction(address,uint256,uint256,uint256,uint256)'], ['bid(address,uint256)'], ['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['cancelAuctionWhenPaused(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x961c9ae4],[0x59d667a5],[0x859b97fe],[0x5fd8c710],[0x1ae6b6ee]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2008.707767009735



myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[['cancelAuction(address,uint256)'], ['withdrawBalance()'], ['createAuction(address,uint256,uint256,uint256,uint256,address)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/SaleClockAuction.sol:SaleClockAuction --transaction-sequences "[[0x859b97fe],[0x5fd8c710],[0xe6effbe9],[0xf2fde38b]]" --parallel-solving
Used 10.483165979385376 seconds
coverage file: ./myth_code_coverage/100be359-faca-4d1a-ad1c-3fa79c85dac2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2022.2729001045227



