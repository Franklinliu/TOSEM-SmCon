./contracts/CryptoPunksMarket.sol:59:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function CryptoPunksMarket() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:70:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
./contracts/CryptoPunksMarket.sol:71:31: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (allPunksAssigned) throw;
                              ^---^
./contracts/CryptoPunksMarket.sol:72:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:87:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
./contracts/CryptoPunksMarket.sol:95:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
./contracts/CryptoPunksMarket.sol:100:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:101:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punksRemainingToAssign == 0) throw;
                                         ^---^
./contracts/CryptoPunksMarket.sol:102:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != 0x0) throw;
                                                  ^---^
./contracts/CryptoPunksMarket.sol:103:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:112:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:113:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:114:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:134:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:135:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:136:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:142:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:143:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:144:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:150:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:151:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:152:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:158:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:160:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:161:31: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!offer.isForSale) throw;                // punk not actually for sale
                              ^---^
./contracts/CryptoPunksMarket.sol:162:72: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (offer.onlySellTo != 0x0 && offer.onlySellTo != msg.sender) throw;  // punk not supposed to be sold to this user
                                                                       ^---^
./contracts/CryptoPunksMarket.sol:163:41: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value < offer.minValue) throw;      // Didn't send enough ETH
                                        ^---^
./contracts/CryptoPunksMarket.sol:164:60: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (offer.seller != punkIndexToAddress[punkIndex]) throw; // Seller no longer owner of punk
                                                           ^---^
./contracts/CryptoPunksMarket.sol:188:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;
                               ^---^
./contracts/CryptoPunksMarket.sol:197:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:198:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;                
                               ^---^
./contracts/CryptoPunksMarket.sol:199:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] == 0x0) throw;
                                                  ^---^
./contracts/CryptoPunksMarket.sol:200:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] == msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:201:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value == 0) throw;
                            ^---^
./contracts/CryptoPunksMarket.sol:203:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value <= existing.value) throw;
                                         ^---^
./contracts/CryptoPunksMarket.sol:213:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:214:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;                
                               ^---^
./contracts/CryptoPunksMarket.sol:215:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] != msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:218:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (bid.value == 0) throw;
                            ^---^
./contracts/CryptoPunksMarket.sol:219:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (bid.value < minPrice) throw;
                                  ^---^
./contracts/CryptoPunksMarket.sol:234:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndex >= 10000) throw;
                                ^---^
./contracts/CryptoPunksMarket.sol:235:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!allPunksAssigned) throw;                
                               ^---^
./contracts/CryptoPunksMarket.sol:236:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] == 0x0) throw;
                                                  ^---^
./contracts/CryptoPunksMarket.sol:237:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (punkIndexToAddress[punkIndex] == msg.sender) throw;
                                                         ^---^
./contracts/CryptoPunksMarket.sol:239:39: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (bid.bidder != msg.sender) throw;
                                      ^---^
./contracts/CryptoPunksMarket.sol:125:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Bid bid = punkBids[punkIndex];
        ^-----^
./contracts/CryptoPunksMarket.sol:159:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Offer offer = punksOfferedForSale[punkIndex];
        ^---------^
./contracts/CryptoPunksMarket.sol:179:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Bid bid = punkBids[punkIndex];
        ^-----^
./contracts/CryptoPunksMarket.sol:202:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Bid existing = punkBids[punkIndex];
        ^----------^
./contracts/CryptoPunksMarket.sol:217:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Bid bid = punkBids[punkIndex];
        ^-----^
./contracts/CryptoPunksMarket.sol:238:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Bid bid = punkBids[punkIndex];
        ^-----^
./contracts/CryptoPunksMarket.sol:82:13: Warning: Invoking events without "emit" prefix is deprecated.
            Assign(to, punkIndex);
            ^-------------------^
./contracts/CryptoPunksMarket.sol:107:9: Warning: Invoking events without "emit" prefix is deprecated.
        Assign(msg.sender, punkIndex);
        ^---------------------------^
./contracts/CryptoPunksMarket.sol:121:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, to, 1);
        ^-------------------------^
./contracts/CryptoPunksMarket.sol:122:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkTransfer(msg.sender, to, punkIndex);
        ^-------------------------------------^
./contracts/CryptoPunksMarket.sol:138:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkNoLongerForSale(punkIndex);
        ^----------------------------^
./contracts/CryptoPunksMarket.sol:146:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkOffered(punkIndex, minSalePriceInWei, 0x0);
        ^--------------------------------------------^
./contracts/CryptoPunksMarket.sol:154:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkOffered(punkIndex, minSalePriceInWei, toAddress);
        ^--------------------------------------------------^
./contracts/CryptoPunksMarket.sol:171:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(seller, msg.sender, 1);
        ^-----------------------------^
./contracts/CryptoPunksMarket.sol:175:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkBought(punkIndex, msg.value, seller, msg.sender);
        ^--------------------------------------------------^
./contracts/CryptoPunksMarket.sol:209:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkBidEntered(punkIndex, msg.value, msg.sender);
        ^----------------------------------------------^
./contracts/CryptoPunksMarket.sol:224:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(seller, bid.bidder, 1);
        ^-----------------------------^
./contracts/CryptoPunksMarket.sol:230:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkBought(punkIndex, bid.value, seller, bid.bidder);
        ^--------------------------------------------------^
./contracts/CryptoPunksMarket.sol:240:9: Warning: Invoking events without "emit" prefix is deprecated.
        PunkBidWithdrawn(punkIndex, bid.value, msg.sender);
        ^------------------------------------------------^
./contracts/CryptoPunksMarket.sol:59:5: Warning: No visibility specified. Defaulting to "public". 
    function CryptoPunksMarket() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:69:5: Warning: No visibility specified. Defaulting to "public". 
    function setInitialOwner(address to, uint punkIndex) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:86:5: Warning: No visibility specified. Defaulting to "public". 
    function setInitialOwners(address[] addresses, uint[] indices) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:94:5: Warning: No visibility specified. Defaulting to "public". 
    function allInitialOwnersAssigned() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:99:5: Warning: No visibility specified. Defaulting to "public". 
    function getPunk(uint punkIndex) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:111:5: Warning: No visibility specified. Defaulting to "public". 
    function transferPunk(address to, uint punkIndex) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:133:5: Warning: No visibility specified. Defaulting to "public". 
    function punkNoLongerForSale(uint punkIndex) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:141:5: Warning: No visibility specified. Defaulting to "public". 
    function offerPunkForSale(uint punkIndex, uint minSalePriceInWei) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:149:5: Warning: No visibility specified. Defaulting to "public". 
    function offerPunkForSaleToAddress(uint punkIndex, uint minSalePriceInWei, address toAddress) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:157:5: Warning: No visibility specified. Defaulting to "public". 
    function buyPunk(uint punkIndex) payable {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:187:5: Warning: No visibility specified. Defaulting to "public". 
    function withdraw() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:196:5: Warning: No visibility specified. Defaulting to "public". 
    function enterBidForPunk(uint punkIndex) payable {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:212:5: Warning: No visibility specified. Defaulting to "public". 
    function acceptBidForPunk(uint punkIndex, uint minPrice) {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/CryptoPunksMarket.sol:233:5: Warning: No visibility specified. Defaulting to "public". 
    function withdrawBidForPunk(uint punkIndex) {
    ^ (Relevant source part starts here and spans across multiple lines).
{'mbt': True, 'random': False, 'contract_name': 'CryptoPunksMarket', 'model_file': '../result/model-fix/0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb/CryptoPunksMarket/FSM-21.json', 'abi_file': None, 'contract_file': './contracts/CryptoPunksMarket.sol'}
solc ./contracts/CryptoPunksMarket.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
enterBidForPunk(uint256) 0x091dbfd2
acceptBidForPunk(uint256,uint256) 0x23165b75
setInitialOwners(address[],uint256[]) 0x39c5dde6
withdraw() 0x3ccfd60b
allInitialOwnersAssigned() 0x7ecedac9
buyPunk(uint256) 0x8264fe98
transferPunk(address,uint256) 0x8b72a2ec
withdrawBidForPunk(uint256) 0x979bc638
setInitialOwner(address,uint256) 0xa75a9049
offerPunkForSaleToAddress(uint256,uint256,address) 0xbf31196f
offerPunkForSale(uint256,uint256) 0xc44193c3
getPunk(uint256) 0xc81d1d5b
punkNoLongerForSale(uint256) 0xf6eeff1e
myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['withdraw()']]" --parallel-solving
Used 21.387194633483887 seconds
coverage file: ./myth_code_coverage/111cbebc-0540-4d80-a95b-d6b81c116ada.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 24.540465354919434



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()']]" --parallel-solving
Used 21.751296758651733 seconds
coverage file: ./myth_code_coverage/a7aa3a76-4333-4131-96f3-d979de68facf.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 49.516408920288086



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['setInitialOwner(address,uint256)']]" --parallel-solving
Used 23.796011686325073 seconds
coverage file: ./myth_code_coverage/47c1fdd8-2734-47ac-81bd-af8615089cdf.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 76.50004816055298



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['acceptBidForPunk(uint256,uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 676.558507680893



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['withdraw()'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['acceptBidForPunk(uint256,uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Used 21.3758487701416 seconds
coverage file: ./myth_code_coverage/84c79065-3df9-4252-9b6b-ec1591fee4d3.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 701.0726568698883



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['withdraw()'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['acceptBidForPunk(uint256,uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Used 46.380122423172 seconds
coverage file: ./myth_code_coverage/fb80bc38-0df9-482a-b969-a8e712576a70.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptoPunksMarket
Function name: setInitialOwners(address[],uint256[])
PC address: 5148
Estimated Gas Usage: 1700 - 7671
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/CryptoPunksMarket.sol:86

function setInitialOwners(address[] addresses, uint[] indices) {
        if (msg.sender != owner) throw;
        uint n = addresses.length;
        for (uint i = 0; i < n; i++) {
            setInitialOwner(addresses[i], indices[i]);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x41041000008000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: allInitialOwnersAssigned(), txdata: 0x7ecedac9, value: 0x0
Caller: [SOMEGUY], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0
Caller: [CREATOR], function: setInitialOwners(address[],uint256[]), txdata: 0x39c5dde6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffc7f, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: CryptoPunksMarket
Function name: withdraw()
PC address: 5395
Estimated Gas Usage: 7957 - 62948
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/CryptoPunksMarket.sol:193

msg.sender.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: allInitialOwnersAssigned(), txdata: 0x7ecedac9, value: 0x0
Caller: [ATTACKER], function: withdraw(), txdata: 0x3ccfd60b, value: 0x0



overall time used (seconds): 750.6522104740143



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['buyPunk(uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 1350.7093842029572



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['withdraw()'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['buyPunk(uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Used 21.516326189041138 seconds
coverage file: ./myth_code_coverage/d235e98d-5ce9-4ea4-8d45-7a4f7489a1dd.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1375.4597840309143



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['setInitialOwner(address,uint256)'], ['withdraw()'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSale(uint256,uint256)'], ['buyPunk(uint256)'], ['punkNoLongerForSale(uint256)']]" --parallel-solving
Used 25.98763394355774 seconds
coverage file: ./myth_code_coverage/769aab4d-64c2-4886-9985-54f661683d23.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1404.6120834350586



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['getPunk(uint256)'], ['offerPunkForSale(uint256,uint256)'], ['punkNoLongerForSale(uint256)'], ['transferPunk(address,uint256)']]" --parallel-solving
Used 22.298203468322754 seconds
coverage file: ./myth_code_coverage/25d7bf58-49ad-4a9d-a41f-29f23e4e751b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1430.0654554367065



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['getPunk(uint256)'], ['offerPunkForSale(uint256,uint256)'], ['punkNoLongerForSale(uint256)'], ['transferPunk(address,uint256)']]" --parallel-solving
Used 95.86352467536926 seconds
coverage file: ./myth_code_coverage/c62a5f05-c724-42df-a8d1-79a9369ba14e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1529.344119310379



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['allInitialOwnersAssigned()'], ['getPunk(uint256)'], ['offerPunkForSale(uint256,uint256)'], ['punkNoLongerForSale(uint256)'], ['transferPunk(address,uint256)']]" --parallel-solving
Used 91.41321992874146 seconds
coverage file: ./myth_code_coverage/0e6a1024-8306-41e3-93d5-62bfa68462e6.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1624.1348321437836



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['getPunk(uint256)'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSaleToAddress(uint256,uint256,address)'], ['transferPunk(address,uint256)'], ['punkNoLongerForSale(uint256)'], ['offerPunkForSale(uint256,uint256)']]" --parallel-solving
Used 22.280808687210083 seconds
coverage file: ./myth_code_coverage/7d00d266-a4ae-4b58-a908-22bbb915dfab.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1649.5660619735718



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['withdraw()'], ['getPunk(uint256)'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSaleToAddress(uint256,uint256,address)'], ['transferPunk(address,uint256)'], ['punkNoLongerForSale(uint256)'], ['offerPunkForSale(uint256,uint256)']]" --parallel-solving
Used 21.39406156539917 seconds
coverage file: ./myth_code_coverage/4c7c2ea2-9ff4-4871-9a8f-7504ee84a8b6.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1674.0963716506958



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['withdraw()'], ['withdraw()'], ['getPunk(uint256)'], ['setInitialOwners(address[],uint256[])'], ['offerPunkForSaleToAddress(uint256,uint256,address)'], ['transferPunk(address,uint256)'], ['punkNoLongerForSale(uint256)'], ['offerPunkForSale(uint256,uint256)']]" --parallel-solving
Used 21.37633776664734 seconds
coverage file: ./myth_code_coverage/e75b4a0a-b818-451c-814c-3888100cc93f.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1698.632423400879



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['setInitialOwners(address[],uint256[])'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['offerPunkForSaleToAddress(uint256,uint256,address)']]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2298.6879992485046



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['setInitialOwners(address[],uint256[])'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['offerPunkForSaleToAddress(uint256,uint256,address)']]" --parallel-solving
Used 33.67804479598999 seconds
coverage file: ./myth_code_coverage/7ec3349f-2645-4e09-990d-1dabc0071f66.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptoPunksMarket
Function name: setInitialOwners(address[],uint256[])
PC address: 5148
Estimated Gas Usage: 1700 - 7671
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/CryptoPunksMarket.sol:86

function setInitialOwners(address[] addresses, uint[] indices) {
        if (msg.sender != owner) throw;
        uint n = addresses.length;
        for (uint i = 0; i < n; i++) {
            setInitialOwner(addresses[i], indices[i]);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: allInitialOwnersAssigned(), txdata: 0x7ecedac9, value: 0x0
Caller: [CREATOR], function: setInitialOwners(address[],uint256[]), txdata: 0x39c5dde6ffffffffffffffffffffffff000001ff40ffffff00c0bffffffffffffffffff8ff, value: 0x0



overall time used (seconds): 2335.544359445572



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['allInitialOwnersAssigned()'], ['setInitialOwners(address[],uint256[])'], ['transferPunk(address,uint256)'], ['enterBidForPunk(uint256)'], ['offerPunkForSaleToAddress(uint256,uint256,address)']]" --parallel-solving
Used 40.056546688079834 seconds
coverage file: ./myth_code_coverage/105cd239-8c0f-4d4b-aba7-d4a5d0fb162f.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptoPunksMarket
Function name: setInitialOwners(address[],uint256[])
PC address: 5148
Estimated Gas Usage: 1700 - 7671
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/CryptoPunksMarket.sol:86

function setInitialOwners(address[] addresses, uint[] indices) {
        if (msg.sender != owner) throw;
        uint n = addresses.length;
        for (uint i = 0; i < n; i++) {
            setInitialOwner(addresses[i], indices[i]);
        }
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: allInitialOwnersAssigned(), txdata: 0x7ecedac9, value: 0x0
Caller: [CREATOR], function: allInitialOwnersAssigned(), txdata: 0x7ecedac9, value: 0x0
Caller: [CREATOR], function: setInitialOwners(address[],uint256[]), txdata: 0x39c5dde6ffffffffffffffffffffffffffffffffffffffff20ffffffffffffffffffffec3f, value: 0x0



overall time used (seconds): 2378.8206839561462



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['getPunk(uint256)'], ['setInitialOwners(address[],uint256[])'], ['enterBidForPunk(uint256)'], ['withdrawBidForPunk(uint256)'], ['transferPunk(address,uint256)']]" --parallel-solving
Used 22.52983260154724 seconds
coverage file: ./myth_code_coverage/37a150a3-4966-4c4d-a69f-5d01e3093ad6.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2404.5153489112854



myth -v 2 analyze ./contracts/CryptoPunksMarket.sol:CryptoPunksMarket --transaction-sequences "[['allInitialOwnersAssigned()'], ['getPunk(uint256)'], ['setInitialOwners(address[],uint256[])'], ['enterBidForPunk(uint256)'], ['withdrawBidForPunk(uint256)'], ['transferPunk(address,uint256)']]" --parallel-solving
