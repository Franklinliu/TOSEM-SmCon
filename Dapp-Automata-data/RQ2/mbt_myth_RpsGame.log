./contracts/RpsGame.sol:22:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!assertion) throw;
                        ^---^
./contracts/RpsGame.sol:193:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function RpsGame() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:21:5: Warning: This declaration shadows a builtin symbol.
    function assert(bool assertion) internal {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:274:9: Warning: Invoking events without "emit" prefix is deprecated.
        Reveal(gameid, msg.sender, choice);
        ^--------------------------------^
./contracts/RpsGame.sol:308:16: Warning: "sha3" has been deprecated in favour of "keccak256"
        return sha3(sender, choice, randomSecret);
               ^--------------------------------^
./contracts/RpsGame.sol:308:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return sha3(sender, choice, randomSecret);
               ^--------------------------------^
./contracts/RpsGame.sol:193:5: Warning: No visibility specified. Defaulting to "public". 
    function RpsGame() {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:260:48: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function reveal(uint gameid, uint8 choice, bytes32 randomSecret) public returns (bool) {
                                               ^------------------^
./contracts/RpsGame.sol:21:5: Warning: Function state mutability can be restricted to pure
    function assert(bool assertion) internal {
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:307:5: Warning: Function state mutability can be restricted to pure
    function getProof(address sender, uint8 choice, bytes32 randomSecret) public view returns (bytes32){
    ^ (Relevant source part starts here and spans across multiple lines).
./contracts/RpsGame.sol:315:5: Warning: Function state mutability can be restricted to pure
    function checkChoice(uint8 choice) public view returns (bool){
    ^ (Relevant source part starts here and spans across multiple lines).
{'mbt': True, 'random': False, 'contract_name': 'RpsGame', 'model_file': '../result/model-fix/0xa8f9c7ff9f605f401bde6659fd18d9a0d0a802c5/RpsGame/FSM-4.json', 'abi_file': None, 'contract_file': './contracts/RpsGame.sol'}
solc ./contracts/RpsGame.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
close(uint256) 0x0aebeb4e
setCEO(address) 0x27d7874c
setCOO(address) 0x2ba73c15
unpause() 0x3f4ba83a
withdrawTip(uint256) 0x4811647c
setCFO(address) 0x4e0a3379
setNewAddress(address) 0x71587988
pause() 0x8456cb59
reveal(uint256,uint8,bytes32) 0x9a42f3aa
joinGame(uint256,uint8) 0xca6649c5
createGame(bytes32,address) 0xfe1f6a0b
myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)']]" --parallel-solving
Used 25.603801727294922 seconds
coverage file: ./myth_code_coverage/c5fb6d0a-6681-4c11-a00d-5dd6b1232abe.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 28.888678073883057



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)']]" --parallel-solving
Used 25.691747665405273 seconds
coverage file: ./myth_code_coverage/dc8c9ede-d7ce-467d-aeb7-58a13fde87fb.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 57.78129720687866



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['unpause()']]" --parallel-solving
Used 25.091825485229492 seconds
coverage file: ./myth_code_coverage/7ab5da20-ecbd-4903-9946-24ffc16b427d.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 85.97973585128784



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)']]" --parallel-solving
Used 25.89345073699951 seconds
coverage file: ./myth_code_coverage/e3bd918c-e2ea-4c49-b40b-c697af776a63.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 115.13928198814392



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCFO(address)']]" --parallel-solving
Used 26.11047339439392 seconds
coverage file: ./myth_code_coverage/b595f7f5-fde6-492c-8975-5d28d5120168.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 144.48986196517944



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)']]" --parallel-solving
Used 25.992921352386475 seconds
coverage file: ./myth_code_coverage/3a7addee-6b20-4457-bceb-568221d19b50.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 173.6353039741516



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()']]" --parallel-solving
Used 25.775721073150635 seconds
coverage file: ./myth_code_coverage/dfa88e64-b2ed-4d24-8100-33d45e770976.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 202.5146565437317



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['close(uint256)']]" --parallel-solving
Used 260.30986499786377 seconds
coverage file: ./myth_code_coverage/4fa4354c-e96d-4595-bcaf-4b7143b5b3c6.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3378
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.dealer.send(game.dealerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10280020400000200, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Transaction Order Dependence ====
SWC ID: 114
Severity: Medium
Contract: RpsGame
Function name: close(uint256)
PC address: 3478
Estimated Gas Usage: 25024 - 138794
The value of the call is dependent on balance or storage write
This can lead to race conditions. An attacker may be able to run a transaction after our transaction which can change the value of the call
--------------------
In file: ./contracts/RpsGame.sol:295

game.player.send(game.playerValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4600000007a800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [ATTACKER], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 466.7107629776001



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['createGame(bytes32,address)'], ['close(uint256)']]" --parallel-solving
Used 297.684543132782 seconds
coverage file: ./myth_code_coverage/2056f9f9-3a33-470d-9898-377a84c13504.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b40, value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c00000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c01010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 768.3463869094849



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCEO(address)'], ['setCEO(address)'], ['createGame(bytes32,address)'], ['close(uint256)']]" --parallel-solving
Used 275.16388726234436 seconds
coverage file: ./myth_code_coverage/6269b763-8757-4b33-80aa-d3d9e2df6571.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2816
Estimated Gas Usage: 2007 - 2622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x0
Caller: [ATTACKER], function: setCEO(address), txdata: 0x27d7874c27272727272727272727272710, value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [CREATOR], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: close(uint256)
PC address: 2888
Estimated Gas Usage: 2027 - 2642
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:286

require(now > game.expireTime || (game.dealerChoice != NONE && game.playerChoice != NONE))

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874c000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',), value: 0x0
Caller: [SOMEGUY], function: setCEO(address), txdata: 0x27d7874c27272727272727272727272710, value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [SOMEGUY], function: close(uint256), txdata: 0x0aebeb4e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCEO(address), txdata: 0x27d7874caaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setCEO(address), txdata: 0x27d7874c01010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1047.572030544281



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
Used 336.551109790802 seconds
coverage file: ./myth_code_coverage/21b494e8-1b02-45c1-a490-d332252aa9d4.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x39800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x9c06ac8000000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0208041080800804042001802001400110080180200401000208800410014080000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, decoded_data: ('0208041080800804042001802001400110080180200401000208800410014080', '0xaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe'), value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001101010101010101010101010101010101010101010101010101010101010101e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1388.900235414505



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
Used 406.1412568092346 seconds
coverage file: ./myth_code_coverage/1a4060fd-b4bd-4287-9762-44db213b04c6.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7010
Estimated Gas Usage: 7800 - 10065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/RpsGame.sol:244

require(now < game.expireTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x807a231, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1500000000000000000000000020, decoded_data: ('0x2000000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b80, value: 0x0
Caller: [CREATOR], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: joinGame(uint256,uint8)
PC address: 7145
Estimated Gas Usage: 45043 - 169921
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:250

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1500000000000000000000000001, decoded_data: ('0x0100000000000000000000000000000000000000',), value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b0000010000020004040400040000001000040102004001000000804004100804000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, decoded_data: ('0000010000020004040400040000001000040102004001000000804004100804', '0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'), value: 0x0
Caller: [SOMEGUY], function: joinGame(uint256,uint8), txdata: 0xca6649c50000000000000000000000000000000000000000000000000000000000000001080808080808080808080808080808080808080808080808080808080808081e, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: setCOO(address), txdata: 0x2ba73c1501010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 1800.0318248271942



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setNewAddress(address)'], ['setCOO(address)'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)']]" --parallel-solving
Used 25.780227661132812 seconds
coverage file: ./myth_code_coverage/ca7295aa-ff58-4809-980a-e3d415847908.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1828.957704782486



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2429.0038216114044



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
Used 25.68488311767578 seconds
coverage file: ./myth_code_coverage/bc56612e-6083-467e-894e-19949147fab9.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2457.9084067344666



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['withdrawTip(uint256)'], ['withdrawTip(uint256)'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['reveal(uint256,uint8,bytes32)']]" --parallel-solving
Used 25.744238138198853 seconds
coverage file: ./myth_code_coverage/2e6ffab3-a65e-4462-8eda-578c849eb2a4.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2486.8785185813904



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)']]" --parallel-solving
Used 30.66759204864502 seconds
coverage file: ./myth_code_coverage/e1df7bda-eb21-472a-aaaf-be7db3582daa.json
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RpsGame
Function name: createGame(bytes32,address)
PC address: 7773
Estimated Gas Usage: 58022 - 241250
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/RpsGame.sol:227

expireTimeLimit + now

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: createGame(bytes32,address), txdata: 0xfe1f6a0b01, value: 0x0



overall time used (seconds): 2520.899652004242



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['createGame(bytes32,address)']]" --parallel-solving
Used 28.98474407196045 seconds
coverage file: ./myth_code_coverage/7bd402ef-0688-44d6-894b-9e6409720884.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2553.0529425144196



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['pause()'], ['createGame(bytes32,address)']]" --parallel-solving
Used 35.536622524261475 seconds
coverage file: ./myth_code_coverage/d833fd93-8360-4302-8c37-06230001513b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2591.9402701854706



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['close(uint256)']]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 3191.9854266643524



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['pause()'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['close(uint256)']]" --parallel-solving
Used 29.032259941101074 seconds
coverage file: ./myth_code_coverage/891a2402-1eff-42cf-86f2-b20c37ff0231.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3224.106291294098



myth -v 2 analyze ./contracts/RpsGame.sol:RpsGame --transaction-sequences "[['setCOO(address)'], ['pause()'], ['createGame(bytes32,address)'], ['joinGame(uint256,uint8)'], ['close(uint256)']]" --parallel-solving
Used 35.744349002838135 seconds
coverage file: ./myth_code_coverage/72e700c6-9904-423a-ae64-420761686a0e.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3263.1483421325684



