./contracts/GameChannel.sol:807:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        address _contractAddress,
        ^----------------------^
./contracts/GameChannel.sol:808:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes memory _userSig,
        ^-------------------^
./contracts/GameChannel.sol:865:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _serverHash,
        ^-----------------^
./contracts/GameChannel.sol:868:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        address _contractAddress,
        ^----------------------^
./contracts/GameChannel.sol:869:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes memory _serverSig,
        ^---------------------^
./contracts/GameChannel.sol:1024:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _userHash,
        ^---------------^
./contracts/GameChannel.sol:1086:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _serverHash,
        ^-----------------^
./contracts/GameChannel.sol:1087:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _userHash,
        ^---------------^
./contracts/GameChannel.sol:1211:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes memory _serverSig
        ^---------------------^
./contracts/GameChannel.sol:1260:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _serverHash,
        ^-----------------^
./contracts/GameChannel.sol:1261:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _userHash,
        ^---------------^
./contracts/GameChannel.sol:1265:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes memory _userSig
        ^-------------------^
./contracts/GameChannel.sol:1301:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _serverHash,
        ^-----------------^
./contracts/GameChannel.sol:1302:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes32 _userHash,
        ^---------------^
./contracts/GameChannel.sol:1305:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
        bytes memory _serverSig
        ^---------------------^
{'mbt': False, 'random': True, 'contract_name': 'GameChannel', 'model_file': None, 'abi_file': None, 'contract_file': './contracts/GameChannel.sol'}
solc ./contracts/GameChannel.sol --overwrite --bin --abi -o Dapp-Automata-data/RQ2/artifacts
0
activate() 0x0f15f4c0
setGameIdCntr(uint256) 0x287e9fbc
withdraw() 0x3ccfd60b
unpause() 0x3f4ba83a
serverEndGame(uint32,int256,bytes32,bytes32,uint256,address,address,bytes) 0x410453ae
claimOwnership() 0x4e71e0c8
addHouseStake() 0x4f739ff0
withdrawHouseStake(uint256) 0x81efc01d
destroy() 0x83197ef0
pause() 0x8456cb59
withdrawAll() 0x853828b6
userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32) 0x878de0ae
serverEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,address,bytes32,bytes32) 0x9399dd7e
userCancelActiveGame(uint256) 0x9b29f133
setProfitTransferTimeSpan(uint256) 0x9c0051db
activateConflictResolution() 0x9f34ce14
serverCancelActiveGame(address,uint256) 0xa8182cd3
createGame(bytes32,uint256,uint256,bytes32,bytes) 0xafc81953
userForceGameEnd(uint256) 0xb064ca18
updateConflictResolution(address) 0xcbffb1ae
serverForceGameEnd(address,uint256) 0xd1e9dcbf
setStakeRequirements(uint128,uint128) 0xd6e5fe98
userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes) 0xe60a33aa
setHouseAddress(address) 0xef3aaf54
transferOwnership(address) 0xf2fde38b
transferProfitToHouse() 0xfd306ca7
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['serverCancelActiveGame(address,uint256)'], ['withdraw()'], ['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xa8182cd3],[0x3ccfd60b],[0xe60a33aa]]" --parallel-solving
Used 77.15518808364868 seconds
coverage file: ./myth_code_coverage/62b8b9e3-b509-4b41-883e-654658f637e7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 81.16088962554932



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['transferProfitToHouse()'], ['pause()'], ['serverCancelActiveGame(address,uint256)'], ['withdraw()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xfd306ca7],[0x8456cb59],[0xa8182cd3],[0x3ccfd60b]]" --parallel-solving
Used 81.55590176582336 seconds
coverage file: ./myth_code_coverage/04a7c37f-05b8-40f2-bbb4-778b07b476f4.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 13924
Estimated Gas Usage: 3041 - 3136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:477

require(lastProfitTransferTimestamp.add(profitTransferTimeSpan) <= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008080044080802002800208010202400200000000000000000000000000000000a0, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 14901
Estimated Gas Usage: 2998 - 3093
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:477

lastProfitTransferTimestamp.add(profitTransferTimeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011004040410100810020801080120820000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0



overall time used (seconds): 166.64392685890198



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['setStakeRequirements(uint128,uint128)'], ['setProfitTransferTimeSpan(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xd6e5fe98],[0x9c0051db]]" --parallel-solving
Used 79.95161557197571 seconds
coverage file: ./myth_code_coverage/3cfce5a6-1255-4b31-977f-30dac71ac5ba.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 250.6561906337738



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['transferProfitToHouse()'], ['setGameIdCntr(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xfd306ca7],[0x287e9fbc]]" --parallel-solving
Used 81.3501467704773 seconds
coverage file: ./myth_code_coverage/d39858ca-7e90-4f82-8701-620d4042b5a7.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 13924
Estimated Gas Usage: 3041 - 3136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:477

require(lastProfitTransferTimestamp.add(profitTransferTimeSpan) <= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104004800201200840010801801080010000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 14901
Estimated Gas Usage: 2998 - 3093
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:477

lastProfitTransferTimestamp.add(profitTransferTimeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028080800280020280204004402040810000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0



overall time used (seconds): 336.1073579788208



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x878de0ae]]" --parallel-solving
Used 98.93158960342407 seconds
coverage file: ./myth_code_coverage/75174e56-67e7-4518-8a6f-fb8a8262540c.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)
PC address: 17961
Estimated Gas Usage: 3487 - 6974
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:1042

_value.castToInt()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000400804800280010110400440020120810000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32), txdata: 0x878de0aevalue: 0x0



overall time used (seconds): 439.1378860473633



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userForceGameEnd(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xb064ca18]]" --parallel-solving
Used 75.40799450874329 seconds
coverage file: ./myth_code_coverage/7a6cf73f-db95-49f6-86e9-e40da917cc02.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 518.4642069339752



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['withdraw()'], ['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)'], ['withdrawAll()'], ['setStakeRequirements(uint128,uint128)'], ['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x3ccfd60b],[0xe60a33aa],[0x853828b6],[0xd6e5fe98],[0x878de0ae]]" --parallel-solving
Used 73.15205883979797 seconds
coverage file: ./myth_code_coverage/73796971-3a08-429f-9d83-ea57144486f2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 595.5011134147644



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['serverForceGameEnd(address,uint256)'], ['claimOwnership()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xd1e9dcbf],[0x4e71e0c8]]" --parallel-solving
Used 76.76340651512146 seconds
coverage file: ./myth_code_coverage/0fa66c41-3415-4d66-87ae-fe232731003b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 676.2841820716858



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['setGameIdCntr(uint256)'], ['serverEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,address,bytes32,bytes32)'], ['transferOwnership(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x287e9fbc],[0x9399dd7e],[0xf2fde38b]]" --parallel-solving
Used 114.50266861915588 seconds
coverage file: ./myth_code_coverage/3914a60c-53af-4aa0-baf0-df0bd8450997.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: serverEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,address,bytes32,bytes32)
PC address: 17961
Estimated Gas Usage: 4496 - 8313
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:1107

_value.castToInt()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000040240020140024001201004020104820000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [CREATOR], function: setGameIdCntr(uint256), txdata: 0x287e9fbc0000000000000000000000010100001040400408200400080110010400100880, decoded_data: (1467210633631647608965486307728152734886049876096,), value: 0x0
Caller: [CREATOR], function: serverEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,address,bytes32,bytes32), txdata: 0x9399dd7e101010101010101010101010101010101010101010101010101010100204042010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010804020040880200440404001800208102040044001080102044040040210800408200200048001200440000000000000000000000000000000000000000000000000000000000000008f10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000008a101010101010101010101010004020000020400010020110040201008001104010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, value: 0x0



overall time used (seconds): 794.944146156311



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)'], ['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)'], ['setProfitTransferTimeSpan(uint256)'], ['updateConflictResolution(address)'], ['withdrawAll()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xe60a33aa],[0xe60a33aa],[0x9c0051db],[0xcbffb1ae],[0x853828b6]]" --parallel-solving
Used 83.73724722862244 seconds
coverage file: ./myth_code_coverage/ecbdbd27-0d8c-4d4f-b5fc-cfc2a56396d7.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 882.7696056365967



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)'], ['setProfitTransferTimeSpan(uint256)'], ['serverEndGame(uint32,int256,bytes32,bytes32,uint256,address,address,bytes)'], ['setStakeRequirements(uint128,uint128)'], ['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x878de0ae],[0x9c0051db],[0x410453ae],[0xd6e5fe98],[0x878de0ae]]" --parallel-solving
Used 98.71993827819824 seconds
coverage file: ./myth_code_coverage/a6037818-e914-4e54-821f-d4787e1bf64d.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)
PC address: 17961
Estimated Gas Usage: 3487 - 6974
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:1042

_value.castToInt()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000800000000000000000000000000000001000000000000000000000000000000000200880080404100108200201800104410000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [ATTACKER], function: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32), txdata: 0x878de0aec00000000000000000000000000000000000000000000000000000000000000000, value: 0x0



overall time used (seconds): 985.5457992553711



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['createGame(bytes32,uint256,uint256,bytes32,bytes)'], ['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xafc81953],[0xe60a33aa]]" --parallel-solving
Used 79.19607305526733 seconds
coverage file: ./myth_code_coverage/0629a3a3-ba47-492c-93f0-9bea51d3f7ab.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1068.7296419143677



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x3f4ba83a]]" --parallel-solving
Used 73.02242946624756 seconds
coverage file: ./myth_code_coverage/82c133d4-a41b-4e27-bd50-6b049a547658.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1145.6130321025848



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['destroy()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x83197ef0]]" --parallel-solving
Used 77.77249240875244 seconds
coverage file: ./myth_code_coverage/157a3e53-662b-4d82-b99a-03ec25f86bcc.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: destroy()
PC address: 7293
Estimated Gas Usage: 3255 - 4010
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:236

require(paused && (timePaused.add(timeSpan) <= block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008010042010020810082002102004200400000000000000000000000000000000c0, decoded_data: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: destroy()
PC address: 14901
Estimated Gas Usage: 3211 - 3966
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:236

timePaused.add(timeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088020081020014004041020028020010000000000000000000000000000000040, decoded_data: , value: 0x0
Caller: [CREATOR], function: destroy(), txdata: 0x83197ef0, value: 0x0



overall time used (seconds): 1227.2490210533142



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['withdrawHouseStake(uint256)'], ['pause()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x81efc01d],[0x8456cb59]]" --parallel-solving
Used 83.17269277572632 seconds
coverage file: ./myth_code_coverage/087caa43-19bf-4c9f-b67e-c3c108d82cd7.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: withdrawHouseStake(uint256)
PC address: 14924
Estimated Gas Usage: 2395 - 2820
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:518

houseStake.sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400202028080020401088040108002810000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawHouseStake(uint256), txdata: 0x81efc01d0101010101010101010101010101010101010101010101010101010101010101, decoded_data: (454086624460063511464984254936031011189294057512315937409637584344757371137,), value: 0x0



overall time used (seconds): 1314.328447341919



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)'], ['userCancelActiveGame(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x878de0ae],[0x9b29f133]]" --parallel-solving
Used 100.25374794006348 seconds
coverage file: ./myth_code_coverage/c7d5a847-1680-45f4-8e7a-1eb760630a10.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)
PC address: 17961
Estimated Gas Usage: 3487 - 6974
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:1042

_value.castToInt()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200880400102200202028120204020820000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32), txdata: 0x878de0ae000000000000000000000000000000000000000000000000000000000101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000100000200200000401040000010000000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000, value: 0x0



overall time used (seconds): 1418.690383195877



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)'], ['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)'], ['userForceGameEnd(uint256)'], ['addHouseStake()'], ['unpause()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xe60a33aa],[0x878de0ae],[0xb064ca18],[0x4f739ff0],[0x3f4ba83a]]" --parallel-solving
Used 83.8142442703247 seconds
coverage file: ./myth_code_coverage/a7395389-e452-4b68-8d58-441674f1005b.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1506.5962944030762



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['createGame(bytes32,uint256,uint256,bytes32,bytes)'], ['setHouseAddress(address)'], ['pause()'], ['setGameIdCntr(uint256)'], ['updateConflictResolution(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xafc81953],[0xef3aaf54],[0x8456cb59],[0x287e9fbc],[0xcbffb1ae]]" --parallel-solving
Used 79.52189874649048 seconds
coverage file: ./myth_code_coverage/33a95f78-b9dd-4e74-87d6-111691210608.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1590.1688640117645



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['serverForceGameEnd(address,uint256)'], ['withdrawHouseStake(uint256)'], ['claimOwnership()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xd1e9dcbf],[0x81efc01d],[0x4e71e0c8]]" --parallel-solving
Used 77.0255024433136 seconds
coverage file: ./myth_code_coverage/73bf56f6-ef09-4323-b165-43f1da97a1ea.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1671.2099294662476



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['pause()'], ['activate()'], ['setStakeRequirements(uint128,uint128)'], ['serverEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,address,bytes32,bytes32)'], ['serverForceGameEnd(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x8456cb59],[0x0f15f4c0],[0xd6e5fe98],[0x9399dd7e],[0xd1e9dcbf]]" --parallel-solving
Used 74.1355550289154 seconds
coverage file: ./myth_code_coverage/4efda9b1-5739-4d45-95ad-e9f334bc00f2.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1749.3494806289673



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userForceGameEnd(uint256)'], ['userEndGameConflict(uint32,uint8,uint256,uint256,int256,bytes32,bytes32,uint256,address,bytes,bytes32)'], ['addHouseStake()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xb064ca18],[0x878de0ae],[0x4f739ff0]]" --parallel-solving
Used 76.76190423965454 seconds
coverage file: ./myth_code_coverage/57262688-f72a-4119-a17c-e110027d2b5a.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 1830.1614565849304



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['transferProfitToHouse()'], ['userForceGameEnd(uint256)'], ['setStakeRequirements(uint128,uint128)'], ['userForceGameEnd(uint256)'], ['setStakeRequirements(uint128,uint128)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xfd306ca7],[0xb064ca18],[0xd6e5fe98],[0xb064ca18],[0xd6e5fe98]]" --parallel-solving
Used 84.6605179309845 seconds
coverage file: ./myth_code_coverage/79b5aa92-f82e-4ee0-b9c2-8ea0b762fbba.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 13924
Estimated Gas Usage: 3041 - 3136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:477

require(lastProfitTransferTimestamp.add(profitTransferTimeSpan) <= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080081010800110081010404002102004018080808080808080808080808080808080, decoded_data: , value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 14901
Estimated Gas Usage: 2998 - 3093
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:477

lastProfitTransferTimestamp.add(profitTransferTimeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008001400408084040801001100802020200000000000000000000000000000000c0, decoded_data: , value: 0x0
Caller: [CREATOR], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0



overall time used (seconds): 1918.845163345337



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['setProfitTransferTimeSpan(uint256)'], ['setHouseAddress(address)'], ['withdrawAll()'], ['destroy()'], ['addHouseStake()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x9c0051db],[0xef3aaf54],[0x853828b6],[0x83197ef0],[0x4f739ff0]]" --parallel-solving
Process killed due to timeout!
Process timed out and was killed.
overall time used (seconds): 2038.8733823299408



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['withdrawHouseStake(uint256)'], ['setStakeRequirements(uint128,uint128)'], ['updateConflictResolution(address)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x81efc01d],[0xd6e5fe98],[0xcbffb1ae]]" --parallel-solving
Used 91.2906608581543 seconds
coverage file: ./myth_code_coverage/df0e5629-49e1-4a5b-abfb-7c32ec138ee3.json
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: withdrawHouseStake(uint256)
PC address: 14924
Estimated Gas Usage: 2395 - 2820
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:518

houseStake.sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000208002108002204004400401082010200000000000000000000000000000000040, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawHouseStake(uint256), txdata: 0x81efc01d0101010101010101010101010101010101010101010101010101010101010101, decoded_data: (454086624460063511464984254936031011189294057512315937409637584344757371137,), value: 0x0



overall time used (seconds): 2134.2918837070465



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['activate()'], ['setHouseAddress(address)'], ['addHouseStake()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x0f15f4c0],[0xef3aaf54],[0x4f739ff0]]" --parallel-solving
Used 78.68043613433838 seconds
coverage file: ./myth_code_coverage/a5f0652e-0b49-43a2-a27d-26ce3dfabba5.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2216.925234079361



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['withdrawHouseStake(uint256)'], ['transferProfitToHouse()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x81efc01d],[0xfd306ca7]]" --parallel-solving
Used 92.0315592288971 seconds
coverage file: ./myth_code_coverage/fa99d659-f697-4225-861a-5b65698b3171.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 13924
Estimated Gas Usage: 3041 - 3136
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:477

require(lastProfitTransferTimestamp.add(profitTransferTimeSpan) <= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040102801004014008080802408040810000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawHouseStake(uint256), txdata: 0x81efc01d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: transferProfitToHouse()
PC address: 14901
Estimated Gas Usage: 2998 - 3093
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:477

lastProfitTransferTimestamp.add(profitTransferTimeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010220201002801010200402082008050000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawHouseStake(uint256), txdata: 0x81efc01d0000000000000000000000000000000000000000000000000000000000000000, decoded_data: (0,), value: 0x0
Caller: [SOMEGUY], function: transferProfitToHouse(), txdata: 0xfd306ca7, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: withdrawHouseStake(uint256)
PC address: 14924
Estimated Gas Usage: 2395 - 2820
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:518

houseStake.sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040102200120202008020210080440100000000000000000000000000000000040, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawHouseStake(uint256), txdata: 0x81efc01d0101010101010101010101010101010101010101010101010101010101010101, decoded_data: (454086624460063511464984254936031011189294057512315937409637584344757371137,), value: 0x0



overall time used (seconds): 2312.965250968933



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['pause()'], ['serverForceGameEnd(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x8456cb59],[0xd1e9dcbf]]" --parallel-solving
Used 74.64734673500061 seconds
coverage file: ./myth_code_coverage/81874812-a9e6-41a3-b0f7-ce1a418b51b1.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2391.5222272872925



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['setStakeRequirements(uint128,uint128)'], ['setHouseAddress(address)'], ['claimOwnership()'], ['transferOwnership(address)'], ['serverForceGameEnd(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xd6e5fe98],[0xef3aaf54],[0x4e71e0c8],[0xf2fde38b],[0xd1e9dcbf]]" --parallel-solving
Used 83.14675426483154 seconds
coverage file: ./myth_code_coverage/04286ed5-9ff2-4e72-b227-7f6b3aacd2f8.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2478.7705821990967



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userCancelActiveGame(uint256)'], ['serverCancelActiveGame(address,uint256)'], ['unpause()'], ['userForceGameEnd(uint256)'], ['serverEndGame(uint32,int256,bytes32,bytes32,uint256,address,address,bytes)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x9b29f133],[0xa8182cd3],[0x3f4ba83a],[0xb064ca18],[0x410453ae]]" --parallel-solving
Used 75.97972178459167 seconds
coverage file: ./myth_code_coverage/08d41264-a57e-4591-b58c-d77170aa7f82.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2558.7403349876404



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['userForceGameEnd(uint256)'], ['withdrawHouseStake(uint256)'], ['withdrawHouseStake(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xb064ca18],[0x81efc01d],[0x81efc01d]]" --parallel-solving
Used 76.53463077545166 seconds
coverage file: ./myth_code_coverage/68f9a4ee-7556-41a0-b2bd-e6a608c8e1bb.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2639.253168106079



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['activate()'], ['withdrawAll()'], ['userEndGame(uint32,int256,bytes32,bytes32,uint256,address,bytes)'], ['addHouseStake()'], ['setProfitTransferTimeSpan(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x0f15f4c0],[0x853828b6],[0xe60a33aa],[0x4f739ff0],[0x9c0051db]]" --parallel-solving
Used 104.88188600540161 seconds
coverage file: ./myth_code_coverage/510cffa2-bcb6-4630-aab1-22dc7945e09a.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: withdrawAll()
PC address: 7962
Estimated Gas Usage: 3321 - 4076
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:236

require(paused && (timePaused.add(timeSpan) <= block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008010201004040202100204010110400800000000000000000000000000000000c0, decoded_data: , value: 0x0
Caller: [CREATOR], function: activate(), txdata: 0x0f15f4c0, value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: withdrawAll()
PC address: 14901
Estimated Gas Usage: 3277 - 4032
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:236

timePaused.add(timeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024002401020804020100102100210820000000000000000000000000000000080, decoded_data: , value: 0x0
Caller: [CREATOR], function: activate(), txdata: 0x0f15f4c0, value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0



overall time used (seconds): 2748.3617951869965



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['serverCancelActiveGame(address,uint256)'], ['addHouseStake()'], ['serverCancelActiveGame(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xa8182cd3],[0x4f739ff0],[0xa8182cd3]]" --parallel-solving
Used 77.59703707695007 seconds
coverage file: ./myth_code_coverage/ccbcdd9a-e6fb-4ee4-a0f3-74ad6e9a7d96.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2829.947510957718



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['withdrawAll()']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x853828b6]]" --parallel-solving
Used 80.25155973434448 seconds
coverage file: ./myth_code_coverage/50904574-39a8-418d-960f-1d548faf3f1d.json
==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GameChannel
Function name: withdrawAll()
PC address: 7962
Estimated Gas Usage: 3321 - 4076
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/GameChannel.sol:236

require(paused && (timePaused.add(timeSpan) <= block.timestamp))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080208010200140801020010204020180018080808080808080808080808080808040, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GameChannel
Function name: withdrawAll()
PC address: 14901
Estimated Gas Usage: 3277 - 4032
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/GameChannel.sol:236

timePaused.add(timeSpan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080420400108400420401080801001810000000000000000000000000000000040, decoded_data: , value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0



overall time used (seconds): 2914.1853437423706



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['serverCancelActiveGame(address,uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0xa8182cd3]]" --parallel-solving
Used 78.00073456764221 seconds
coverage file: ./myth_code_coverage/1f84fa69-1468-4027-9441-22269a09dead.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 2996.1581320762634



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['addHouseStake()'], ['unpause()'], ['serverCancelActiveGame(address,uint256)'], ['userCancelActiveGame(uint256)'], ['userForceGameEnd(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x4f739ff0],[0x3f4ba83a],[0xa8182cd3],[0x9b29f133],[0xb064ca18]]" --parallel-solving
Used 75.61159920692444 seconds
coverage file: ./myth_code_coverage/e7139468-0e3e-4ff2-bbc2-a39d4fe63485.json
The analysis was completed successfully. No issues were detected.


overall time used (seconds): 3075.7062137126923



myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[['destroy()'], ['setProfitTransferTimeSpan(uint256)']]" --parallel-solving
myth -v 2 analyze ./contracts/GameChannel.sol:GameChannel --transaction-sequences "[[0x83197ef0],[0x9c0051db]]" --parallel-solving
